<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>洞悉 Kafka metrics</title>
    <url>/2021/01/13/kafka-metrics/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><blockquote>
<p>本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.</p>
</blockquote>
<h2 id="Kafka-metrics"><a href="#Kafka-metrics" class="headerlink" title="Kafka metrics"></a>Kafka metrics</h2><p>Kafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。<br>Yammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。<br>Yammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。<br>因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。</p>
<h3 id="metrics收集"><a href="#metrics收集" class="headerlink" title="metrics收集"></a>metrics收集</h3><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final MetricRegistry metrics &#x3D; new MetricRegistry();</span><br></pre></td></tr></table></figure>

<h4 id="Gauges"><a href="#Gauges" class="headerlink" title="Gauges"></a>Gauges</h4><p>gauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class QueueManager &#123;</span><br><span class="line">    private final Queue queue;</span><br><span class="line">    public QueueManager(MetricRegistry metrics, String name) &#123;</span><br><span class="line">        this.queue &#x3D; new Queue();</span><br><span class="line">        &#x2F;&#x2F; name(QueueManager.class, name, &quot;size&quot;) 中间按.分隔</span><br><span class="line">        metrics.register(MetricRegistry.name(QueueManager.class, name, &quot;size&quot;),</span><br><span class="line">                         new Gauge&lt;Integer&gt;() &#123;</span><br><span class="line">                             @Override</span><br><span class="line">                             public Integer getValue() &#123;</span><br><span class="line">                                 return queue.size();</span><br><span class="line">                             &#125;</span><br><span class="line">                         &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Counters"><a href="#Counters" class="headerlink" title="Counters"></a>Counters</h4><p>counter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private final Counter pendingJobs &#x3D; metrics.counter(name(QueueManager.class, &quot;pending-jobs&quot;));</span><br><span class="line">public void addJob(Job job) &#123;</span><br><span class="line">    &#x2F;&#x2F; 自增</span><br><span class="line">    pendingJobs.inc();</span><br><span class="line">    queue.offer(job);</span><br><span class="line">&#125;</span><br><span class="line">public Job takeJob() &#123;</span><br><span class="line">    pendingJobs.dec();</span><br><span class="line">    return queue.take();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MetricRegistry.name(QueueManager.class, &quot;jobs&quot;, &quot;size&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="Histograms"><a href="#Histograms" class="headerlink" title="Histograms"></a>Histograms</h4><p>histogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private final Histogram responseSizes &#x3D; metrics.histogram(name(RequestHandler.class, &quot;response-sizes&quot;));</span><br><span class="line"></span><br><span class="line">public void handleRequest(Request request, Response response) &#123;</span><br><span class="line">    &#x2F;&#x2F; 增加上报的值</span><br><span class="line">    responseSizes.update(response.getContent().length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h4><p>Timer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private final Timer responses &#x3D; metrics.timer(name(RequestHandler.class, &quot;responses&quot;));</span><br><span class="line"></span><br><span class="line">public String handleRequest(Request request, Response response) &#123;</span><br><span class="line">    final Timer.Context context &#x3D; responses.time();</span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F; 具体执行逻辑</span><br><span class="line">        return &quot;OK&quot;;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        context.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Health-Checks"><a href="#Health-Checks" class="headerlink" title="Health Checks"></a>Health Checks</h4><p>主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final HealthCheckRegistry healthChecks &#x3D; new HealthCheckRegistry();</span><br><span class="line"></span><br><span class="line">public class DatabaseHealthCheck extends HealthCheck &#123;</span><br><span class="line">    private final Database database;</span><br><span class="line"></span><br><span class="line">    public DatabaseHealthCheck(Database database) &#123;</span><br><span class="line">        this.database &#x3D; database;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public HealthCheck.Result check() throws Exception &#123;</span><br><span class="line">        if (database.isConnected()) &#123;</span><br><span class="line">            return HealthCheck.Result.healthy();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return HealthCheck.Result.unhealthy(&quot;Cannot connect to &quot; + database.getUrl());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">healthChecks.register(&quot;postgres&quot;, new DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure>

<h4 id="Metrics-Annotation"><a href="#Metrics-Annotation" class="headerlink" title="Metrics Annotation"></a>Metrics Annotation</h4><p>注解方式，简单的实现统计某个方法、某个值的数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* 统计调用的次数和时间</span><br><span class="line">*&#x2F;</span><br><span class="line">@Timed</span><br><span class="line">public void call() &#123;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#x2F;**</span><br><span class="line">* 统计登陆的次数</span><br><span class="line">*&#x2F;</span><br><span class="line">@Counted</span><br><span class="line">public void userLogin()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;other</span><br><span class="line">@CachedGauge @Gauge @ExceptionMetered @Metered @Metric</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">### metrics上报</span><br><span class="line">#### ConsoleReporter</span><br><span class="line">对于简单指标的计算，可以使用定期向控制台报告：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>final ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)<br>                                    .convertRatesTo(TimeUnit.SECONDS)<br>                                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();<br>metrics.register(“jvm.mem”, new MemoryUsageGaugeSet());<br>metrics.register(“jvm.gc”, new GarbageCollectorMetricSet());</p>
<p>reporter.start(5, TimeUnit.MINUTES);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### JmxReporter</span><br><span class="line">使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>final JmxReporter reporter = JmxReporter.forRegistry(registry).build();<br>reporter.start();</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### CsvReporter</span><br><span class="line">对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>final CsvReporter reporter = CsvReporter.forRegistry(registry)<br>                                        .formatFor(Locale.US)<br>                                        .convertRatesTo(TimeUnit.SECONDS)<br>                                        .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                        .build(new File(“~/projects/data/“));<br>reporter.start(1, TimeUnit.SECONDS);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### Slf4jReporter</span><br><span class="line">可以将上报数据记录slf4j日志：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)<br>                                            .outputTo(LoggerFactory.getLogger(“com.example.metrics”))<br>                                            .convertRatesTo(TimeUnit.SECONDS)<br>                                            .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                            .build();<br>reporter.start(1, TimeUnit.MINUTES);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### HTTP Reporter</span><br><span class="line">需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>public class MyMetricsServletListener extends MetricsServlet.ContextListener {</p>
<pre><code>public static final MetricRegistry metrics = new MetricRegistry();

@Override
protected MetricRegistry getMetricRegistry() &#123;

    metrics.register(&quot;jvm.mem&quot;, new MemoryUsageGaugeSet());
    metrics.register(&quot;jvm.gc&quot;, new GarbageCollectorMetricSet());
    System.out.println(&quot;&gt;&gt;.Listener success...&quot;);
    return metrics;
&#125;</code></pre>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>public class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {</p>
<pre><code>public static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();
@Override
protected HealthCheckRegistry getHealthCheckRegistry() &#123;

    healthCheck.register(&quot;postgres&quot;, new TFHealthCheck(false));
    return healthCheck;
&#125;</code></pre>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>&lt;listener&gt;
    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyMetricsServletListener&lt;/listener-class&gt;
&lt;/listener&gt;
&lt;listener&gt;
    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener&lt;/listener-class&gt;
&lt;/listener&gt;

&lt;servlet&gt;
    &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.codahale.metrics.servlets.AdminServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
   &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;
   &lt;url-pattern&gt;/metrics/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[源码地址](https:&#x2F;&#x2F;github.com&#x2F;dropwizard&#x2F;metrics)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Kafka性能指标</span><br><span class="line">#### kafka.server</span><br><span class="line">BrokerTopicMetrics,name&#x3D;MessagesInPerSec: 每秒消息量</span><br><span class="line">BrokerTopicMetrics,name&#x3D;BytesInPerSec: 每秒输入字节数</span><br><span class="line">BrokerTopicMetrics,name&#x3D;BytesOutPerSec: 每秒输出字节数</span><br><span class="line">ReplicaManager,name&#x3D;UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|&lt;|all replicas|</span><br><span class="line">ReplicaManager,name&#x3D;PartitionCount: 分区数</span><br><span class="line">ReplicaManager,name&#x3D;LeaderCount: Leader副本数</span><br><span class="line">ReplicaManager,name&#x3D;IsrShrinksPerSec: ISR回退</span><br><span class="line">ReplicaManager,name&#x3D;IsrExpandsPerSec: ISR超前 value is 0</span><br><span class="line">ReplicaFetcherManager,name&#x3D;MaxLag,clientId&#x3D;Replica: 滞后follower和leader的最大消息长度</span><br><span class="line">FetcherLagMetrics,name&#x3D;ConsumerLag,clientId&#x3D;([-.\w]+),topic&#x3D;([-.\w]+),partition&#x3D;([0-9]+): 滞后follower的消息长度</span><br><span class="line">DelayedOperationPurgatory,name&#x3D;PurgatorySize,delayedOperation&#x3D;Produce: producer等待请求大小</span><br><span class="line">DelayedOperationPurgatory,name&#x3D;PurgatorySize,delayedOperation&#x3D;Fetch: 获取等待请求大小</span><br><span class="line">KafkaRequestHandlerPool,name&#x3D;RequestHandlerAvgIdlePercent: 平均处理线程空闲时间</span><br><span class="line"></span><br><span class="line">#### kafka.network</span><br><span class="line">kafka.network:type&#x3D;RequestMetrics,name&#x3D;$1,request&#x3D;&#123;Produce|FetchConsumer|FetchFollower&#125;</span><br><span class="line">RequestsPerSec: 每秒请求量</span><br><span class="line">TotalTimeMs: 请求总时间</span><br><span class="line">RequestQueueTimeMs: 请求队列等待时间</span><br><span class="line">LocalTimeMs: 请求leader处理时间</span><br><span class="line">RemoteTimeMs: 请求follower等待时间</span><br><span class="line">ResponseQueueTimeMs: 请求队列等待响应时间</span><br><span class="line">ResponseSendTimeMs: 请求响应发送时间</span><br><span class="line">kafka.network:type&#x3D;SocketServer,name&#x3D;NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间</span><br><span class="line">    </span><br><span class="line">#### kafka.controller</span><br><span class="line">KafkaController,name&#x3D;ActiveControllerCount: 活跃broker数量</span><br><span class="line">ControllerStats,name&#x3D;LeaderElectionRateAndTimeMs: leader选举率</span><br><span class="line">ControllerStats,name&#x3D;UncleanLeaderElectionsPerSec: Unclean leader选举率</span><br><span class="line"></span><br><span class="line">#### common</span><br><span class="line">connection-close-rate: 每秒连接关闭率</span><br><span class="line">connection-creation-rate: 每秒新建连接率</span><br><span class="line">network-io-rate: 平均每秒IO次数（读取或写入）</span><br><span class="line">outgoing-byte-rat: 平均每秒向服务器发送的字节数</span><br><span class="line">request-rate: 平均每秒发送的请求数</span><br><span class="line">incoming-byte-rate: 每秒读取字节数</span><br><span class="line">response-rate: 每秒收到的回复</span><br><span class="line">select-rate: IO切换次数</span><br><span class="line">io-wait-ratio: IO线程等待时间</span><br><span class="line">connection-count: 当前活跃连接数</span><br><span class="line">    </span><br><span class="line">#### broker</span><br><span class="line">outgoing-byte-rate: 平均每秒发送字节数</span><br><span class="line">request-rate: 平均每秒请求数</span><br><span class="line">request-size-avg: 所有请求的平均大小</span><br><span class="line">request-latency-avg: 平均请求时间(ms)</span><br><span class="line">response-rate: 每秒收到的响应数</span><br><span class="line">    </span><br><span class="line">#### producer</span><br><span class="line">waiting-threads: 缓存区排队的用户阻塞线程数</span><br><span class="line">buffer-available-bytes: 可用内存字节数</span><br><span class="line">batch-size-avg: 每个分区每次请求发送的平均字节数</span><br><span class="line">compression-rate-avg: 批量记录平均压缩率</span><br><span class="line">record-queue-time-avg: 批量记录耗费的平均时间（ms）</span><br><span class="line">request-latency-avg: 平均请求时间（ms）</span><br><span class="line">record-send-rate: 每秒发送的平均次数</span><br><span class="line">record-retry-rate: 每秒重试发送次数</span><br><span class="line">record-error-rate: 每秒错误数量次数</span><br><span class="line">requests-in-flight: 目前等待响应的请求数量</span><br><span class="line">metadata-age: 当前生产者数据使用周期（s）</span><br><span class="line">    </span><br><span class="line">#### consumer</span><br><span class="line">##### Consumer Group</span><br><span class="line">commit-latency-avg: 提交请求所用的平均时间</span><br><span class="line">commit-rate: 每秒提交调用次数</span><br><span class="line">assigned-partitions: 当前分配给该消费者的分区数（可选）</span><br><span class="line">heartbeat-rate: 平均每秒心跳数</span><br><span class="line">join-time-avg: 群组重新加入的平均时间</span><br><span class="line">join-rate: 每秒连接组的数量</span><br><span class="line">sync-time-avg: 群组同步所需的平均时间</span><br><span class="line">sync-rate: 每秒同步的组数</span><br><span class="line">    </span><br><span class="line">##### consumer fetch</span><br><span class="line">fetch-size-avg: 每次请求获取的平均字节数</span><br><span class="line">bytes-consumed-rate: 每秒消耗的平均字节数</span><br><span class="line">fetch-latency-avg: 请求所用的平均时间</span><br><span class="line">fetch-rate: 每秒提取请求数</span><br><span class="line">records-lag-max: 分区中记录的最大滞后数量</span><br><span class="line">    </span><br><span class="line">##### topic-level fetch</span><br><span class="line">fetch-size-avg: topic请求的平均字节数</span><br><span class="line">bytes-consumed-rate: topic每秒平均消耗的字节数</span><br><span class="line"></span><br><span class="line">#### streams</span><br><span class="line">##### Thread</span><br><span class="line">[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）</span><br><span class="line">[commit|poll|process|punctuate]-rate: 平均每秒请求数</span><br><span class="line">task-created-rate: 每秒新建任务数</span><br><span class="line">task-closed-rate: 每秒关闭任务数</span><br><span class="line">skipped-records-rate: 每秒跳过记录数</span><br><span class="line">    </span><br><span class="line">##### Task</span><br><span class="line">commit-latency-avg: 平均执行时间（ms）</span><br><span class="line">commit-rate: 每秒提交的平均次数</span><br><span class="line"></span><br><span class="line">##### Processor Node</span><br><span class="line">forward-rate: 每秒从源节点向下游转发的平均速率</span><br><span class="line"></span><br><span class="line">##### State Store </span><br><span class="line">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）</span><br><span class="line">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度</span><br><span class="line"></span><br><span class="line">#### others</span><br><span class="line">GC、CPU、IO等</span><br><span class="line"></span><br><span class="line">### Monitoring实现</span><br><span class="line">#### 方式一：</span><br><span class="line">1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出</span><br><span class="line">2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列</span><br><span class="line">3.storm消费数据进行分析计算</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>需多依赖<br><dependency><br>    <groupId>io.dropwizard.metrics</groupId><br>    <artifactId>metrics-servlets</artifactId><br>    <version>3.1.0</version><br></dependency></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 方式二：</span><br><span class="line">1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果</span><br><span class="line">2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka</span><br><span class="line">3.storm消费对应kafka数据，再进行分析计算</span><br><span class="line"></span><br><span class="line">Pom依赖：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<dependency>
    <groupId>org.apache.kafka</groupId>
    <artifactId>kafka_2.11</artifactId>
    <version>0.10.2.1</version>
    <exclusions>
        <exclusion>
            <groupId>org.apache.zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
            </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.apache.zookeeper</groupId>
    <artifactId>zookeeper</artifactId>
    <version>3.4.10</version>
    <exclusions>
        <exclusion>
            <groupId>com.sun.jmx</groupId>
            <artifactId>jmxri</artifactId>
        </exclusion>
            <exclusion>
                <groupId>com.sun.jdmk</groupId>
                <artifactId>jmxtools</artifactId>
            </exclusion>
            <exclusion>
                <groupId>javax.jms</groupId>
                <artifactId>jms</artifactId>
            </exclusion>
        </exclusions>
    </dependency>
    <dependency>
           <groupId>io.dropwizard.metrics</groupId>
           <artifactId>metrics-core</artifactId>
           <version>3.1.0</version>
    </dependency>
```

<h3 id="Kafka监控工具"><a href="#Kafka监控工具" class="headerlink" title="Kafka监控工具"></a>Kafka监控工具</h3><h4 id="KafkaOffsetMonitor"><a href="#KafkaOffsetMonitor" class="headerlink" title="KafkaOffsetMonitor"></a>KafkaOffsetMonitor</h4><blockquote>
<p>是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全<br>可以对consumer消费情况进行监控，并能列出每个consumer的offset数据<br>可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）<br>可以查看每个consumser group列表信息<br>可以查看topic的历史消费信息<br><a href="https://github.com/quantifind/KafkaOffsetMonitor">源码地址</a></p>
</blockquote>
<h4 id="kafka-web-console"><a href="#kafka-web-console" class="headerlink" title="kafka-web-console"></a>kafka-web-console</h4><blockquote>
<p>也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。<br>可以查看brokers kafka集群信息<br>可以查看每个topic的Partition，logsize，分区leader等信息<br>可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息<br>可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表<br>控制台还提供了RAML中描述的JSON API<br><a href="https://github.com/claudemamo/kafka-web-console">源码地址</a></p>
</blockquote>
<h4 id="kafka-manger"><a href="#kafka-manger" class="headerlink" title="kafka-manger"></a>kafka-manger</h4><blockquote>
<p>是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况<br>可以选择你要运行的副本<br>可以基于当前分区状况重新分配生成分区<br>可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)<br>可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除<br>可以为已存在的topic增加分区，更新配置<br>可以支持多个topic批量重分区，选择partition broker位置等<br>可以启用JMX轮询代理，以及broker、metrics主题等级<br>可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者<br><a href="https://github.com/yahoo/kafka-manager">源码地址</a></p>
</blockquote>
<h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><p><strong>欢迎大家共同讨论、分享</strong></p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>kafka</tag>
      </tags>
  </entry>
</search>
