{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/monitor_icon.svg","path":"images/monitor_icon.svg","modified":0,"renderable":0},{"_id":"source/images/monitor_logo.jpg","path":"images/monitor_logo.jpg","modified":0,"renderable":0},{"_id":"source/images/sousou_gzh.png","path":"images/sousou_gzh.png","modified":0,"renderable":0},{"_id":"source/images/safari-pinned-tab.svg","path":"images/safari-pinned-tab.svg","modified":0,"renderable":0},{"_id":"source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"952ba615f04e37eb5b8aa39d3c733c3657b93541","modified":1608188220056},{"_id":"source/_drafts/test.md","hash":"7b6ee93429fb455769b164a99bc83ee99aff0949","modified":1610507412296},{"_id":"source/basic/index.md","hash":"b6252c1dfe90b4f6425259622a73d09c5de015c1","modified":1610507412299},{"_id":"source/about/index.md","hash":"67508b74bb7ecef6c3294a6281602ae548e3b55f","modified":1610507412298},{"_id":"source/categories/index.md","hash":"7a0e00764316acc9e0ff230e5f3eadb5f44dfe70","modified":1610507412301},{"_id":"source/bigdata/index.md","hash":"b98daf98c6f364ed13a9c9125849224f5ba3b698","modified":1610507412300},{"_id":"source/essay/index.md","hash":"18e1ea907b1a79c194a6d821806e8fe801657832","modified":1610507412301},{"_id":"source/images/apple-touch-icon.png","hash":"216464720b85ce4b7811b63f4456f843e3130ede","modified":1610507412302},{"_id":"source/images/favicon-16x16.png","hash":"0ae9c7e98282d4864cfaa85d6a3e180f2e6341a6","modified":1610507412302},{"_id":"source/images/favicon-32x32.png","hash":"5902e7c73eba5322c5ff9ad81bb978e588f6408a","modified":1610507412302},{"_id":"source/images/favicon.ico","hash":"d8ba5323920fc52359c9fb900ca88e20c43c2576","modified":1610507412302},{"_id":"source/images/monitor_icon.svg","hash":"81ab6232bb44ad7b4f8d06b9d8e650d4761b56a0","modified":1610507412303},{"_id":"source/README.md","hash":"17e22ff1f8de976ffa5d1f07c74802976efd3a4d","modified":1610507412295},{"_id":"source/CNAME","hash":"c2b485dad4a4fd9b237372c1c3140bf39dae5439","modified":1610507412295},{"_id":"source/images/monitor_logo.jpg","hash":"8a7fea797ddcb3463b9a467f9367226c8c480cca","modified":1610507412303},{"_id":"source/_posts/kafka_metrics.md","hash":"bc59f5685351e23478ae08a77503155f0ee49ad1","modified":1610528869009},{"_id":"source/images/safari-pinned-tab.svg","hash":"cb60b8a5de9f588b7c33683107faddc957634e09","modified":1610507412303},{"_id":"source/schedule/index.md","hash":"8c1f496fdda082d5de4312e4db4b7e78036b4b77","modified":1610507412305},{"_id":"source/monitor/index.md","hash":"e440200ccbab94fb9853465f8677978c4bf3ffb5","modified":1610528165488},{"_id":"source/images/wechatpay.png","hash":"47f765c703be37e7dc4110f6de796024b8657f6b","modified":1610507412304},{"_id":"source/tags/index.md","hash":"6c1ddb394c8f57b13f83b1b62d6facbdc77beb04","modified":1610507412305},{"_id":"source/images/sousou_gzh.png","hash":"2d42d751a13813fe9ce3edefc53074be5cabda2e","modified":1610507412303},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1607418170564},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1607418170564},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1607418170564},{"_id":"themes/next/.gitignore","hash":"4600f2b61b2fe0d61f824bda9aa2b5d072f0e635","modified":1607418170567},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1607418170568},{"_id":"themes/next/.npmignore","hash":"b5753ace1856548855d1f2c31c05da85781629e6","modified":1607418170567},{"_id":"themes/next/.DS_Store","hash":"cbdeb1c490358ce1610740978278adb2dd7b31ae","modified":1608187686666},{"_id":"themes/next/_vendors.yml","hash":"72b9d4b3ef186ac91cb61d2667b15d23a52d2671","modified":1607418237899},{"_id":"themes/next/README.md","hash":"4e249b8956df3e69789323641521a748a5af56c3","modified":1607418237898},{"_id":"themes/next/package.json","hash":"f8462cc98af78b72fba872e725ad21f71169b4da","modified":1607418170587},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1607418170587},{"_id":"themes/next/LICENSE.md","hash":"63ea7df5a8dc1b23cc92ca9de3ed16d53367f360","modified":1607418170568},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"81dbb25800165f68c21859cd3c09276b9f4cc417","modified":1607418170564},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"eefd073dfb68884cd946f7ec6d3b3619031d7650","modified":1607418170565},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1607418170566},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1607418170566},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1607418170566},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1607418170566},{"_id":"themes/next/.github/labeler.yml","hash":"e7033752b1f7c35adb61c2b38aad0a9202cdd19b","modified":1607418170566},{"_id":"themes/next/.github/release-drafter.yml","hash":"7662e31224a24154c4fe06b95ccbdff51ab8f2cc","modified":1607418170566},{"_id":"themes/next/.github/stale.yml","hash":"0e40b9975455152a690eaf7047135be348966e39","modified":1607418170566},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1607418170571},{"_id":"themes/next/languages/ar.yml","hash":"7a62243ec54196e3d1bea7364f05aded490bc234","modified":1607418170571},{"_id":"themes/next/languages/de.yml","hash":"dc448f724c7d436233e9567711a09e0d56e60e3b","modified":1607418170571},{"_id":"themes/next/languages/default.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1607418170572},{"_id":"themes/next/languages/en.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1607418170572},{"_id":"themes/next/languages/fr.yml","hash":"8ddfe98e7847ee8f1eaba9119f9fbdc42d7ec120","modified":1607418170572},{"_id":"themes/next/languages/es.yml","hash":"c3506dfaa771e827ae6adb322477c6e835cd0f09","modified":1607418170572},{"_id":"themes/next/languages/fa.yml","hash":"649823297167b902455c0aec8ddebb462df71c7d","modified":1607418170572},{"_id":"themes/next/languages/id.yml","hash":"ac018805190bc4bdc06091f5a6444e612fc700b0","modified":1607418170572},{"_id":"themes/next/languages/it.yml","hash":"82a93c32b3fcf6517441cdc73f75bc6173beb392","modified":1607418170573},{"_id":"themes/next/languages/ko.yml","hash":"8342df2f4190ba4ee004b70d1d6ccd341033dbe7","modified":1607418170573},{"_id":"themes/next/languages/ja.yml","hash":"fec1e1c15ad2df7ed1249173cc719ccba6d3b842","modified":1607418170573},{"_id":"themes/next/languages/nl.yml","hash":"0d3b56613197cb190900311507535db41daec7d4","modified":1607418170573},{"_id":"themes/next/languages/pt-BR.yml","hash":"47daeaa23c4db073e77761c9a6f62d3932af06ec","modified":1607418170574},{"_id":"themes/next/languages/pt.yml","hash":"e0e2675261e2e80f7ce7d19c945c08217b068d81","modified":1607418170574},{"_id":"themes/next/languages/ru.yml","hash":"fdf5c623890db24cb56ab5ffe0c49db3542477c8","modified":1607418170575},{"_id":"themes/next/languages/tr.yml","hash":"54de3d8d85e3c7b14b163c3d322411b7301a09b3","modified":1607418170575},{"_id":"themes/next/languages/uk.yml","hash":"1c9a0b8d8160c77cc62064207d57f460f365cae9","modified":1607418170575},{"_id":"themes/next/languages/vi.yml","hash":"1f9657b58e11db21f93eb895c90123b8f91751a7","modified":1607418170575},{"_id":"themes/next/languages/zh-CN.yml","hash":"6f7c742316c96d5b71da50fddfb060ff7ec1ea99","modified":1607418170575},{"_id":"themes/next/languages/zh-HK.yml","hash":"149fccd0afdbc8db76e372cbc73d7b5f07bb7515","modified":1607418170576},{"_id":"themes/next/languages/zh-TW.yml","hash":"d534f321ee0c235e1ebfea383eb1892bbd7d7e95","modified":1607418170576},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1607418170569},{"_id":"themes/next/docs/LICENSE.txt","hash":"8ef5fc1147c196680b06e1accab80c8d236ab951","modified":1607418170569},{"_id":"themes/next/layout/_layout.njk","hash":"23a4f9b0b768b04e66e60079f107471163f2e567","modified":1607418170576},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1607418170586},{"_id":"themes/next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1607418170586},{"_id":"themes/next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1607418170587},{"_id":"themes/next/layout/page.njk","hash":"60bc943fc708c3b2a19fc4fe0a15af86529d1fcd","modified":1607418170587},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1607418170587},{"_id":"themes/next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1607418170587},{"_id":"themes/next/scripts/renderer.js","hash":"c53dbede2ad5f68d7349bc5ed8ac7157d723e987","modified":1607418237902},{"_id":"themes/next/source/.DS_Store","hash":"952ba615f04e37eb5b8aa39d3c733c3657b93541","modified":1608188164472},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1607418170612},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1607418170565},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1607418170565},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"b47f529d059ef337b4f14ddf746c3a42744028f0","modified":1607418170565},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"d0d16ae88623d33946c16cfb68beb6ecab1ba69b","modified":1607418170565},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"0a189fda99fb2ca38a2ddea6e35ea0382a8342cf","modified":1607418170567},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1607418170567},{"_id":"themes/next/.github/workflows/linter.yml","hash":"f499ad31aea9ec598308475ef0b19b7e4177103c","modified":1607418170567},{"_id":"themes/next/.github/workflows/lock.yml","hash":"70bd0be3f33774e4b0ada3a59c901f8f9cff1013","modified":1607418170567},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1607418170567},{"_id":"themes/next/.github/workflows/tester.yml","hash":"3a740e76151cc0a696273594731d7864a8db5374","modified":1607418170567},{"_id":"themes/next/docs/ru/README.md","hash":"b14c32a1f9a5bb5dff8fcda6e2da6206e97a31da","modified":1607418237899},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0e204dde6d21f100cba6ca7751de71848490759e","modified":1607418170570},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":1607418170570},{"_id":"themes/next/docs/zh-CN/README.md","hash":"683c8299d9f88a007d454ac01b18e21eeb89993a","modified":1607418237900},{"_id":"themes/next/layout/_partials/comments.njk","hash":"334e8d8117a46c8c097788811322a62627952219","modified":1607418170577},{"_id":"themes/next/layout/_partials/footer.njk","hash":"d16fdaf94d66efc0242b0c26ed539017e3b4f795","modified":1607418170577},{"_id":"themes/next/layout/_partials/languages.njk","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1607418170579},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1607418170579},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"24eb5b683310810f93c1d7f68f8f70f1a29fd217","modified":1607418170582},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1607418170576},{"_id":"themes/next/layout/_macro/post.njk","hash":"b5dd3bf172cd242b93f5461b989e97a7efc0ac89","modified":1607418170576},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"c0a843a3019f0bb8f2e734dc173028ead732b3c0","modified":1607418237900},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6f0433940680c0f9db37542ca36f76e4bb1c1d50","modified":1607418170582},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":1607418170582},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"28a3bcb1ce50924a5a48b0f3756ac3a8736867f1","modified":1607418170582},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"bada07da2a47ed6de6081796367b19dd9e906cfb","modified":1607418170582},{"_id":"themes/next/layout/_third-party/baidu-push.njk","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1607418170583},{"_id":"themes/next/layout/_third-party/index.njk","hash":"e9f4fba68662569885e5d711f4c4dba2a1cba8e8","modified":1607418170584},{"_id":"themes/next/layout/_third-party/nprogress.njk","hash":"271139c3896a6d294f46f767cb21b2e848050841","modified":1607418170585},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"294b7f6a4fa566e369d8be0ce7b28f35b6c14563","modified":1607418170585},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1607418170585},{"_id":"themes/next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1607418170588},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1607418170590},{"_id":"themes/next/scripts/filters/locals.js","hash":"fa1e558f058f93455acdd553ab1be30b26f137e4","modified":1607418170590},{"_id":"themes/next/scripts/filters/minify.js","hash":"be0574c64a38210e449c99d38a760452015060a3","modified":1607418170591},{"_id":"themes/next/scripts/filters/post.js","hash":"bac5646993153f9f6a630c9f0052bb17fa760a9c","modified":1607418170591},{"_id":"themes/next/scripts/helpers/engine.js","hash":"682a8e16b5182c123c96b04222d967407e1fd6d6","modified":1607418170591},{"_id":"themes/next/scripts/helpers/font.js","hash":"9cf01a3cf62d9b5a1a0db8145088774bf94045c8","modified":1607418170591},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"413c51fa3caa87fe95d1d8f95e6023f096515632","modified":1607418170591},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"577c510374cf9bcfa8d3a1027e42411a9324805e","modified":1607418170591},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1607418170592},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1607418170592},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1607418170592},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1607418170592},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1607418170592},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1607418170592},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1607418170592},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"9e2c58d1a4d1dd84fa86144e5b4576b2fd10a37f","modified":1607418170593},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"464effc08e757ce8e1bb094707d06ad829af9d62","modified":1607418170593},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1607418170593},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1607418170593},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2bf00d56b3b289a7dd27e9b5820430a2457a19f3","modified":1607418170593},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1607418170593},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1607418170594},{"_id":"themes/next/source/css/_mixins.styl","hash":"b9c3d3087a917c94cf34ffd6621528d377af8fc9","modified":1607418237911},{"_id":"themes/next/source/css/main.styl","hash":"403168ee3ac99ea03e9647c962acb3a025e3f326","modified":1607418237915},{"_id":"themes/next/test/helpers/font.js","hash":"8930b1f16facc18dc6764bf6efd753ca50d3f1cb","modified":1607418170612},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1607418170612},{"_id":"themes/next/test/helpers/next-url.js","hash":"abc4ee5149df6172b2c36b6e85d1993ec748ddea","modified":1607418170612},{"_id":"themes/next/source/js/algolia-search.js","hash":"7c6c966cdbe6e46d5f885606b0b9daf2ea3f757d","modified":1607418170609},{"_id":"themes/next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1607418170610},{"_id":"themes/next/source/js/local-search.js","hash":"9f4fe7bbe0f16be72d26ccb8b22bd33767f83cff","modified":1607418170610},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1607418170611},{"_id":"themes/next/source/js/next-boot.js","hash":"c2a04055d8edec03dc74e1c45d83bd3b51467de0","modified":1607418170611},{"_id":"themes/next/source/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1607418170611},{"_id":"themes/next/source/js/utils.js","hash":"294ab5a791b73c13f155df6dce7c7ac8b1e7c6b0","modified":1607418170612},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1607418170606},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1607418170607},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1607418170607},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1607418170607},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1607418170607},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1607418170607},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1607418170608},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1607418170608},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1607418170608},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1607418170608},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1607418170609},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1607418170608},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1607418170609},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1607418170613},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1607418170613},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1607418170613},{"_id":"themes/next/test/tags/group-pictures.js","hash":"f41640e5d0f552c0b0c4ac8876a2edb0fcf54e56","modified":1607418170613},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1607418170613},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1607418170613},{"_id":"themes/next/test/tags/link-grid.js","hash":"88ec69e4dc1d493d21254ed9296a2514e91f0f8b","modified":1607418170614},{"_id":"themes/next/test/tags/mermaid.js","hash":"ed5b5a70ee49842501c952c4d62483f1fc8eba6b","modified":1607418170614},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1607418170614},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1607418170614},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1607418170614},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1607418170614},{"_id":"themes/next/test/validate/index.js","hash":"ef716c1db8e3c93c320f73b6da4010e03b4eb0ae","modified":1607418170614},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"37bdf020591feb0cf72327c9efd755bf78a0afd6","modified":1607418170577},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"52c94623e6c54ac7c710808343fa10ec5f590ddf","modified":1607418170577},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"c082a16163d1fb5d7cf858fb7522fca9d18f1ba6","modified":1607418170578},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1607418170578},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1607418170578},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1607418170578},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1607418170579},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1607418170579},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1607418170579},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"9d650333160ad1977fe42d9770869ff1660a95fe","modified":1607418170579},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1607418170579},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1607418170580},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1607418170580},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1607418170580},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"e8cf1796af4aa8f6dd48eab237879f564c93480d","modified":1607418237900},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1607418170580},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":1607418170581},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"c2ccaac9caeea1a43dc31f4f8368f8f548aab0af","modified":1607418170581},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1607418170581},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"90156f42d6e6e326ed38482d6623a0aac0352016","modified":1607418170581},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c419158e19805e2db614a5f5651e3e534e4a5e4e","modified":1607418170581},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1607418170583},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1607418170583},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"ad197fd728dd7ac90f910fdf80ce848eab3ff187","modified":1607418170583},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"e3717fbbe8aff5195427b878f4bcd77b8f79c4f3","modified":1607418170583},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1607418170583},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1607418170583},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5c2cd9b6f02bcb6248d3f18638a58e329fe8c0d1","modified":1607418170583},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"cc1450d62d76e59968bdd25836694b8339207384","modified":1607418170584},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"54eab4840443262432ec7c47e56e9859ace2a902","modified":1607418170584},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"ec0474e23ca122b34858ffb0bb8c99f241749c61","modified":1607418237901},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"c1bf0753fc4bc5f21d61eaffbcc915a462c7d830","modified":1607418170584},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"6252b0353c6a36d03c68ebec1073293442221bd1","modified":1607418170584},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"0bd36093386bb64cd90756d114cee2cd9d8773c3","modified":1607418170584},{"_id":"themes/next/layout/_third-party/comments/valine.njk","hash":"72d7abe567fab181725d120cb27eb6a6379611ea","modified":1607418237901},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"47a982aec8830c2f9711b2aff59ff83f09deb09e","modified":1607418170584},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a8239f99b316e6c060bad8173be3a25c67138697","modified":1607418237901},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"b6746dfad32cc8a46ff8f4194a7a16ca41744803","modified":1607418170584},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"97035261aa85c7d39c6ce1211cdefc6248c0446d","modified":1607418170585},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1607418170585},{"_id":"themes/next/layout/_third-party/search/swiftype.njk","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1607418170585},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1607418170585},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"0ff61346dc1327054ea2c211ba6fb654cdcdfd8d","modified":1607418170586},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.njk","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1607418170586},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"7b68f0751b28bac0f8efdb6c0345738bf3a3c38c","modified":1607418170586},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"007da98b913a62946c03a87f8fa25b3db856caa1","modified":1607418170586},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"811a3ad58c0a15550100bdc199bef8add1ad526c","modified":1607418170586},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"b6241ebbb091ef18b3d06cba08ac2e04e3f67a7d","modified":1607418170586},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":1607418170588},{"_id":"themes/next/scripts/events/lib/config.js","hash":"5a1dd04ea7124494110b3c79f9880f55d899977b","modified":1607418237901},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"61eec1fb84711369b9dabd1d2cae64858844c2eb","modified":1607418237900},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"e227174a8ebab8d5b6e8e26faf4fd66c43f045ca","modified":1607418237902},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1607418170588},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"f76c7e13fc4304f86260068c9d83d3477b64ee4b","modified":1607418170588},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1607418170589},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"4c3f325d5997ff74cf6b31c82c3a52b29da2ad98","modified":1607418170589},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"8a6907ac004b669012536d68752ea0057ffcdc89","modified":1607418170589},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1607418170589},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"387e59cd396c62fe095b388c8ff8d4191cfbdeb9","modified":1607418170589},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"9475e1aee89741f06b3fc5a144bf75c62137d8f2","modified":1607418237902},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"1198cb63375a53400431c2e65e3361416cdf8eb6","modified":1607418170590},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c702086871478093a3888df8b8a818f6a0889883","modified":1607418170590},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a2a5a0d230191f784a6cad16b06fc25bc01d5fca","modified":1607418170590},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"733a06256b3a31859b66ecceb2f9c7c2cef35df5","modified":1607418237902},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1607418170605},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1607418170605},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1607418170606},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1607418170605},{"_id":"themes/next/source/css/_variables/base.styl","hash":"1fb305b05f8f2250c6ff1bc995d081a28cfa7605","modified":1607418237914},{"_id":"themes/next/source/css/_variables/index.styl","hash":"586533d2137035f6d00a742e4084631d0608dd83","modified":1607418237914},{"_id":"themes/next/source/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1607418170611},{"_id":"themes/next/source/css/_schemes/index.styl","hash":"dea65a12f21352dda4621b4b99b71183eec8d39d","modified":1607418237914},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1607418170594},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"92915560810c0311dada43ed629b8fc4ff0fc7a4","modified":1607418237902},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"1c75a837faae9aa2d0a5f30d2078aa8d2ccc2552","modified":1607418237903},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"ee8fb8348aa76a9b346927ba4cae5666d8d777f7","modified":1607418170596},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1607418170600},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"ea96e86b6bcb160351c18a7edc4a561918a820cb","modified":1607418237909},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1607418170600},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1607418170600},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1607418170600},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"a472fb1afc6486266b85f773501a290e0a80c370","modified":1607418237909},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e1c85ab2831fd7d4bb84aea1850a0160be0023e8","modified":1607418237909},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1607418170602},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1607418170598},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"28368ac06d04ccf0bbf3dc9e0dfcf341c200b28c","modified":1607418237907},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"06786e1ed8774f8f08cbfc711296cf189aaf1b8c","modified":1607418237912},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1607418170602},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f6d165dae928c12bde3f271d299a93b334116433","modified":1607418237912},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"7b01fe4e0f6031d024045e557cc074ece8d13ffc","modified":1610529054035},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1607418170603},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7ad04d5a02a7618ebb09c1d5a435d46c4df2c620","modified":1607418237911},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1607418170603},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1607418170603},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c706733f5196776fe2657a9bebe0a727cf8fe8e5","modified":1607418237912},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"a57dca7008b1f4721359a2a3b420ed2eec02b0a1","modified":1607418237913},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1607418170604},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1607418170604},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1607418170604},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1607418170604},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"c435cfd858bf82726fff2c85d384e2207bea0370","modified":1607418237913},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"031765bd4564d97ba694c1b73615ed631f1c64aa","modified":1607418237913},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"78f0b6edc296a9ed5144da9f9752c0b96bebfaa5","modified":1607418237914},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1607418170605},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1607418170594},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1607418170594},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1607418237903},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"19fc5ca0784f5d2befddb9d8bc463b916c5c2518","modified":1607418237903},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1607418170595},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1607418170595},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8998a07acf0dbd10811835c8dfc91d92e680bcae","modified":1607418237903},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1607418170595},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"8a2e724df3d5cd14765eb951f0a9e1dba399fd35","modified":1607418170595},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1607418170596},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"d64a87996ff2762c8da0e1998d57e15b27ee4cec","modified":1607418237904},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cf6540e12c2de5befcfb7e92d915e3b75fd53dfa","modified":1607418237904},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"27001ad06f69ff035639210ab2f614861b21a4f4","modified":1607418237904},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1607418170596},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1607418237904},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1607418237905},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"48ee817d05ddc788423d7f10e9823e23fda81d04","modified":1607418237905},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1607418170597},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1607418170597},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":1607418237905},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":1607418170597},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"920f21dc03b28f006aef7e9d0fd444c2cd283efc","modified":1607418237909},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1607418170600},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1607418170601},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1607418170601},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"f09bc97e3681d73c38d7d3c5c271486c2c6537e2","modified":1607418237910},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"acfdec45e56cdd6a5ea61e0154f8a6d1bc068214","modified":1607418237910},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"29bef220307d86b1eafbb3714381df32d48b5a60","modified":1607418237910},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1607418170601},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1607418170602},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"dcf426c2a4836386c0c27235de3f9a95c5de67cc","modified":1607418237911},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1607418237911},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"8cb89864e8245a356d08ef0fee3133810f646fea","modified":1607418237906},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"254e781e7b25e31a1a589c8b38dc608802f1cc6e","modified":1607418237906},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1607418237906},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"6d8afd8e23c40bb2b2a2edbe4eb0d2671cd81188","modified":1607418237906},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a83a1236564b81eab9a23dba9a634a6de90d4726","modified":1607418237907},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"9c8abc55c9d94d384a245013951aba5ecca2f4fe","modified":1607418170598},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f11dca93e334b68a29e792f7abe682993fab7568","modified":1607418237905},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"66782e68f1c74a7d0aecef20e2ca16bbe6b52592","modified":1607418237907},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1607418170599},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1607418170599},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"ab715dbf2b98bfeb5e7b7c43e92e5c02496cc2ea","modified":1607418170599},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1607418170599},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1607418170599},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"469855a72d2c2b63a21df8fbcb8cc41d32cb9bde","modified":1607418237908},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1607418170599},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"3378f4d1640033ebde25798f602fddf88f3dcadd","modified":1607418237908},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"497fc002d7415d9bed8cad26ba74ac66045397b7","modified":1607418237908},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1607418170569},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1607418170569},{"_id":"themes/next/_config.yml","hash":"70223963595b24111ac4b855ff9c5fb4cc865da5","modified":1607418237898},{"_id":"public/search.xml","hash":"7848ec7d2db7af61d6c9ee177d5f6b89c05fc7e8","modified":1610528873636},{"_id":"public/sitemap.xml","hash":"e5ecd1121aec46ba17206679b5a06c851b8d9f91","modified":1610528873636},{"_id":"public/README.html","hash":"c21a69e5e278b309c5e2f2b18b052364bb35f42f","modified":1610528528704},{"_id":"public/basic/index.html","hash":"96d470890fd1ea62837c0fa777a82868a09cfd72","modified":1610528528704},{"_id":"public/about/index.html","hash":"251910ccbca652975ddfbf7af4031ed3c92b855a","modified":1610528528704},{"_id":"public/categories/index.html","hash":"7973bfa7ce78f258f28922d1d50df41cc726b70d","modified":1610528528704},{"_id":"public/bigdata/index.html","hash":"75bc235b9dfb7f4c7a0139fafc0aa2db9d3425db","modified":1610528528704},{"_id":"public/essay/index.html","hash":"ebcc9401fbba628bcb969ec652da0683999b658a","modified":1610528528704},{"_id":"public/schedule/index.html","hash":"d21eddd436957086e255e7ade8a54f36e437d614","modified":1610528528704},{"_id":"public/monitor/index.html","hash":"c98a86f67c88db5df840e0061a3f7c35991560c3","modified":1610528528704},{"_id":"public/tags/index.html","hash":"8a7b54422f93996063a0a5661089cf9a5eb7147d","modified":1610528528704},{"_id":"public/2021/01/13/kafka-metrics/index.html","hash":"956401c60a687ec553b396dacd5a6ee1564143e6","modified":1610528873636},{"_id":"public/archives/index.html","hash":"496de32970405b93a2d08d2e90692f5cdd42e450","modified":1610528873636},{"_id":"public/archives/2021/index.html","hash":"3e9890f1b3ab623fd6c4ed43c8a27e3954d1695a","modified":1610528873636},{"_id":"public/archives/2021/01/index.html","hash":"64676822efe83820674eb2e9e8657efd8818bf9d","modified":1610528873636},{"_id":"public/categories/monitor/index.html","hash":"887eeb4b5ecb93a777d73101a36e605d3ce77935","modified":1610528873636},{"_id":"public/index.html","hash":"987ea3c6b080427c3a0eb836d168de7ecc14f02e","modified":1610528873636},{"_id":"public/tags/kafka/index.html","hash":"d4078a364cdd53a466da380c7196d74a55d7371e","modified":1610528873636},{"_id":"public/tags/bigdata/index.html","hash":"dadc1f3fbc39d5ab85d5bf2acc34f3ae276c1b14","modified":1610528873636},{"_id":"public/CNAME","hash":"c2b485dad4a4fd9b237372c1c3140bf39dae5439","modified":1610528528704},{"_id":"public/images/favicon-16x16.png","hash":"0ae9c7e98282d4864cfaa85d6a3e180f2e6341a6","modified":1610528528704},{"_id":"public/images/apple-touch-icon.png","hash":"216464720b85ce4b7811b63f4456f843e3130ede","modified":1610528528704},{"_id":"public/images/favicon-32x32.png","hash":"5902e7c73eba5322c5ff9ad81bb978e588f6408a","modified":1610528528704},{"_id":"public/images/favicon.ico","hash":"d8ba5323920fc52359c9fb900ca88e20c43c2576","modified":1610528528704},{"_id":"public/images/monitor_icon.svg","hash":"81ab6232bb44ad7b4f8d06b9d8e650d4761b56a0","modified":1610528528704},{"_id":"public/images/monitor_logo.jpg","hash":"8a7fea797ddcb3463b9a467f9367226c8c480cca","modified":1610528528704},{"_id":"public/images/wechatpay.png","hash":"47f765c703be37e7dc4110f6de796024b8657f6b","modified":1610528528704},{"_id":"public/images/safari-pinned-tab.svg","hash":"cb60b8a5de9f588b7c33683107faddc957634e09","modified":1610528528704},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1610528528704},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1610528528704},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1610528528704},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1610528528704},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1610528528704},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1610528528704},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1610528528704},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1610528528704},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1610528528704},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1610528528704},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1610528528704},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1610528528704},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1610528528704},{"_id":"public/images/sousou_gzh.png","hash":"2d42d751a13813fe9ce3edefc53074be5cabda2e","modified":1610528528704},{"_id":"public/js/algolia-search.js","hash":"7c6c966cdbe6e46d5f885606b0b9daf2ea3f757d","modified":1610528528704},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1610528528704},{"_id":"public/js/local-search.js","hash":"9f4fe7bbe0f16be72d26ccb8b22bd33767f83cff","modified":1610528528704},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1610528528704},{"_id":"public/js/next-boot.js","hash":"c2a04055d8edec03dc74e1c45d83bd3b51467de0","modified":1610528528704},{"_id":"public/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1610528528704},{"_id":"public/js/utils.js","hash":"294ab5a791b73c13f155df6dce7c7ac8b1e7c6b0","modified":1610528528704},{"_id":"public/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1610528528704},{"_id":"public/css/main.css","hash":"f4cd77fab38eda76cec76f127c5b7ea4170cb335","modified":1610528528704}],"Category":[{"name":"监控","_id":"ckjv73qos0004bgs63rz0dt3z"}],"Data":[],"Page":[{"_content":"# woozhijun.github.io\n","source":"README.md","raw":"# woozhijun.github.io\n","date":"2021-01-13T03:10:12.295Z","updated":"2021-01-13T03:10:12.295Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"ckjv73qoc0000bgs69qb6hivo","content":"<h1 id=\"woozhijun-github-io\"><a href=\"#woozhijun-github-io\" class=\"headerlink\" title=\"woozhijun.github.io\"></a>woozhijun.github.io</h1>","site":{"data":{}},"length":19,"excerpt":"","more":"<h1 id=\"woozhijun-github-io\"><a href=\"#woozhijun-github-io\" class=\"headerlink\" title=\"woozhijun.github.io\"></a>woozhijun.github.io</h1>"},{"title":"basic","date":"2021-01-11T16:55:20.000Z","comments":0,"_content":"","source":"basic/index.md","raw":"---\ntitle: basic\ndate: 2021-01-12 00:55:20\ncomments: false\n---\n","updated":"2021-01-13T03:10:12.299Z","path":"basic/index.html","layout":"page","_id":"ckjv73qoq0002bgs6hl385stn","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"about","date":"2020-12-08T12:45:25.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-12-08 20:45:25\n---\n","updated":"2021-01-13T03:10:12.298Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckjv73qou0006bgs64ryj6hs3","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"All categories","date":"2020-12-08T12:46:07.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: All categories\ndate: 2020-12-08 20:46:07\ntype: categories\ncomments: false\n---\n","updated":"2021-01-13T03:10:12.301Z","path":"categories/index.html","layout":"page","_id":"ckjv73qov0007bgs68dnmhfk9","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"bigdata","date":"2021-01-11T16:55:00.000Z","comments":0,"_content":"","source":"bigdata/index.md","raw":"---\ntitle: bigdata\ndate: 2021-01-12 00:55:00\ncomments: false\n---\n","updated":"2021-01-13T03:10:12.300Z","path":"bigdata/index.html","layout":"page","_id":"ckjv73qov0008bgs67lree0a0","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"essay","date":"2021-01-11T16:55:34.000Z","comments":0,"_content":"","source":"essay/index.md","raw":"---\ntitle: essay\ndate: 2021-01-12 00:55:34\ncomments: false\n---\n","updated":"2021-01-13T03:10:12.301Z","path":"essay/index.html","layout":"page","_id":"ckjv73qow000abgs66gyqan8g","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"Schedule","date":"2020-12-08T12:46:42.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: Schedule\ndate: 2020-12-08 20:46:42\ntype: schedule\n---\n","updated":"2021-01-13T03:10:12.305Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"ckjv73qox000bbgs6bzxa07j9","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"monitor","date":"2021-01-13T08:56:05.000Z","_content":"","source":"monitor/index.md","raw":"---\ntitle: monitor\ndate: 2021-01-13 16:56:05\n---\n","updated":"2021-01-13T08:56:05.488Z","path":"monitor/index.html","comments":1,"layout":"page","_id":"ckjv73qoy000dbgs657la04gp","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"All tags","date":"2020-12-08T12:36:19.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2020-12-08 20:36:19\ntype: tags\ncomments: false\n---\n","updated":"2021-01-13T03:10:12.305Z","path":"tags/index.html","layout":"page","_id":"ckjv73qoy000fbgs6d0qp481z","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"洞悉 Kafka metrics","comments":1,"_content":"\n## 摘要\n> 本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.\n<!-- more -->\n\n## Kafka metrics\nKafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。\nYammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。\nYammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。\n因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。\n\n### metrics收集\n#### 注册\n\n```\nfinal MetricRegistry metrics = new MetricRegistry();\n```\n\n#### Gauges\ngauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：\n\n```\npublic class QueueManager {\n    private final Queue queue;\n    public QueueManager(MetricRegistry metrics, String name) {\n        this.queue = new Queue();\n        // name(QueueManager.class, name, \"size\") 中间按.分隔\n        metrics.register(MetricRegistry.name(QueueManager.class, name, \"size\"),\n                         new Gauge<Integer>() {\n                             @Override\n                             public Integer getValue() {\n                                 return queue.size();\n                             }\n                         });\n    }\n}\n```\n\n#### Counters\ncounter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：\n\n```\nprivate final Counter pendingJobs = metrics.counter(name(QueueManager.class, \"pending-jobs\"));\npublic void addJob(Job job) {\n    // 自增\n    pendingJobs.inc();\n    queue.offer(job);\n}\npublic Job takeJob() {\n    pendingJobs.dec();\n    return queue.take();\n}\n\nMetricRegistry.name(QueueManager.class, \"jobs\", \"size\")\n```\n\n#### Histograms\nhistogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值\n\n```\nprivate final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, \"response-sizes\"));\n\npublic void handleRequest(Request request, Response response) {\n    // 增加上报的值\n    responseSizes.update(response.getContent().length);\n}\n```\n\n#### Timers\nTimer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：\n\n```\nprivate final Timer responses = metrics.timer(name(RequestHandler.class, \"responses\"));\n\npublic String handleRequest(Request request, Response response) {\n    final Timer.Context context = responses.time();\n    try {\n        // 具体执行逻辑\n        return \"OK\";\n    } finally {\n        context.stop();\n    }\n}\n```\n\n#### Health Checks\n主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：\n\n```\nfinal HealthCheckRegistry healthChecks = new HealthCheckRegistry();\n\npublic class DatabaseHealthCheck extends HealthCheck {\n    private final Database database;\n\n    public DatabaseHealthCheck(Database database) {\n        this.database = database;\n    }\n\n    @Override\n    public HealthCheck.Result check() throws Exception {\n        if (database.isConnected()) {\n            return HealthCheck.Result.healthy();\n        } else {\n            return HealthCheck.Result.unhealthy(\"Cannot connect to \" + database.getUrl());\n        }\n    }\n}\n\nhealthChecks.register(\"postgres\", new DatabaseHealthCheck(database));\n```\n\n#### Metrics Annotation\n注解方式，简单的实现统计某个方法、某个值的数据：\n\n```\n/**\n* 统计调用的次数和时间\n*/\n@Timed\npublic void call() {\n}\n    \n/**\n* 统计登陆的次数\n*/\n@Counted\npublic void userLogin(){\n}\n\n//other\n@CachedGauge @Gauge @ExceptionMetered @Metered @Metric\n``` \n\n### metrics上报\n#### ConsoleReporter\n对于简单指标的计算，可以使用定期向控制台报告：\n\n```\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)\n\t\t\t\t                    .convertRatesTo(TimeUnit.SECONDS)\n\t\t\t\t                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();\nmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\nmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n                                                \nreporter.start(5, TimeUnit.MINUTES);\n```\n\n#### JmxReporter\n使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：\n\n```\nfinal JmxReporter reporter = JmxReporter.forRegistry(registry).build();\nreporter.start();\n```\n\n#### CsvReporter\n对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：\n\n```\nfinal CsvReporter reporter = CsvReporter.forRegistry(registry)\n                                        .formatFor(Locale.US)\n                                        .convertRatesTo(TimeUnit.SECONDS)\n                                        .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                        .build(new File(\"~/projects/data/\"));\nreporter.start(1, TimeUnit.SECONDS);\n```\n\n#### Slf4jReporter\n可以将上报数据记录slf4j日志：\n\n```\nfinal Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)\n                                            .outputTo(LoggerFactory.getLogger(\"com.example.metrics\"))\n                                            .convertRatesTo(TimeUnit.SECONDS)\n                                            .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                            .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n\n#### HTTP Reporter\n需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：\n\n```\npublic class MyMetricsServletListener extends MetricsServlet.ContextListener {\n\t\n\tpublic static final MetricRegistry metrics = new MetricRegistry();\n\n\t@Override\n\tprotected MetricRegistry getMetricRegistry() {\n\t\t\n\t\tmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\n\t\tmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n\t\tSystem.out.println(\">>.Listener success...\");\n\t\treturn metrics;\n\t}\n}\n```\n\n```\npublic class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {\n\n\tpublic static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n\t@Override\n\tprotected HealthCheckRegistry getHealthCheckRegistry() {\n\t\t\n\t\thealthCheck.register(\"postgres\", new TFHealthCheck(false));\n\t\treturn healthCheck;\n\t}\n}\n```\n\n```\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyMetricsServletListener</listener-class>\n\t</listener>\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener</listener-class>\n\t</listener>\n\t\n\t<servlet>\n        <servlet-name>metrics</servlet-name>\n        <servlet-class>com.codahale.metrics.servlets.AdminServlet</servlet-class>\n\t</servlet>\n\t<servlet-mapping>\n\t   <servlet-name>metrics</servlet-name>\n\t   <url-pattern>/metrics/*</url-pattern>\n\t</servlet-mapping>\n```\n\n[源码地址](https://github.com/dropwizard/metrics)\n\n\n### Kafka性能指标\n#### kafka.server\nBrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量\nBrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数\nBrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数\nReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|<|all replicas|\nReplicaManager,name=PartitionCount: 分区数\nReplicaManager,name=LeaderCount: Leader副本数\nReplicaManager,name=IsrShrinksPerSec: ISR回退\nReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0\nReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度\nFetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小\nKafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间\n\n#### kafka.network\nkafka.network:type=RequestMetrics,name=$1,request={Produce|FetchConsumer|FetchFollower}\nRequestsPerSec: 每秒请求量\nTotalTimeMs: 请求总时间\nRequestQueueTimeMs: 请求队列等待时间\nLocalTimeMs: 请求leader处理时间\nRemoteTimeMs: 请求follower等待时间\nResponseQueueTimeMs: 请求队列等待响应时间\nResponseSendTimeMs: 请求响应发送时间\nkafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间\n    \n#### kafka.controller\nKafkaController,name=ActiveControllerCount: 活跃broker数量\nControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率\nControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率\n\n#### common\nconnection-close-rate: 每秒连接关闭率\nconnection-creation-rate: 每秒新建连接率\nnetwork-io-rate: 平均每秒IO次数（读取或写入）\noutgoing-byte-rat: 平均每秒向服务器发送的字节数\nrequest-rate: 平均每秒发送的请求数\nincoming-byte-rate: 每秒读取字节数\nresponse-rate: 每秒收到的回复\nselect-rate: IO切换次数\nio-wait-ratio: IO线程等待时间\nconnection-count: 当前活跃连接数\n    \n#### broker\noutgoing-byte-rate: 平均每秒发送字节数\nrequest-rate: 平均每秒请求数\nrequest-size-avg: 所有请求的平均大小\nrequest-latency-avg: 平均请求时间(ms)\nresponse-rate: 每秒收到的响应数\n    \n#### producer\nwaiting-threads: 缓存区排队的用户阻塞线程数\nbuffer-available-bytes: 可用内存字节数\nbatch-size-avg: 每个分区每次请求发送的平均字节数\ncompression-rate-avg: 批量记录平均压缩率\nrecord-queue-time-avg: 批量记录耗费的平均时间（ms）\nrequest-latency-avg: 平均请求时间（ms）\nrecord-send-rate: 每秒发送的平均次数\nrecord-retry-rate: 每秒重试发送次数\nrecord-error-rate: 每秒错误数量次数\nrequests-in-flight: 目前等待响应的请求数量\nmetadata-age: 当前生产者数据使用周期（s）\n    \n#### consumer\n##### Consumer Group\ncommit-latency-avg: 提交请求所用的平均时间\ncommit-rate: 每秒提交调用次数\nassigned-partitions: 当前分配给该消费者的分区数（可选）\nheartbeat-rate: 平均每秒心跳数\njoin-time-avg: 群组重新加入的平均时间\njoin-rate: 每秒连接组的数量\nsync-time-avg: 群组同步所需的平均时间\nsync-rate: 每秒同步的组数\n    \n##### consumer fetch\nfetch-size-avg: 每次请求获取的平均字节数\nbytes-consumed-rate: 每秒消耗的平均字节数\nfetch-latency-avg: 请求所用的平均时间\nfetch-rate: 每秒提取请求数\nrecords-lag-max: 分区中记录的最大滞后数量\n    \n##### topic-level fetch\nfetch-size-avg: topic请求的平均字节数\nbytes-consumed-rate: topic每秒平均消耗的字节数\n\n#### streams\n##### Thread\n[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）\n[commit|poll|process|punctuate]-rate: 平均每秒请求数\ntask-created-rate: 每秒新建任务数\ntask-closed-rate: 每秒关闭任务数\nskipped-records-rate: 每秒跳过记录数\n    \n##### Task\ncommit-latency-avg: 平均执行时间（ms）\ncommit-rate: 每秒提交的平均次数\n\n##### Processor Node\nforward-rate: 每秒从源节点向下游转发的平均速率\n\n##### State Store \n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）\n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度\n\n#### others\nGC、CPU、IO等\n\n### Monitoring实现\n#### 方式一：\n1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出\n2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列\n3.storm消费数据进行分析计算\n\n```\n需多依赖\n<dependency>\n    <groupId>io.dropwizard.metrics</groupId>\n    <artifactId>metrics-servlets</artifactId>\n    <version>3.1.0</version>\n</dependency>\n```\n\n#### 方式二：\n1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果\n2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka\n3.storm消费对应kafka数据，再进行分析计算\n\nPom依赖：\n\n```\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n\t\t\t</exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>com.sun.jdmk</groupId>\n\t\t\t\t<artifactId>jmxtools</artifactId>\n\t\t\t</exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>javax.jms</groupId>\n\t\t\t\t<artifactId>jms</artifactId>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t       <groupId>io.dropwizard.metrics</groupId>\n\t       <artifactId>metrics-core</artifactId>\n\t       <version>3.1.0</version>\n\t</dependency>\n```\n\n### Kafka监控工具\n#### KafkaOffsetMonitor\n> 是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全\n> 可以对consumer消费情况进行监控，并能列出每个consumer的offset数据\n> 可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）\n> 可以查看每个consumser group列表信息\n> 可以查看topic的历史消费信息\n> [源码地址](https://github.com/quantifind/KafkaOffsetMonitor)\n    \n#### kafka-web-console\n> 也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。\n> 可以查看brokers kafka集群信息\n> 可以查看每个topic的Partition，logsize，分区leader等信息\n> 可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息\n> 可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表\n> 控制台还提供了RAML中描述的JSON API\n> [源码地址](https://github.com/claudemamo/kafka-web-console)\n\n#### kafka-manger\n> 是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况\n> 可以选择你要运行的副本\n> 可以基于当前分区状况重新分配生成分区\n> 可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)\n> 可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除\n> 可以为已存在的topic增加分区，更新配置\n> 可以支持多个topic批量重分区，选择partition broker位置等\n> 可以启用JMX轮询代理，以及broker、metrics主题等级\n> 可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者\n> [源码地址](https://github.com/yahoo/kafka-manager)\n\n## QA\n**欢迎大家共同讨论、分享**\n\n\n\n","source":"_posts/kafka_metrics.md","raw":"---\ntitle: 洞悉 Kafka metrics\ntags:\n  - 大数据\n  - kafka\ncategory: 监控\ncomments: true\n---\n\n## 摘要\n> 本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.\n<!-- more -->\n\n## Kafka metrics\nKafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。\nYammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。\nYammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。\n因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。\n\n### metrics收集\n#### 注册\n\n```\nfinal MetricRegistry metrics = new MetricRegistry();\n```\n\n#### Gauges\ngauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：\n\n```\npublic class QueueManager {\n    private final Queue queue;\n    public QueueManager(MetricRegistry metrics, String name) {\n        this.queue = new Queue();\n        // name(QueueManager.class, name, \"size\") 中间按.分隔\n        metrics.register(MetricRegistry.name(QueueManager.class, name, \"size\"),\n                         new Gauge<Integer>() {\n                             @Override\n                             public Integer getValue() {\n                                 return queue.size();\n                             }\n                         });\n    }\n}\n```\n\n#### Counters\ncounter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：\n\n```\nprivate final Counter pendingJobs = metrics.counter(name(QueueManager.class, \"pending-jobs\"));\npublic void addJob(Job job) {\n    // 自增\n    pendingJobs.inc();\n    queue.offer(job);\n}\npublic Job takeJob() {\n    pendingJobs.dec();\n    return queue.take();\n}\n\nMetricRegistry.name(QueueManager.class, \"jobs\", \"size\")\n```\n\n#### Histograms\nhistogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值\n\n```\nprivate final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, \"response-sizes\"));\n\npublic void handleRequest(Request request, Response response) {\n    // 增加上报的值\n    responseSizes.update(response.getContent().length);\n}\n```\n\n#### Timers\nTimer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：\n\n```\nprivate final Timer responses = metrics.timer(name(RequestHandler.class, \"responses\"));\n\npublic String handleRequest(Request request, Response response) {\n    final Timer.Context context = responses.time();\n    try {\n        // 具体执行逻辑\n        return \"OK\";\n    } finally {\n        context.stop();\n    }\n}\n```\n\n#### Health Checks\n主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：\n\n```\nfinal HealthCheckRegistry healthChecks = new HealthCheckRegistry();\n\npublic class DatabaseHealthCheck extends HealthCheck {\n    private final Database database;\n\n    public DatabaseHealthCheck(Database database) {\n        this.database = database;\n    }\n\n    @Override\n    public HealthCheck.Result check() throws Exception {\n        if (database.isConnected()) {\n            return HealthCheck.Result.healthy();\n        } else {\n            return HealthCheck.Result.unhealthy(\"Cannot connect to \" + database.getUrl());\n        }\n    }\n}\n\nhealthChecks.register(\"postgres\", new DatabaseHealthCheck(database));\n```\n\n#### Metrics Annotation\n注解方式，简单的实现统计某个方法、某个值的数据：\n\n```\n/**\n* 统计调用的次数和时间\n*/\n@Timed\npublic void call() {\n}\n    \n/**\n* 统计登陆的次数\n*/\n@Counted\npublic void userLogin(){\n}\n\n//other\n@CachedGauge @Gauge @ExceptionMetered @Metered @Metric\n``` \n\n### metrics上报\n#### ConsoleReporter\n对于简单指标的计算，可以使用定期向控制台报告：\n\n```\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)\n\t\t\t\t                    .convertRatesTo(TimeUnit.SECONDS)\n\t\t\t\t                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();\nmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\nmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n                                                \nreporter.start(5, TimeUnit.MINUTES);\n```\n\n#### JmxReporter\n使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：\n\n```\nfinal JmxReporter reporter = JmxReporter.forRegistry(registry).build();\nreporter.start();\n```\n\n#### CsvReporter\n对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：\n\n```\nfinal CsvReporter reporter = CsvReporter.forRegistry(registry)\n                                        .formatFor(Locale.US)\n                                        .convertRatesTo(TimeUnit.SECONDS)\n                                        .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                        .build(new File(\"~/projects/data/\"));\nreporter.start(1, TimeUnit.SECONDS);\n```\n\n#### Slf4jReporter\n可以将上报数据记录slf4j日志：\n\n```\nfinal Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)\n                                            .outputTo(LoggerFactory.getLogger(\"com.example.metrics\"))\n                                            .convertRatesTo(TimeUnit.SECONDS)\n                                            .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                            .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n\n#### HTTP Reporter\n需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：\n\n```\npublic class MyMetricsServletListener extends MetricsServlet.ContextListener {\n\t\n\tpublic static final MetricRegistry metrics = new MetricRegistry();\n\n\t@Override\n\tprotected MetricRegistry getMetricRegistry() {\n\t\t\n\t\tmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\n\t\tmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n\t\tSystem.out.println(\">>.Listener success...\");\n\t\treturn metrics;\n\t}\n}\n```\n\n```\npublic class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {\n\n\tpublic static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n\t@Override\n\tprotected HealthCheckRegistry getHealthCheckRegistry() {\n\t\t\n\t\thealthCheck.register(\"postgres\", new TFHealthCheck(false));\n\t\treturn healthCheck;\n\t}\n}\n```\n\n```\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyMetricsServletListener</listener-class>\n\t</listener>\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener</listener-class>\n\t</listener>\n\t\n\t<servlet>\n        <servlet-name>metrics</servlet-name>\n        <servlet-class>com.codahale.metrics.servlets.AdminServlet</servlet-class>\n\t</servlet>\n\t<servlet-mapping>\n\t   <servlet-name>metrics</servlet-name>\n\t   <url-pattern>/metrics/*</url-pattern>\n\t</servlet-mapping>\n```\n\n[源码地址](https://github.com/dropwizard/metrics)\n\n\n### Kafka性能指标\n#### kafka.server\nBrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量\nBrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数\nBrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数\nReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|<|all replicas|\nReplicaManager,name=PartitionCount: 分区数\nReplicaManager,name=LeaderCount: Leader副本数\nReplicaManager,name=IsrShrinksPerSec: ISR回退\nReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0\nReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度\nFetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小\nKafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间\n\n#### kafka.network\nkafka.network:type=RequestMetrics,name=$1,request={Produce|FetchConsumer|FetchFollower}\nRequestsPerSec: 每秒请求量\nTotalTimeMs: 请求总时间\nRequestQueueTimeMs: 请求队列等待时间\nLocalTimeMs: 请求leader处理时间\nRemoteTimeMs: 请求follower等待时间\nResponseQueueTimeMs: 请求队列等待响应时间\nResponseSendTimeMs: 请求响应发送时间\nkafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间\n    \n#### kafka.controller\nKafkaController,name=ActiveControllerCount: 活跃broker数量\nControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率\nControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率\n\n#### common\nconnection-close-rate: 每秒连接关闭率\nconnection-creation-rate: 每秒新建连接率\nnetwork-io-rate: 平均每秒IO次数（读取或写入）\noutgoing-byte-rat: 平均每秒向服务器发送的字节数\nrequest-rate: 平均每秒发送的请求数\nincoming-byte-rate: 每秒读取字节数\nresponse-rate: 每秒收到的回复\nselect-rate: IO切换次数\nio-wait-ratio: IO线程等待时间\nconnection-count: 当前活跃连接数\n    \n#### broker\noutgoing-byte-rate: 平均每秒发送字节数\nrequest-rate: 平均每秒请求数\nrequest-size-avg: 所有请求的平均大小\nrequest-latency-avg: 平均请求时间(ms)\nresponse-rate: 每秒收到的响应数\n    \n#### producer\nwaiting-threads: 缓存区排队的用户阻塞线程数\nbuffer-available-bytes: 可用内存字节数\nbatch-size-avg: 每个分区每次请求发送的平均字节数\ncompression-rate-avg: 批量记录平均压缩率\nrecord-queue-time-avg: 批量记录耗费的平均时间（ms）\nrequest-latency-avg: 平均请求时间（ms）\nrecord-send-rate: 每秒发送的平均次数\nrecord-retry-rate: 每秒重试发送次数\nrecord-error-rate: 每秒错误数量次数\nrequests-in-flight: 目前等待响应的请求数量\nmetadata-age: 当前生产者数据使用周期（s）\n    \n#### consumer\n##### Consumer Group\ncommit-latency-avg: 提交请求所用的平均时间\ncommit-rate: 每秒提交调用次数\nassigned-partitions: 当前分配给该消费者的分区数（可选）\nheartbeat-rate: 平均每秒心跳数\njoin-time-avg: 群组重新加入的平均时间\njoin-rate: 每秒连接组的数量\nsync-time-avg: 群组同步所需的平均时间\nsync-rate: 每秒同步的组数\n    \n##### consumer fetch\nfetch-size-avg: 每次请求获取的平均字节数\nbytes-consumed-rate: 每秒消耗的平均字节数\nfetch-latency-avg: 请求所用的平均时间\nfetch-rate: 每秒提取请求数\nrecords-lag-max: 分区中记录的最大滞后数量\n    \n##### topic-level fetch\nfetch-size-avg: topic请求的平均字节数\nbytes-consumed-rate: topic每秒平均消耗的字节数\n\n#### streams\n##### Thread\n[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）\n[commit|poll|process|punctuate]-rate: 平均每秒请求数\ntask-created-rate: 每秒新建任务数\ntask-closed-rate: 每秒关闭任务数\nskipped-records-rate: 每秒跳过记录数\n    \n##### Task\ncommit-latency-avg: 平均执行时间（ms）\ncommit-rate: 每秒提交的平均次数\n\n##### Processor Node\nforward-rate: 每秒从源节点向下游转发的平均速率\n\n##### State Store \n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）\n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度\n\n#### others\nGC、CPU、IO等\n\n### Monitoring实现\n#### 方式一：\n1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出\n2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列\n3.storm消费数据进行分析计算\n\n```\n需多依赖\n<dependency>\n    <groupId>io.dropwizard.metrics</groupId>\n    <artifactId>metrics-servlets</artifactId>\n    <version>3.1.0</version>\n</dependency>\n```\n\n#### 方式二：\n1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果\n2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka\n3.storm消费对应kafka数据，再进行分析计算\n\nPom依赖：\n\n```\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n\t\t\t</exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>com.sun.jdmk</groupId>\n\t\t\t\t<artifactId>jmxtools</artifactId>\n\t\t\t</exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>javax.jms</groupId>\n\t\t\t\t<artifactId>jms</artifactId>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t       <groupId>io.dropwizard.metrics</groupId>\n\t       <artifactId>metrics-core</artifactId>\n\t       <version>3.1.0</version>\n\t</dependency>\n```\n\n### Kafka监控工具\n#### KafkaOffsetMonitor\n> 是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全\n> 可以对consumer消费情况进行监控，并能列出每个consumer的offset数据\n> 可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）\n> 可以查看每个consumser group列表信息\n> 可以查看topic的历史消费信息\n> [源码地址](https://github.com/quantifind/KafkaOffsetMonitor)\n    \n#### kafka-web-console\n> 也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。\n> 可以查看brokers kafka集群信息\n> 可以查看每个topic的Partition，logsize，分区leader等信息\n> 可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息\n> 可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表\n> 控制台还提供了RAML中描述的JSON API\n> [源码地址](https://github.com/claudemamo/kafka-web-console)\n\n#### kafka-manger\n> 是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况\n> 可以选择你要运行的副本\n> 可以基于当前分区状况重新分配生成分区\n> 可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)\n> 可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除\n> 可以为已存在的topic增加分区，更新配置\n> 可以支持多个topic批量重分区，选择partition broker位置等\n> 可以启用JMX轮询代理，以及broker、metrics主题等级\n> 可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者\n> [源码地址](https://github.com/yahoo/kafka-manager)\n\n## QA\n**欢迎大家共同讨论、分享**\n\n\n\n","slug":"kafka-metrics","published":1,"date":"2021-01-13T09:07:49.009Z","updated":"2021-01-13T09:07:49.009Z","_id":"ckjv73qom0001bgs688fvgi23","layout":"post","photos":[],"link":"","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"Kafka-metrics\"><a href=\"#Kafka-metrics\" class=\"headerlink\" title=\"Kafka metrics\"></a>Kafka metrics</h2><p>Kafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。<br>Yammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。<br>Yammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。<br>因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。</p>\n<h3 id=\"metrics收集\"><a href=\"#metrics收集\" class=\"headerlink\" title=\"metrics收集\"></a>metrics收集</h3><h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final MetricRegistry metrics &#x3D; new MetricRegistry();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Gauges\"><a href=\"#Gauges\" class=\"headerlink\" title=\"Gauges\"></a>Gauges</h4><p>gauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueueManager &#123;</span><br><span class=\"line\">    private final Queue queue;</span><br><span class=\"line\">    public QueueManager(MetricRegistry metrics, String name) &#123;</span><br><span class=\"line\">        this.queue &#x3D; new Queue();</span><br><span class=\"line\">        &#x2F;&#x2F; name(QueueManager.class, name, &quot;size&quot;) 中间按.分隔</span><br><span class=\"line\">        metrics.register(MetricRegistry.name(QueueManager.class, name, &quot;size&quot;),</span><br><span class=\"line\">                         new Gauge&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                             @Override</span><br><span class=\"line\">                             public Integer getValue() &#123;</span><br><span class=\"line\">                                 return queue.size();</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h4><p>counter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Counter pendingJobs &#x3D; metrics.counter(name(QueueManager.class, &quot;pending-jobs&quot;));</span><br><span class=\"line\">public void addJob(Job job) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 自增</span><br><span class=\"line\">    pendingJobs.inc();</span><br><span class=\"line\">    queue.offer(job);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Job takeJob() &#123;</span><br><span class=\"line\">    pendingJobs.dec();</span><br><span class=\"line\">    return queue.take();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MetricRegistry.name(QueueManager.class, &quot;jobs&quot;, &quot;size&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Histograms\"><a href=\"#Histograms\" class=\"headerlink\" title=\"Histograms\"></a>Histograms</h4><p>histogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Histogram responseSizes &#x3D; metrics.histogram(name(RequestHandler.class, &quot;response-sizes&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 增加上报的值</span><br><span class=\"line\">    responseSizes.update(response.getContent().length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h4><p>Timer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Timer responses &#x3D; metrics.timer(name(RequestHandler.class, &quot;responses&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public String handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    final Timer.Context context &#x3D; responses.time();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 具体执行逻辑</span><br><span class=\"line\">        return &quot;OK&quot;;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Health-Checks\"><a href=\"#Health-Checks\" class=\"headerlink\" title=\"Health Checks\"></a>Health Checks</h4><p>主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final HealthCheckRegistry healthChecks &#x3D; new HealthCheckRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">public class DatabaseHealthCheck extends HealthCheck &#123;</span><br><span class=\"line\">    private final Database database;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DatabaseHealthCheck(Database database) &#123;</span><br><span class=\"line\">        this.database &#x3D; database;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public HealthCheck.Result check() throws Exception &#123;</span><br><span class=\"line\">        if (database.isConnected()) &#123;</span><br><span class=\"line\">            return HealthCheck.Result.healthy();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return HealthCheck.Result.unhealthy(&quot;Cannot connect to &quot; + database.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">healthChecks.register(&quot;postgres&quot;, new DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Metrics-Annotation\"><a href=\"#Metrics-Annotation\" class=\"headerlink\" title=\"Metrics Annotation\"></a>Metrics Annotation</h4><p>注解方式，简单的实现统计某个方法、某个值的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">* 统计调用的次数和时间</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@Timed</span><br><span class=\"line\">public void call() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\">* 统计登陆的次数</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@Counted</span><br><span class=\"line\">public void userLogin()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;other</span><br><span class=\"line\">@CachedGauge @Gauge @ExceptionMetered @Metered @Metric</span><br><span class=\"line\">&#96;&#96;&#96; </span><br><span class=\"line\"></span><br><span class=\"line\">### metrics上报</span><br><span class=\"line\">#### ConsoleReporter</span><br><span class=\"line\">对于简单指标的计算，可以使用定期向控制台报告：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)<br>                                    .convertRatesTo(TimeUnit.SECONDS)<br>                                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();<br>metrics.register(“jvm.mem”, new MemoryUsageGaugeSet());<br>metrics.register(“jvm.gc”, new GarbageCollectorMetricSet());</p>\n<p>reporter.start(5, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### JmxReporter</span><br><span class=\"line\">使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final JmxReporter reporter = JmxReporter.forRegistry(registry).build();<br>reporter.start();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### CsvReporter</span><br><span class=\"line\">对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final CsvReporter reporter = CsvReporter.forRegistry(registry)<br>                                        .formatFor(Locale.US)<br>                                        .convertRatesTo(TimeUnit.SECONDS)<br>                                        .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                        .build(new File(“~/projects/data/“));<br>reporter.start(1, TimeUnit.SECONDS);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### Slf4jReporter</span><br><span class=\"line\">可以将上报数据记录slf4j日志：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)<br>                                            .outputTo(LoggerFactory.getLogger(“com.example.metrics”))<br>                                            .convertRatesTo(TimeUnit.SECONDS)<br>                                            .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                            .build();<br>reporter.start(1, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### HTTP Reporter</span><br><span class=\"line\">需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>public class MyMetricsServletListener extends MetricsServlet.ContextListener {</p>\n<pre><code>public static final MetricRegistry metrics = new MetricRegistry();\n\n@Override\nprotected MetricRegistry getMetricRegistry() &#123;\n\n    metrics.register(&quot;jvm.mem&quot;, new MemoryUsageGaugeSet());\n    metrics.register(&quot;jvm.gc&quot;, new GarbageCollectorMetricSet());\n    System.out.println(&quot;&gt;&gt;.Listener success...&quot;);\n    return metrics;\n&#125;</code></pre>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>public class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {</p>\n<pre><code>public static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n@Override\nprotected HealthCheckRegistry getHealthCheckRegistry() &#123;\n\n    healthCheck.register(&quot;postgres&quot;, new TFHealthCheck(false));\n    return healthCheck;\n&#125;</code></pre>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyMetricsServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n\n&lt;servlet&gt;\n    &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;com.codahale.metrics.servlets.AdminServlet&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n   &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n   &lt;url-pattern&gt;/metrics/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[源码地址](https:&#x2F;&#x2F;github.com&#x2F;dropwizard&#x2F;metrics)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Kafka性能指标</span><br><span class=\"line\">#### kafka.server</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;MessagesInPerSec: 每秒消息量</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;BytesInPerSec: 每秒输入字节数</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;BytesOutPerSec: 每秒输出字节数</span><br><span class=\"line\">ReplicaManager,name&#x3D;UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|&lt;|all replicas|</span><br><span class=\"line\">ReplicaManager,name&#x3D;PartitionCount: 分区数</span><br><span class=\"line\">ReplicaManager,name&#x3D;LeaderCount: Leader副本数</span><br><span class=\"line\">ReplicaManager,name&#x3D;IsrShrinksPerSec: ISR回退</span><br><span class=\"line\">ReplicaManager,name&#x3D;IsrExpandsPerSec: ISR超前 value is 0</span><br><span class=\"line\">ReplicaFetcherManager,name&#x3D;MaxLag,clientId&#x3D;Replica: 滞后follower和leader的最大消息长度</span><br><span class=\"line\">FetcherLagMetrics,name&#x3D;ConsumerLag,clientId&#x3D;([-.\\w]+),topic&#x3D;([-.\\w]+),partition&#x3D;([0-9]+): 滞后follower的消息长度</span><br><span class=\"line\">DelayedOperationPurgatory,name&#x3D;PurgatorySize,delayedOperation&#x3D;Produce: producer等待请求大小</span><br><span class=\"line\">DelayedOperationPurgatory,name&#x3D;PurgatorySize,delayedOperation&#x3D;Fetch: 获取等待请求大小</span><br><span class=\"line\">KafkaRequestHandlerPool,name&#x3D;RequestHandlerAvgIdlePercent: 平均处理线程空闲时间</span><br><span class=\"line\"></span><br><span class=\"line\">#### kafka.network</span><br><span class=\"line\">kafka.network:type&#x3D;RequestMetrics,name&#x3D;$1,request&#x3D;&#123;Produce|FetchConsumer|FetchFollower&#125;</span><br><span class=\"line\">RequestsPerSec: 每秒请求量</span><br><span class=\"line\">TotalTimeMs: 请求总时间</span><br><span class=\"line\">RequestQueueTimeMs: 请求队列等待时间</span><br><span class=\"line\">LocalTimeMs: 请求leader处理时间</span><br><span class=\"line\">RemoteTimeMs: 请求follower等待时间</span><br><span class=\"line\">ResponseQueueTimeMs: 请求队列等待响应时间</span><br><span class=\"line\">ResponseSendTimeMs: 请求响应发送时间</span><br><span class=\"line\">kafka.network:type&#x3D;SocketServer,name&#x3D;NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间</span><br><span class=\"line\">    </span><br><span class=\"line\">#### kafka.controller</span><br><span class=\"line\">KafkaController,name&#x3D;ActiveControllerCount: 活跃broker数量</span><br><span class=\"line\">ControllerStats,name&#x3D;LeaderElectionRateAndTimeMs: leader选举率</span><br><span class=\"line\">ControllerStats,name&#x3D;UncleanLeaderElectionsPerSec: Unclean leader选举率</span><br><span class=\"line\"></span><br><span class=\"line\">#### common</span><br><span class=\"line\">connection-close-rate: 每秒连接关闭率</span><br><span class=\"line\">connection-creation-rate: 每秒新建连接率</span><br><span class=\"line\">network-io-rate: 平均每秒IO次数（读取或写入）</span><br><span class=\"line\">outgoing-byte-rat: 平均每秒向服务器发送的字节数</span><br><span class=\"line\">request-rate: 平均每秒发送的请求数</span><br><span class=\"line\">incoming-byte-rate: 每秒读取字节数</span><br><span class=\"line\">response-rate: 每秒收到的回复</span><br><span class=\"line\">select-rate: IO切换次数</span><br><span class=\"line\">io-wait-ratio: IO线程等待时间</span><br><span class=\"line\">connection-count: 当前活跃连接数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### broker</span><br><span class=\"line\">outgoing-byte-rate: 平均每秒发送字节数</span><br><span class=\"line\">request-rate: 平均每秒请求数</span><br><span class=\"line\">request-size-avg: 所有请求的平均大小</span><br><span class=\"line\">request-latency-avg: 平均请求时间(ms)</span><br><span class=\"line\">response-rate: 每秒收到的响应数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### producer</span><br><span class=\"line\">waiting-threads: 缓存区排队的用户阻塞线程数</span><br><span class=\"line\">buffer-available-bytes: 可用内存字节数</span><br><span class=\"line\">batch-size-avg: 每个分区每次请求发送的平均字节数</span><br><span class=\"line\">compression-rate-avg: 批量记录平均压缩率</span><br><span class=\"line\">record-queue-time-avg: 批量记录耗费的平均时间（ms）</span><br><span class=\"line\">request-latency-avg: 平均请求时间（ms）</span><br><span class=\"line\">record-send-rate: 每秒发送的平均次数</span><br><span class=\"line\">record-retry-rate: 每秒重试发送次数</span><br><span class=\"line\">record-error-rate: 每秒错误数量次数</span><br><span class=\"line\">requests-in-flight: 目前等待响应的请求数量</span><br><span class=\"line\">metadata-age: 当前生产者数据使用周期（s）</span><br><span class=\"line\">    </span><br><span class=\"line\">#### consumer</span><br><span class=\"line\">##### Consumer Group</span><br><span class=\"line\">commit-latency-avg: 提交请求所用的平均时间</span><br><span class=\"line\">commit-rate: 每秒提交调用次数</span><br><span class=\"line\">assigned-partitions: 当前分配给该消费者的分区数（可选）</span><br><span class=\"line\">heartbeat-rate: 平均每秒心跳数</span><br><span class=\"line\">join-time-avg: 群组重新加入的平均时间</span><br><span class=\"line\">join-rate: 每秒连接组的数量</span><br><span class=\"line\">sync-time-avg: 群组同步所需的平均时间</span><br><span class=\"line\">sync-rate: 每秒同步的组数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### consumer fetch</span><br><span class=\"line\">fetch-size-avg: 每次请求获取的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: 每秒消耗的平均字节数</span><br><span class=\"line\">fetch-latency-avg: 请求所用的平均时间</span><br><span class=\"line\">fetch-rate: 每秒提取请求数</span><br><span class=\"line\">records-lag-max: 分区中记录的最大滞后数量</span><br><span class=\"line\">    </span><br><span class=\"line\">##### topic-level fetch</span><br><span class=\"line\">fetch-size-avg: topic请求的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: topic每秒平均消耗的字节数</span><br><span class=\"line\"></span><br><span class=\"line\">#### streams</span><br><span class=\"line\">##### Thread</span><br><span class=\"line\">[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">[commit|poll|process|punctuate]-rate: 平均每秒请求数</span><br><span class=\"line\">task-created-rate: 每秒新建任务数</span><br><span class=\"line\">task-closed-rate: 每秒关闭任务数</span><br><span class=\"line\">skipped-records-rate: 每秒跳过记录数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### Task</span><br><span class=\"line\">commit-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">commit-rate: 每秒提交的平均次数</span><br><span class=\"line\"></span><br><span class=\"line\">##### Processor Node</span><br><span class=\"line\">forward-rate: 每秒从源节点向下游转发的平均速率</span><br><span class=\"line\"></span><br><span class=\"line\">##### State Store </span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）</span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度</span><br><span class=\"line\"></span><br><span class=\"line\">#### others</span><br><span class=\"line\">GC、CPU、IO等</span><br><span class=\"line\"></span><br><span class=\"line\">### Monitoring实现</span><br><span class=\"line\">#### 方式一：</span><br><span class=\"line\">1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出</span><br><span class=\"line\">2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列</span><br><span class=\"line\">3.storm消费数据进行分析计算</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>需多依赖<br><dependency><br>    <groupId>io.dropwizard.metrics</groupId><br>    <artifactId>metrics-servlets</artifactId><br>    <version>3.1.0</version><br></dependency></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 方式二：</span><br><span class=\"line\">1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果</span><br><span class=\"line\">2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka</span><br><span class=\"line\">3.storm消费对应kafka数据，再进行分析计算</span><br><span class=\"line\"></span><br><span class=\"line\">Pom依赖：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n            </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n            <exclusion>\n                <groupId>com.sun.jdmk</groupId>\n                <artifactId>jmxtools</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>javax.jms</groupId>\n                <artifactId>jms</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n    <dependency>\n           <groupId>io.dropwizard.metrics</groupId>\n           <artifactId>metrics-core</artifactId>\n           <version>3.1.0</version>\n    </dependency>\n```\n\n<h3 id=\"Kafka监控工具\"><a href=\"#Kafka监控工具\" class=\"headerlink\" title=\"Kafka监控工具\"></a>Kafka监控工具</h3><h4 id=\"KafkaOffsetMonitor\"><a href=\"#KafkaOffsetMonitor\" class=\"headerlink\" title=\"KafkaOffsetMonitor\"></a>KafkaOffsetMonitor</h4><blockquote>\n<p>是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全<br>可以对consumer消费情况进行监控，并能列出每个consumer的offset数据<br>可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）<br>可以查看每个consumser group列表信息<br>可以查看topic的历史消费信息<br><a href=\"https://github.com/quantifind/KafkaOffsetMonitor\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-web-console\"><a href=\"#kafka-web-console\" class=\"headerlink\" title=\"kafka-web-console\"></a>kafka-web-console</h4><blockquote>\n<p>也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。<br>可以查看brokers kafka集群信息<br>可以查看每个topic的Partition，logsize，分区leader等信息<br>可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息<br>可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表<br>控制台还提供了RAML中描述的JSON API<br><a href=\"https://github.com/claudemamo/kafka-web-console\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-manger\"><a href=\"#kafka-manger\" class=\"headerlink\" title=\"kafka-manger\"></a>kafka-manger</h4><blockquote>\n<p>是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况<br>可以选择你要运行的副本<br>可以基于当前分区状况重新分配生成分区<br>可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)<br>可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除<br>可以为已存在的topic增加分区，更新配置<br>可以支持多个topic批量重分区，选择partition broker位置等<br>可以启用JMX轮询代理，以及broker、metrics主题等级<br>可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者<br><a href=\"https://github.com/yahoo/kafka-manager\">源码地址</a></p>\n</blockquote>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h2><p><strong>欢迎大家共同讨论、分享</strong></p>\n","site":{"data":{}},"length":10454,"excerpt":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.</p>\n</blockquote>","more":"<h2 id=\"Kafka-metrics\"><a href=\"#Kafka-metrics\" class=\"headerlink\" title=\"Kafka metrics\"></a>Kafka metrics</h2><p>Kafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。<br>Yammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。<br>Yammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。<br>因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。</p>\n<h3 id=\"metrics收集\"><a href=\"#metrics收集\" class=\"headerlink\" title=\"metrics收集\"></a>metrics收集</h3><h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final MetricRegistry metrics &#x3D; new MetricRegistry();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Gauges\"><a href=\"#Gauges\" class=\"headerlink\" title=\"Gauges\"></a>Gauges</h4><p>gauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueueManager &#123;</span><br><span class=\"line\">    private final Queue queue;</span><br><span class=\"line\">    public QueueManager(MetricRegistry metrics, String name) &#123;</span><br><span class=\"line\">        this.queue &#x3D; new Queue();</span><br><span class=\"line\">        &#x2F;&#x2F; name(QueueManager.class, name, &quot;size&quot;) 中间按.分隔</span><br><span class=\"line\">        metrics.register(MetricRegistry.name(QueueManager.class, name, &quot;size&quot;),</span><br><span class=\"line\">                         new Gauge&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                             @Override</span><br><span class=\"line\">                             public Integer getValue() &#123;</span><br><span class=\"line\">                                 return queue.size();</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h4><p>counter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Counter pendingJobs &#x3D; metrics.counter(name(QueueManager.class, &quot;pending-jobs&quot;));</span><br><span class=\"line\">public void addJob(Job job) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 自增</span><br><span class=\"line\">    pendingJobs.inc();</span><br><span class=\"line\">    queue.offer(job);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Job takeJob() &#123;</span><br><span class=\"line\">    pendingJobs.dec();</span><br><span class=\"line\">    return queue.take();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MetricRegistry.name(QueueManager.class, &quot;jobs&quot;, &quot;size&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Histograms\"><a href=\"#Histograms\" class=\"headerlink\" title=\"Histograms\"></a>Histograms</h4><p>histogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Histogram responseSizes &#x3D; metrics.histogram(name(RequestHandler.class, &quot;response-sizes&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 增加上报的值</span><br><span class=\"line\">    responseSizes.update(response.getContent().length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h4><p>Timer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Timer responses &#x3D; metrics.timer(name(RequestHandler.class, &quot;responses&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public String handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    final Timer.Context context &#x3D; responses.time();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 具体执行逻辑</span><br><span class=\"line\">        return &quot;OK&quot;;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Health-Checks\"><a href=\"#Health-Checks\" class=\"headerlink\" title=\"Health Checks\"></a>Health Checks</h4><p>主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final HealthCheckRegistry healthChecks &#x3D; new HealthCheckRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">public class DatabaseHealthCheck extends HealthCheck &#123;</span><br><span class=\"line\">    private final Database database;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DatabaseHealthCheck(Database database) &#123;</span><br><span class=\"line\">        this.database &#x3D; database;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public HealthCheck.Result check() throws Exception &#123;</span><br><span class=\"line\">        if (database.isConnected()) &#123;</span><br><span class=\"line\">            return HealthCheck.Result.healthy();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return HealthCheck.Result.unhealthy(&quot;Cannot connect to &quot; + database.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">healthChecks.register(&quot;postgres&quot;, new DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Metrics-Annotation\"><a href=\"#Metrics-Annotation\" class=\"headerlink\" title=\"Metrics Annotation\"></a>Metrics Annotation</h4><p>注解方式，简单的实现统计某个方法、某个值的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">* 统计调用的次数和时间</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@Timed</span><br><span class=\"line\">public void call() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\">* 统计登陆的次数</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@Counted</span><br><span class=\"line\">public void userLogin()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;other</span><br><span class=\"line\">@CachedGauge @Gauge @ExceptionMetered @Metered @Metric</span><br><span class=\"line\">&#96;&#96;&#96; </span><br><span class=\"line\"></span><br><span class=\"line\">### metrics上报</span><br><span class=\"line\">#### ConsoleReporter</span><br><span class=\"line\">对于简单指标的计算，可以使用定期向控制台报告：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)<br>                                    .convertRatesTo(TimeUnit.SECONDS)<br>                                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();<br>metrics.register(“jvm.mem”, new MemoryUsageGaugeSet());<br>metrics.register(“jvm.gc”, new GarbageCollectorMetricSet());</p>\n<p>reporter.start(5, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### JmxReporter</span><br><span class=\"line\">使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final JmxReporter reporter = JmxReporter.forRegistry(registry).build();<br>reporter.start();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### CsvReporter</span><br><span class=\"line\">对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final CsvReporter reporter = CsvReporter.forRegistry(registry)<br>                                        .formatFor(Locale.US)<br>                                        .convertRatesTo(TimeUnit.SECONDS)<br>                                        .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                        .build(new File(“~/projects/data/“));<br>reporter.start(1, TimeUnit.SECONDS);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### Slf4jReporter</span><br><span class=\"line\">可以将上报数据记录slf4j日志：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)<br>                                            .outputTo(LoggerFactory.getLogger(“com.example.metrics”))<br>                                            .convertRatesTo(TimeUnit.SECONDS)<br>                                            .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                            .build();<br>reporter.start(1, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### HTTP Reporter</span><br><span class=\"line\">需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>public class MyMetricsServletListener extends MetricsServlet.ContextListener {</p>\n<pre><code>public static final MetricRegistry metrics = new MetricRegistry();\n\n@Override\nprotected MetricRegistry getMetricRegistry() &#123;\n\n    metrics.register(&quot;jvm.mem&quot;, new MemoryUsageGaugeSet());\n    metrics.register(&quot;jvm.gc&quot;, new GarbageCollectorMetricSet());\n    System.out.println(&quot;&gt;&gt;.Listener success...&quot;);\n    return metrics;\n&#125;</code></pre>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>public class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {</p>\n<pre><code>public static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n@Override\nprotected HealthCheckRegistry getHealthCheckRegistry() &#123;\n\n    healthCheck.register(&quot;postgres&quot;, new TFHealthCheck(false));\n    return healthCheck;\n&#125;</code></pre>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyMetricsServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n\n&lt;servlet&gt;\n    &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;com.codahale.metrics.servlets.AdminServlet&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n   &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n   &lt;url-pattern&gt;/metrics/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[源码地址](https:&#x2F;&#x2F;github.com&#x2F;dropwizard&#x2F;metrics)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Kafka性能指标</span><br><span class=\"line\">#### kafka.server</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;MessagesInPerSec: 每秒消息量</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;BytesInPerSec: 每秒输入字节数</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;BytesOutPerSec: 每秒输出字节数</span><br><span class=\"line\">ReplicaManager,name&#x3D;UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|&lt;|all replicas|</span><br><span class=\"line\">ReplicaManager,name&#x3D;PartitionCount: 分区数</span><br><span class=\"line\">ReplicaManager,name&#x3D;LeaderCount: Leader副本数</span><br><span class=\"line\">ReplicaManager,name&#x3D;IsrShrinksPerSec: ISR回退</span><br><span class=\"line\">ReplicaManager,name&#x3D;IsrExpandsPerSec: ISR超前 value is 0</span><br><span class=\"line\">ReplicaFetcherManager,name&#x3D;MaxLag,clientId&#x3D;Replica: 滞后follower和leader的最大消息长度</span><br><span class=\"line\">FetcherLagMetrics,name&#x3D;ConsumerLag,clientId&#x3D;([-.\\w]+),topic&#x3D;([-.\\w]+),partition&#x3D;([0-9]+): 滞后follower的消息长度</span><br><span class=\"line\">DelayedOperationPurgatory,name&#x3D;PurgatorySize,delayedOperation&#x3D;Produce: producer等待请求大小</span><br><span class=\"line\">DelayedOperationPurgatory,name&#x3D;PurgatorySize,delayedOperation&#x3D;Fetch: 获取等待请求大小</span><br><span class=\"line\">KafkaRequestHandlerPool,name&#x3D;RequestHandlerAvgIdlePercent: 平均处理线程空闲时间</span><br><span class=\"line\"></span><br><span class=\"line\">#### kafka.network</span><br><span class=\"line\">kafka.network:type&#x3D;RequestMetrics,name&#x3D;$1,request&#x3D;&#123;Produce|FetchConsumer|FetchFollower&#125;</span><br><span class=\"line\">RequestsPerSec: 每秒请求量</span><br><span class=\"line\">TotalTimeMs: 请求总时间</span><br><span class=\"line\">RequestQueueTimeMs: 请求队列等待时间</span><br><span class=\"line\">LocalTimeMs: 请求leader处理时间</span><br><span class=\"line\">RemoteTimeMs: 请求follower等待时间</span><br><span class=\"line\">ResponseQueueTimeMs: 请求队列等待响应时间</span><br><span class=\"line\">ResponseSendTimeMs: 请求响应发送时间</span><br><span class=\"line\">kafka.network:type&#x3D;SocketServer,name&#x3D;NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间</span><br><span class=\"line\">    </span><br><span class=\"line\">#### kafka.controller</span><br><span class=\"line\">KafkaController,name&#x3D;ActiveControllerCount: 活跃broker数量</span><br><span class=\"line\">ControllerStats,name&#x3D;LeaderElectionRateAndTimeMs: leader选举率</span><br><span class=\"line\">ControllerStats,name&#x3D;UncleanLeaderElectionsPerSec: Unclean leader选举率</span><br><span class=\"line\"></span><br><span class=\"line\">#### common</span><br><span class=\"line\">connection-close-rate: 每秒连接关闭率</span><br><span class=\"line\">connection-creation-rate: 每秒新建连接率</span><br><span class=\"line\">network-io-rate: 平均每秒IO次数（读取或写入）</span><br><span class=\"line\">outgoing-byte-rat: 平均每秒向服务器发送的字节数</span><br><span class=\"line\">request-rate: 平均每秒发送的请求数</span><br><span class=\"line\">incoming-byte-rate: 每秒读取字节数</span><br><span class=\"line\">response-rate: 每秒收到的回复</span><br><span class=\"line\">select-rate: IO切换次数</span><br><span class=\"line\">io-wait-ratio: IO线程等待时间</span><br><span class=\"line\">connection-count: 当前活跃连接数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### broker</span><br><span class=\"line\">outgoing-byte-rate: 平均每秒发送字节数</span><br><span class=\"line\">request-rate: 平均每秒请求数</span><br><span class=\"line\">request-size-avg: 所有请求的平均大小</span><br><span class=\"line\">request-latency-avg: 平均请求时间(ms)</span><br><span class=\"line\">response-rate: 每秒收到的响应数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### producer</span><br><span class=\"line\">waiting-threads: 缓存区排队的用户阻塞线程数</span><br><span class=\"line\">buffer-available-bytes: 可用内存字节数</span><br><span class=\"line\">batch-size-avg: 每个分区每次请求发送的平均字节数</span><br><span class=\"line\">compression-rate-avg: 批量记录平均压缩率</span><br><span class=\"line\">record-queue-time-avg: 批量记录耗费的平均时间（ms）</span><br><span class=\"line\">request-latency-avg: 平均请求时间（ms）</span><br><span class=\"line\">record-send-rate: 每秒发送的平均次数</span><br><span class=\"line\">record-retry-rate: 每秒重试发送次数</span><br><span class=\"line\">record-error-rate: 每秒错误数量次数</span><br><span class=\"line\">requests-in-flight: 目前等待响应的请求数量</span><br><span class=\"line\">metadata-age: 当前生产者数据使用周期（s）</span><br><span class=\"line\">    </span><br><span class=\"line\">#### consumer</span><br><span class=\"line\">##### Consumer Group</span><br><span class=\"line\">commit-latency-avg: 提交请求所用的平均时间</span><br><span class=\"line\">commit-rate: 每秒提交调用次数</span><br><span class=\"line\">assigned-partitions: 当前分配给该消费者的分区数（可选）</span><br><span class=\"line\">heartbeat-rate: 平均每秒心跳数</span><br><span class=\"line\">join-time-avg: 群组重新加入的平均时间</span><br><span class=\"line\">join-rate: 每秒连接组的数量</span><br><span class=\"line\">sync-time-avg: 群组同步所需的平均时间</span><br><span class=\"line\">sync-rate: 每秒同步的组数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### consumer fetch</span><br><span class=\"line\">fetch-size-avg: 每次请求获取的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: 每秒消耗的平均字节数</span><br><span class=\"line\">fetch-latency-avg: 请求所用的平均时间</span><br><span class=\"line\">fetch-rate: 每秒提取请求数</span><br><span class=\"line\">records-lag-max: 分区中记录的最大滞后数量</span><br><span class=\"line\">    </span><br><span class=\"line\">##### topic-level fetch</span><br><span class=\"line\">fetch-size-avg: topic请求的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: topic每秒平均消耗的字节数</span><br><span class=\"line\"></span><br><span class=\"line\">#### streams</span><br><span class=\"line\">##### Thread</span><br><span class=\"line\">[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">[commit|poll|process|punctuate]-rate: 平均每秒请求数</span><br><span class=\"line\">task-created-rate: 每秒新建任务数</span><br><span class=\"line\">task-closed-rate: 每秒关闭任务数</span><br><span class=\"line\">skipped-records-rate: 每秒跳过记录数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### Task</span><br><span class=\"line\">commit-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">commit-rate: 每秒提交的平均次数</span><br><span class=\"line\"></span><br><span class=\"line\">##### Processor Node</span><br><span class=\"line\">forward-rate: 每秒从源节点向下游转发的平均速率</span><br><span class=\"line\"></span><br><span class=\"line\">##### State Store </span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）</span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度</span><br><span class=\"line\"></span><br><span class=\"line\">#### others</span><br><span class=\"line\">GC、CPU、IO等</span><br><span class=\"line\"></span><br><span class=\"line\">### Monitoring实现</span><br><span class=\"line\">#### 方式一：</span><br><span class=\"line\">1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出</span><br><span class=\"line\">2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列</span><br><span class=\"line\">3.storm消费数据进行分析计算</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>需多依赖<br><dependency><br>    <groupId>io.dropwizard.metrics</groupId><br>    <artifactId>metrics-servlets</artifactId><br>    <version>3.1.0</version><br></dependency></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 方式二：</span><br><span class=\"line\">1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果</span><br><span class=\"line\">2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka</span><br><span class=\"line\">3.storm消费对应kafka数据，再进行分析计算</span><br><span class=\"line\"></span><br><span class=\"line\">Pom依赖：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n            </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n            <exclusion>\n                <groupId>com.sun.jdmk</groupId>\n                <artifactId>jmxtools</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>javax.jms</groupId>\n                <artifactId>jms</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n    <dependency>\n           <groupId>io.dropwizard.metrics</groupId>\n           <artifactId>metrics-core</artifactId>\n           <version>3.1.0</version>\n    </dependency>\n```\n\n<h3 id=\"Kafka监控工具\"><a href=\"#Kafka监控工具\" class=\"headerlink\" title=\"Kafka监控工具\"></a>Kafka监控工具</h3><h4 id=\"KafkaOffsetMonitor\"><a href=\"#KafkaOffsetMonitor\" class=\"headerlink\" title=\"KafkaOffsetMonitor\"></a>KafkaOffsetMonitor</h4><blockquote>\n<p>是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全<br>可以对consumer消费情况进行监控，并能列出每个consumer的offset数据<br>可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）<br>可以查看每个consumser group列表信息<br>可以查看topic的历史消费信息<br><a href=\"https://github.com/quantifind/KafkaOffsetMonitor\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-web-console\"><a href=\"#kafka-web-console\" class=\"headerlink\" title=\"kafka-web-console\"></a>kafka-web-console</h4><blockquote>\n<p>也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。<br>可以查看brokers kafka集群信息<br>可以查看每个topic的Partition，logsize，分区leader等信息<br>可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息<br>可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表<br>控制台还提供了RAML中描述的JSON API<br><a href=\"https://github.com/claudemamo/kafka-web-console\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-manger\"><a href=\"#kafka-manger\" class=\"headerlink\" title=\"kafka-manger\"></a>kafka-manger</h4><blockquote>\n<p>是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况<br>可以选择你要运行的副本<br>可以基于当前分区状况重新分配生成分区<br>可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)<br>可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除<br>可以为已存在的topic增加分区，更新配置<br>可以支持多个topic批量重分区，选择partition broker位置等<br>可以启用JMX轮询代理，以及broker、metrics主题等级<br>可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者<br><a href=\"https://github.com/yahoo/kafka-manager\">源码地址</a></p>\n</blockquote>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h2><p><strong>欢迎大家共同讨论、分享</strong></p>"},{"title":"test","_content":"","source":"_drafts/test.md","raw":"---\ntitle: test\ntags:\n---\n","slug":"test","published":0,"date":"2021-01-13T03:10:12.295Z","updated":"2021-01-13T03:10:12.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjv73qor0003bgs6fs576hza","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"ckjv73qom0001bgs688fvgi23","category_id":"ckjv73qos0004bgs63rz0dt3z","_id":"ckjv73qox000cbgs61leydoww"}],"PostTag":[{"post_id":"ckjv73qom0001bgs688fvgi23","tag_id":"ckjv73qot0005bgs622r8a8wv","_id":"ckjv73qoy000ebgs6e6bxg8er"},{"post_id":"ckjv73qom0001bgs688fvgi23","tag_id":"ckjv73qow0009bgs6689l9uf2","_id":"ckjv73qoy000gbgs68rzs5nyp"}],"Tag":[{"name":"大数据","_id":"ckjv73qot0005bgs622r8a8wv"},{"name":"kafka","_id":"ckjv73qow0009bgs6689l9uf2"}]}}