{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"80c5c6ee4005bcd0b890ac195e7d99bb374782c1","modified":1499618163000},{"_id":"source/CNAME","hash":"c2b485dad4a4fd9b237372c1c3140bf39dae5439","modified":1499618163000},{"_id":"source/README.md","hash":"17e22ff1f8de976ffa5d1f07c74802976efd3a4d","modified":1499618163000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1499619868000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1499619868000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1499619868000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1499619868000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1499619868000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1499619868000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1499619868000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1499619868000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1499619868000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1499619868000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1499619868000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1499619868000},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1499619868000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1499619868000},{"_id":"themes/next/package.json","hash":"6b5bfec48776ddf9c03811b1ff2cb2b615eccc88","modified":1499619868000},{"_id":"themes/next/_config.yml","hash":"16947ae7a07e0088b0592e796c0966314f08627d","modified":1499740624000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"8126318e685a85b74a61ccb66a72314a34a63165","modified":1551713429819},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1499619868000},{"_id":"source/_posts/kafka_metrics.md","hash":"8aef1a6f5a4db3a274a15c7e42e17f8854ed44c8","modified":1499618163000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1499619851000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"ad6a9769710366373d17c9b593aeaac7a9322e76","modified":1551713429867},{"_id":"themes/next/.git/config","hash":"04212f2dba15155d2b714478cbfacb98f978b380","modified":1551713493300},{"_id":"themes/next/.git/index","hash":"d3ba87377398affa29d41c955fd7f9a9eea72890","modified":1551713165785},{"_id":"themes/next/.git/packed-refs","hash":"8bbcfc47df12c856683ada107e7b58ccaaf9c31e","modified":1499619868000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1499619868000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1499619868000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1499619868000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1499619868000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1499619868000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1499619868000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1499619868000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1499619868000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1499619868000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1499619868000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1499619868000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1499619868000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1499619868000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1499619868000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1499619868000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1499619868000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1499619868000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1499619868000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1499619868000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1499619868000},{"_id":"themes/next/layout/_layout.swig","hash":"61369aaaf8a3a076ddce58d49aa6954edcb238a4","modified":1499740624000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1499619868000},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1499619868000},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1499619868000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1499619868000},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1499619868000},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1499619868000},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1499619868000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499619868000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1499619851000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1499619851000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1499619851000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1499619851000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1499619851000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1499619851000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1499619851000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1499619851000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1499619851000},{"_id":"themes/next/.git/logs/HEAD","hash":"0a716a14bff07e5014c79e376abe664190c0a138","modified":1499740624000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1499619851000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1499619868000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1499619868000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1499619868000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1499619868000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1499619868000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1499619868000},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1499619868000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1499619868000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1499619868000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1499619868000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1499619868000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1499619868000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1499619868000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1499619868000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1499619868000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1499619868000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499619868000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1499619868000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499619868000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1499619868000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1499619868000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1499619868000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1499619868000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1499619868000},{"_id":"themes/next/layout/_macro/post.swig","hash":"d6fe43765bc01017ca3f9a384eeddaf28b6382c8","modified":1499619868000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1499619868000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a2b213c1a7c37cd6e4749f2018371f4c1f4f0d23","modified":1499619868000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1499619868000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1499619868000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c695f713f2cf15ac24069d915b23ab2e074b753b","modified":1499740624000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1499619868000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1499619868000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1499619868000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1499619868000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1499619868000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1499619868000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1499619868000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1499619868000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1499619868000},{"_id":"themes/next/layout/_scripts/lean-analytics.swig","hash":"722786a8795a1d46a25b309d9d24b54cc23e4669","modified":1499740624000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1499619868000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1499619868000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1499619868000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1499619868000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1499619868000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1499619868000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1499619868000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499619868000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499619868000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499619868000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499619868000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499619868000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499619868000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499619868000},{"_id":"themes/next/.git/refs/heads/master","hash":"ad6a9769710366373d17c9b593aeaac7a9322e76","modified":1499740624000},{"_id":"themes/next/.git/refs/tags/v6.0.0","hash":"c0cd8129128a1715fe2b02c086f6c96186f5fadb","modified":1551713429811},{"_id":"themes/next/.git/refs/tags/v6.0.1","hash":"c2c77a6e76508eb177da9f2626170bec0486228a","modified":1551713429811},{"_id":"themes/next/.git/refs/tags/v6.0.2","hash":"790a4b7de8d41646b688608df0f77149d55c674b","modified":1551713429812},{"_id":"themes/next/.git/refs/tags/v6.0.3","hash":"10dcaaf555e041cbca9fdc4a9e6e1eca54ff6756","modified":1551713429812},{"_id":"themes/next/.git/refs/tags/v6.0.5","hash":"5cabae7037c56a42dc3ee8fc38d90faf7f3d9642","modified":1551713429813},{"_id":"themes/next/.git/refs/tags/v6.0.4","hash":"970d0b8d2ae0a09ecb78c5b3b195ed4f19e68d9c","modified":1551713429813},{"_id":"themes/next/.git/refs/tags/v6.0.6","hash":"b8d542012c19aa43e5fa988f88309f5986136b93","modified":1551713429814},{"_id":"themes/next/.git/refs/tags/v6.1.0","hash":"81c10f37e3a9a23c145030d84bf03adc71f603f1","modified":1551713429814},{"_id":"themes/next/.git/refs/tags/v6.4.0","hash":"48dd2138567e9dd832f6adcbdf2e1945f999a59a","modified":1551713429815},{"_id":"themes/next/.git/refs/tags/v6.3.0","hash":"35ef56b48346d32c3e02bdaa3f15f06ef9af7ce6","modified":1551713429815},{"_id":"themes/next/.git/refs/tags/v6.4.1","hash":"ac845fb35dc632c804d5d2eebcd731ad4d4ddfac","modified":1551713429816},{"_id":"themes/next/.git/refs/tags/v6.2.0","hash":"57d5b7117be39f63695e4953bac380a207633779","modified":1551713429815},{"_id":"themes/next/.git/refs/tags/v6.4.2","hash":"106bd960739a3bbb6142bd76625fcba8991d7abd","modified":1551713429816},{"_id":"themes/next/.git/refs/tags/v6.6.0","hash":"bb68ffcace9a18d21a32989db9648c77881796a4","modified":1551713429817},{"_id":"themes/next/.git/refs/tags/v6.5.0","hash":"b6c2091da7683b424070a8dd6d7e377dec7c8ea0","modified":1551713429817},{"_id":"themes/next/.git/refs/tags/v6.7.0","hash":"b857a6c4428702973dc7b67a5c2a1e248653b49c","modified":1551713429818},{"_id":"themes/next/.git/refs/tags/v7.0.0","hash":"2d4536d7701746b3624fa92eeddeb943c32094d8","modified":1551713429818},{"_id":"themes/next/.git/refs/tags/v7.0.1","hash":"9779f7a264bcd264d2e6edaa173ff6a5a22f996a","modified":1551713429818},{"_id":"themes/next/.git/objects/4f/01075eb3f96e501ec8b6cbd60c1d1bb4e6a11d","hash":"b18bab319f8f943f25709383f61f99085fe5a46c","modified":1499740624000},{"_id":"themes/next/.git/objects/5c/a6ada312bf33b5ec7bcbfe9527fb660319f9be","hash":"1b0a1f508bd67dcf10afe5cf3a6e73c9f3615105","modified":1499740624000},{"_id":"themes/next/.git/objects/66/f8b510c80fbee489603edef81c8c5d69a9301d","hash":"d4f60b945b296cf9d6b2b5b92d45aaba56e62b5d","modified":1499740624000},{"_id":"themes/next/.git/objects/11/76df7bdf65df57e877fb68947c3e2bd3100ad0","hash":"4fedd9cac049ac43f9bfd66e14d70d7e634255c5","modified":1499740624000},{"_id":"themes/next/.git/objects/1b/82f7eae9d5d342673e3e3e28089a09c190a831","hash":"9026579da659d9463a4ea2e4c8e8ee1cd7eeebc8","modified":1499740624000},{"_id":"themes/next/.git/objects/83/96ef966d18f572463b9ed9cabab4031f153b3f","hash":"88a135a68dbfe48d9be5b4a9a7ae522cdf92e56b","modified":1499740624000},{"_id":"themes/next/.git/objects/17/8ea097862def8a6c27312dfdbee84e93bfd348","hash":"23eb44d5b3e1d9efec2d4cf76e9f604c34e5e0e9","modified":1499740624000},{"_id":"themes/next/.git/objects/c2/9f2f826ec3e9d4fcf722873284d8b4e2d9083d","hash":"80292f4d984cb2c22a95d42e8653dbee3ff111af","modified":1499740624000},{"_id":"themes/next/.git/objects/dd/e65045d1d2b7d90b120780feeb183bf2d50891","hash":"b12198d9cd9a9df6bb5f7b2943ffa91d497ef4d7","modified":1499740624000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1499619868000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1499619868000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1499619868000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1499619868000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1499619868000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1499619868000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1499619868000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1499619868000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1499619868000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1499619868000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1499619868000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1499619868000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1499619868000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1499619868000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1499619868000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1499619868000},{"_id":"themes/next/source/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1499619868000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1499619868000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1499619868000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1499619868000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1499619868000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1499619868000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1499619868000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1499619868000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1499619868000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1499619868000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1499619868000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1499619868000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1499619868000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1499619868000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1499619868000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1499619868000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1499619868000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1499619868000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1499619868000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1499619868000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1499619868000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1499619868000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1499619868000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1499619868000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1499619868000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1499619868000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1499619868000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1499619868000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1499619868000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1499619868000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1499619868000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1499619868000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1499619868000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1499619868000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1499619868000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1499619868000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1499619868000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1499619868000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1499619868000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1499619868000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1499619868000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1499619868000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1499619868000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1499619868000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1499619868000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1499619868000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1499619868000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1499619868000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1499619868000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1499619868000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1499619868000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1499619868000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1499619868000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1499619868000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1499619868000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1499619868000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1499619868000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1499619868000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0a716a14bff07e5014c79e376abe664190c0a138","modified":1499740624000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1499619868000},{"_id":"themes/next/.git/refs/remotes/origin/i18n","hash":"5d399f0454211bda9897dd75bd44601fdf3fe623","modified":1551713429770},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"6a5f6a5fb013e840a23896f0de02401d05f6ced0","modified":1551713429766},{"_id":"themes/next/.git/refs/remotes/origin/v6.x","hash":"81f1073f2bd2f1e1b3e13e260043918e8c458cae","modified":1551713429771},{"_id":"themes/next/.git/objects/pack/pack-f6febfcb3b88f868b602f98467b061899931edd4.idx","hash":"b886fdb8ff8392e3d1738fd7a702198da1dad2c2","modified":1551713429703},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1499619868000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1499619868000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1499619868000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1499619868000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1499619868000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1499619868000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1499619868000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1499619868000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1499619868000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1499619868000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1499619868000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1499619868000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1499619868000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1499619868000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1499619868000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1499619868000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1499619868000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1499619868000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1499619868000},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"7d2e6460492c3cf98a113e758e8024e513c95ed5","modified":1551713429768},{"_id":"themes/next/.git/logs/refs/remotes/origin/i18n","hash":"dcd32f762a5b2156ad6f2c12d08ace889ae27191","modified":1551713429771},{"_id":"themes/next/.git/logs/refs/remotes/origin/v6.x","hash":"0eb74ef635f3d0702271dbacd0720ba8806ccd96","modified":1551713429771},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"c8fd5bb4c1db0298e1059bf8e8342aceececf35d","modified":1499619868000},{"_id":"themes/next/.git/objects/pack/pack-f64045147e3bfd4505e023d33d2648e5819bf771.idx","hash":"39a3fec020f312339884b876580dcaf419a4ab29","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1499619868000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1499619868000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1499619868000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1499619868000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1499619868000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1499619868000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1499619868000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1499619868000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1499619868000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1499619868000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1499619868000},{"_id":"themes/next/.git/objects/pack/pack-f6febfcb3b88f868b602f98467b061899931edd4.pack","hash":"417f2c27ce3d001f4df2d697c3fae3d8d4bd832c","modified":1551713429698},{"_id":"themes/next/.git/objects/pack/pack-f64045147e3bfd4505e023d33d2648e5819bf771.pack","hash":"4dd0213ffaa070d1281579d420ea3385e98366c1","modified":1499619868000}],"Category":[{"name":"kafka","_id":"cjwf2o15f0002h9s7iria22g3"}],"Data":[],"Page":[{"_content":"# woozhijun.github.io\n","source":"README.md","raw":"# woozhijun.github.io\n","date":"2017-07-09T16:36:03.000Z","updated":"2017-07-09T16:36:03.000Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cjwf2o0zu0000h9s78fotnru6","content":"<h1 id=\"woozhijun-github-io\"><a href=\"#woozhijun-github-io\" class=\"headerlink\" title=\"woozhijun.github.io\"></a>woozhijun.github.io</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"woozhijun-github-io\"><a href=\"#woozhijun-github-io\" class=\"headerlink\" title=\"woozhijun.github.io\"></a>woozhijun.github.io</h1>"}],"Post":[{"title":"洞悉 Kafka metrics","_content":"\n## 摘要\n> 本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.\n\n## Kafka metrics\nKafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。\nYammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。\nYammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。\n因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。\n\n### metrics收集\n#### 注册\n\n```\nfinal MetricRegistry metrics = new MetricRegistry();\n```\n\n#### Gauges\ngauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：\n\n```\npublic class QueueManager {\n    private final Queue queue;\n    public QueueManager(MetricRegistry metrics, String name) {\n        this.queue = new Queue();\n        // name(QueueManager.class, name, \"size\") 中间按.分隔\n        metrics.register(MetricRegistry.name(QueueManager.class, name, \"size\"),\n                         new Gauge<Integer>() {\n                             @Override\n                             public Integer getValue() {\n                                 return queue.size();\n                             }\n                         });\n    }\n}\n```\n\n#### Counters\ncounter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：\n\n```\nprivate final Counter pendingJobs = metrics.counter(name(QueueManager.class, \"pending-jobs\"));\npublic void addJob(Job job) {\n    // 自增\n    pendingJobs.inc();\n    queue.offer(job);\n}\npublic Job takeJob() {\n    pendingJobs.dec();\n    return queue.take();\n}\n\nMetricRegistry.name(QueueManager.class, \"jobs\", \"size\")\n```\n\n#### Histograms\nhistogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值\n\n```\nprivate final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, \"response-sizes\"));\n\npublic void handleRequest(Request request, Response response) {\n    // 增加上报的值\n    responseSizes.update(response.getContent().length);\n}\n```\n\n#### Timers\nTimer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：\n\n```\nprivate final Timer responses = metrics.timer(name(RequestHandler.class, \"responses\"));\n\npublic String handleRequest(Request request, Response response) {\n    final Timer.Context context = responses.time();\n    try {\n        // 具体执行逻辑\n        return \"OK\";\n    } finally {\n        context.stop();\n    }\n}\n```\n\n#### Health Checks\n主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：\n\n```\nfinal HealthCheckRegistry healthChecks = new HealthCheckRegistry();\n\npublic class DatabaseHealthCheck extends HealthCheck {\n    private final Database database;\n\n    public DatabaseHealthCheck(Database database) {\n        this.database = database;\n    }\n\n    @Override\n    public HealthCheck.Result check() throws Exception {\n        if (database.isConnected()) {\n            return HealthCheck.Result.healthy();\n        } else {\n            return HealthCheck.Result.unhealthy(\"Cannot connect to \" + database.getUrl());\n        }\n    }\n}\n\nhealthChecks.register(\"postgres\", new DatabaseHealthCheck(database));\n```\n\n#### Metrics Annotation\n注解方式，简单的实现统计某个方法、某个值的数据：\n\n```\n/**\n* 统计调用的次数和时间\n*/\n@Timed\npublic void call() {\n}\n    \n/**\n* 统计登陆的次数\n*/\n@Counted\npublic void userLogin(){\n}\n\n//other\n@CachedGauge @Gauge @ExceptionMetered @Metered @Metric\n``` \n\n### metrics上报\n#### ConsoleReporter\n对于简单指标的计算，可以使用定期向控制台报告：\n\n```\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)\n\t\t\t\t                    .convertRatesTo(TimeUnit.SECONDS)\n\t\t\t\t                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();\nmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\nmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n                                                \nreporter.start(5, TimeUnit.MINUTES);\n```\n\n#### JmxReporter\n使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：\n\n```\nfinal JmxReporter reporter = JmxReporter.forRegistry(registry).build();\nreporter.start();\n```\n\n#### CsvReporter\n对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：\n\n```\nfinal CsvReporter reporter = CsvReporter.forRegistry(registry)\n                                        .formatFor(Locale.US)\n                                        .convertRatesTo(TimeUnit.SECONDS)\n                                        .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                        .build(new File(\"~/projects/data/\"));\nreporter.start(1, TimeUnit.SECONDS);\n```\n\n#### Slf4jReporter\n可以将上报数据记录slf4j日志：\n\n```\nfinal Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)\n                                            .outputTo(LoggerFactory.getLogger(\"com.example.metrics\"))\n                                            .convertRatesTo(TimeUnit.SECONDS)\n                                            .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                            .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n\n#### HTTP Reporter\n需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：\n\n```\npublic class MyMetricsServletListener extends MetricsServlet.ContextListener {\n\t\n\tpublic static final MetricRegistry metrics = new MetricRegistry();\n\n\t@Override\n\tprotected MetricRegistry getMetricRegistry() {\n\t\t\n\t\tmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\n\t\tmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n\t\tSystem.out.println(\">>.Listener success...\");\n\t\treturn metrics;\n\t}\n}\n```\n\n```\npublic class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {\n\n\tpublic static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n\t@Override\n\tprotected HealthCheckRegistry getHealthCheckRegistry() {\n\t\t\n\t\thealthCheck.register(\"postgres\", new TFHealthCheck(false));\n\t\treturn healthCheck;\n\t}\n}\n```\n\n```\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyMetricsServletListener</listener-class>\n\t</listener>\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener</listener-class>\n\t</listener>\n\t\n\t<servlet>\n        <servlet-name>metrics</servlet-name>\n        <servlet-class>com.codahale.metrics.servlets.AdminServlet</servlet-class>\n\t</servlet>\n\t<servlet-mapping>\n\t   <servlet-name>metrics</servlet-name>\n\t   <url-pattern>/metrics/*</url-pattern>\n\t</servlet-mapping>\n```\n\n[源码地址](https://github.com/dropwizard/metrics)\n\n\n### Kafka性能指标\n#### kafka.server\nBrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量\nBrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数\nBrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数\nReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|<|all replicas|\nReplicaManager,name=PartitionCount: 分区数\nReplicaManager,name=LeaderCount: Leader副本数\nReplicaManager,name=IsrShrinksPerSec: ISR回退\nReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0\nReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度\nFetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小\nKafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间\n\n#### kafka.network\nkafka.network:type=RequestMetrics,name=$1,request={Produce|FetchConsumer|FetchFollower}\nRequestsPerSec: 每秒请求量\nTotalTimeMs: 请求总时间\nRequestQueueTimeMs: 请求队列等待时间\nLocalTimeMs: 请求leader处理时间\nRemoteTimeMs: 请求follower等待时间\nResponseQueueTimeMs: 请求队列等待响应时间\nResponseSendTimeMs: 请求响应发送时间\nkafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间\n    \n#### kafka.controller\nKafkaController,name=ActiveControllerCount: 活跃broker数量\nControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率\nControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率\n\n#### common\nconnection-close-rate: 每秒连接关闭率\nconnection-creation-rate: 每秒新建连接率\nnetwork-io-rate: 平均每秒IO次数（读取或写入）\noutgoing-byte-rat: 平均每秒向服务器发送的字节数\nrequest-rate: 平均每秒发送的请求数\nincoming-byte-rate: 每秒读取字节数\nresponse-rate: 每秒收到的回复\nselect-rate: IO切换次数\nio-wait-ratio: IO线程等待时间\nconnection-count: 当前活跃连接数\n    \n#### broker\noutgoing-byte-rate: 平均每秒发送字节数\nrequest-rate: 平均每秒请求数\nrequest-size-avg: 所有请求的平均大小\nrequest-latency-avg: 平均请求时间(ms)\nresponse-rate: 每秒收到的响应数\n    \n#### producer\nwaiting-threads: 缓存区排队的用户阻塞线程数\nbuffer-available-bytes: 可用内存字节数\nbatch-size-avg: 每个分区每次请求发送的平均字节数\ncompression-rate-avg: 批量记录平均压缩率\nrecord-queue-time-avg: 批量记录耗费的平均时间（ms）\nrequest-latency-avg: 平均请求时间（ms）\nrecord-send-rate: 每秒发送的平均次数\nrecord-retry-rate: 每秒重试发送次数\nrecord-error-rate: 每秒错误数量次数\nrequests-in-flight: 目前等待响应的请求数量\nmetadata-age: 当前生产者数据使用周期（s）\n    \n#### consumer\n##### Consumer Group\ncommit-latency-avg: 提交请求所用的平均时间\ncommit-rate: 每秒提交调用次数\nassigned-partitions: 当前分配给该消费者的分区数（可选）\nheartbeat-rate: 平均每秒心跳数\njoin-time-avg: 群组重新加入的平均时间\njoin-rate: 每秒连接组的数量\nsync-time-avg: 群组同步所需的平均时间\nsync-rate: 每秒同步的组数\n    \n##### consumer fetch\nfetch-size-avg: 每次请求获取的平均字节数\nbytes-consumed-rate: 每秒消耗的平均字节数\nfetch-latency-avg: 请求所用的平均时间\nfetch-rate: 每秒提取请求数\nrecords-lag-max: 分区中记录的最大滞后数量\n    \n##### topic-level fetch\nfetch-size-avg: topic请求的平均字节数\nbytes-consumed-rate: topic每秒平均消耗的字节数\n\n#### streams\n##### Thread\n[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）\n[commit|poll|process|punctuate]-rate: 平均每秒请求数\ntask-created-rate: 每秒新建任务数\ntask-closed-rate: 每秒关闭任务数\nskipped-records-rate: 每秒跳过记录数\n    \n##### Task\ncommit-latency-avg: 平均执行时间（ms）\ncommit-rate: 每秒提交的平均次数\n\n##### Processor Node\nforward-rate: 每秒从源节点向下游转发的平均速率\n\n##### State Store \n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）\n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度\n\n#### others\nGC、CPU、IO等\n\n### Monitoring实现\n#### 方式一：\n1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出\n2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列\n3.storm消费数据进行分析计算\n\n```\n需多依赖\n<dependency>\n    <groupId>io.dropwizard.metrics</groupId>\n    <artifactId>metrics-servlets</artifactId>\n    <version>3.1.0</version>\n</dependency>\n```\n\n#### 方式二：\n1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果\n2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka\n3.storm消费对应kafka数据，再进行分析计算\n\nPom依赖：\n\n```\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n\t\t\t</exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>com.sun.jdmk</groupId>\n\t\t\t\t<artifactId>jmxtools</artifactId>\n\t\t\t</exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>javax.jms</groupId>\n\t\t\t\t<artifactId>jms</artifactId>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t       <groupId>io.dropwizard.metrics</groupId>\n\t       <artifactId>metrics-core</artifactId>\n\t       <version>3.1.0</version>\n\t</dependency>\n```\n\n### Kafka监控工具\n#### KafkaOffsetMonitor\n> 是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全\n> 可以对consumer消费情况进行监控，并能列出每个consumer的offset数据\n> 可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）\n> 可以查看每个consumser group列表信息\n> 可以查看topic的历史消费信息\n> [源码地址](https://github.com/quantifind/KafkaOffsetMonitor)\n    \n#### kafka-web-console\n> 也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。\n> 可以查看brokers kafka集群信息\n> 可以查看每个topic的Partition，logsize，分区leader等信息\n> 可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息\n> 可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表\n> 控制台还提供了RAML中描述的JSON API\n> [源码地址](https://github.com/claudemamo/kafka-web-console)\n\n#### kafka-manger\n> 是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况\n> 可以选择你要运行的副本\n> 可以基于当前分区状况重新分配生成分区\n> 可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)\n> 可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除\n> 可以为已存在的topic增加分区，更新配置\n> 可以支持多个topic批量重分区，选择partition broker位置等\n> 可以启用JMX轮询代理，以及broker、metrics主题等级\n> 可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者\n> [源码地址](https://github.com/yahoo/kafka-manager)\n\n## QA\n**欢迎大家共同讨论、分享**\n\n\n\n","source":"_posts/kafka_metrics.md","raw":"---\ntitle: 洞悉 Kafka metrics\ntags: 大数据 kafka\ncategory: kafka\n---\n\n## 摘要\n> 本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.\n\n## Kafka metrics\nKafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。\nYammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。\nYammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。\n因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。\n\n### metrics收集\n#### 注册\n\n```\nfinal MetricRegistry metrics = new MetricRegistry();\n```\n\n#### Gauges\ngauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：\n\n```\npublic class QueueManager {\n    private final Queue queue;\n    public QueueManager(MetricRegistry metrics, String name) {\n        this.queue = new Queue();\n        // name(QueueManager.class, name, \"size\") 中间按.分隔\n        metrics.register(MetricRegistry.name(QueueManager.class, name, \"size\"),\n                         new Gauge<Integer>() {\n                             @Override\n                             public Integer getValue() {\n                                 return queue.size();\n                             }\n                         });\n    }\n}\n```\n\n#### Counters\ncounter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：\n\n```\nprivate final Counter pendingJobs = metrics.counter(name(QueueManager.class, \"pending-jobs\"));\npublic void addJob(Job job) {\n    // 自增\n    pendingJobs.inc();\n    queue.offer(job);\n}\npublic Job takeJob() {\n    pendingJobs.dec();\n    return queue.take();\n}\n\nMetricRegistry.name(QueueManager.class, \"jobs\", \"size\")\n```\n\n#### Histograms\nhistogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值\n\n```\nprivate final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, \"response-sizes\"));\n\npublic void handleRequest(Request request, Response response) {\n    // 增加上报的值\n    responseSizes.update(response.getContent().length);\n}\n```\n\n#### Timers\nTimer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：\n\n```\nprivate final Timer responses = metrics.timer(name(RequestHandler.class, \"responses\"));\n\npublic String handleRequest(Request request, Response response) {\n    final Timer.Context context = responses.time();\n    try {\n        // 具体执行逻辑\n        return \"OK\";\n    } finally {\n        context.stop();\n    }\n}\n```\n\n#### Health Checks\n主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：\n\n```\nfinal HealthCheckRegistry healthChecks = new HealthCheckRegistry();\n\npublic class DatabaseHealthCheck extends HealthCheck {\n    private final Database database;\n\n    public DatabaseHealthCheck(Database database) {\n        this.database = database;\n    }\n\n    @Override\n    public HealthCheck.Result check() throws Exception {\n        if (database.isConnected()) {\n            return HealthCheck.Result.healthy();\n        } else {\n            return HealthCheck.Result.unhealthy(\"Cannot connect to \" + database.getUrl());\n        }\n    }\n}\n\nhealthChecks.register(\"postgres\", new DatabaseHealthCheck(database));\n```\n\n#### Metrics Annotation\n注解方式，简单的实现统计某个方法、某个值的数据：\n\n```\n/**\n* 统计调用的次数和时间\n*/\n@Timed\npublic void call() {\n}\n    \n/**\n* 统计登陆的次数\n*/\n@Counted\npublic void userLogin(){\n}\n\n//other\n@CachedGauge @Gauge @ExceptionMetered @Metered @Metric\n``` \n\n### metrics上报\n#### ConsoleReporter\n对于简单指标的计算，可以使用定期向控制台报告：\n\n```\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)\n\t\t\t\t                    .convertRatesTo(TimeUnit.SECONDS)\n\t\t\t\t                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();\nmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\nmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n                                                \nreporter.start(5, TimeUnit.MINUTES);\n```\n\n#### JmxReporter\n使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：\n\n```\nfinal JmxReporter reporter = JmxReporter.forRegistry(registry).build();\nreporter.start();\n```\n\n#### CsvReporter\n对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：\n\n```\nfinal CsvReporter reporter = CsvReporter.forRegistry(registry)\n                                        .formatFor(Locale.US)\n                                        .convertRatesTo(TimeUnit.SECONDS)\n                                        .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                        .build(new File(\"~/projects/data/\"));\nreporter.start(1, TimeUnit.SECONDS);\n```\n\n#### Slf4jReporter\n可以将上报数据记录slf4j日志：\n\n```\nfinal Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)\n                                            .outputTo(LoggerFactory.getLogger(\"com.example.metrics\"))\n                                            .convertRatesTo(TimeUnit.SECONDS)\n                                            .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                            .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n\n#### HTTP Reporter\n需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：\n\n```\npublic class MyMetricsServletListener extends MetricsServlet.ContextListener {\n\t\n\tpublic static final MetricRegistry metrics = new MetricRegistry();\n\n\t@Override\n\tprotected MetricRegistry getMetricRegistry() {\n\t\t\n\t\tmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\n\t\tmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n\t\tSystem.out.println(\">>.Listener success...\");\n\t\treturn metrics;\n\t}\n}\n```\n\n```\npublic class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {\n\n\tpublic static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n\t@Override\n\tprotected HealthCheckRegistry getHealthCheckRegistry() {\n\t\t\n\t\thealthCheck.register(\"postgres\", new TFHealthCheck(false));\n\t\treturn healthCheck;\n\t}\n}\n```\n\n```\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyMetricsServletListener</listener-class>\n\t</listener>\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener</listener-class>\n\t</listener>\n\t\n\t<servlet>\n        <servlet-name>metrics</servlet-name>\n        <servlet-class>com.codahale.metrics.servlets.AdminServlet</servlet-class>\n\t</servlet>\n\t<servlet-mapping>\n\t   <servlet-name>metrics</servlet-name>\n\t   <url-pattern>/metrics/*</url-pattern>\n\t</servlet-mapping>\n```\n\n[源码地址](https://github.com/dropwizard/metrics)\n\n\n### Kafka性能指标\n#### kafka.server\nBrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量\nBrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数\nBrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数\nReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|<|all replicas|\nReplicaManager,name=PartitionCount: 分区数\nReplicaManager,name=LeaderCount: Leader副本数\nReplicaManager,name=IsrShrinksPerSec: ISR回退\nReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0\nReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度\nFetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小\nKafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间\n\n#### kafka.network\nkafka.network:type=RequestMetrics,name=$1,request={Produce|FetchConsumer|FetchFollower}\nRequestsPerSec: 每秒请求量\nTotalTimeMs: 请求总时间\nRequestQueueTimeMs: 请求队列等待时间\nLocalTimeMs: 请求leader处理时间\nRemoteTimeMs: 请求follower等待时间\nResponseQueueTimeMs: 请求队列等待响应时间\nResponseSendTimeMs: 请求响应发送时间\nkafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间\n    \n#### kafka.controller\nKafkaController,name=ActiveControllerCount: 活跃broker数量\nControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率\nControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率\n\n#### common\nconnection-close-rate: 每秒连接关闭率\nconnection-creation-rate: 每秒新建连接率\nnetwork-io-rate: 平均每秒IO次数（读取或写入）\noutgoing-byte-rat: 平均每秒向服务器发送的字节数\nrequest-rate: 平均每秒发送的请求数\nincoming-byte-rate: 每秒读取字节数\nresponse-rate: 每秒收到的回复\nselect-rate: IO切换次数\nio-wait-ratio: IO线程等待时间\nconnection-count: 当前活跃连接数\n    \n#### broker\noutgoing-byte-rate: 平均每秒发送字节数\nrequest-rate: 平均每秒请求数\nrequest-size-avg: 所有请求的平均大小\nrequest-latency-avg: 平均请求时间(ms)\nresponse-rate: 每秒收到的响应数\n    \n#### producer\nwaiting-threads: 缓存区排队的用户阻塞线程数\nbuffer-available-bytes: 可用内存字节数\nbatch-size-avg: 每个分区每次请求发送的平均字节数\ncompression-rate-avg: 批量记录平均压缩率\nrecord-queue-time-avg: 批量记录耗费的平均时间（ms）\nrequest-latency-avg: 平均请求时间（ms）\nrecord-send-rate: 每秒发送的平均次数\nrecord-retry-rate: 每秒重试发送次数\nrecord-error-rate: 每秒错误数量次数\nrequests-in-flight: 目前等待响应的请求数量\nmetadata-age: 当前生产者数据使用周期（s）\n    \n#### consumer\n##### Consumer Group\ncommit-latency-avg: 提交请求所用的平均时间\ncommit-rate: 每秒提交调用次数\nassigned-partitions: 当前分配给该消费者的分区数（可选）\nheartbeat-rate: 平均每秒心跳数\njoin-time-avg: 群组重新加入的平均时间\njoin-rate: 每秒连接组的数量\nsync-time-avg: 群组同步所需的平均时间\nsync-rate: 每秒同步的组数\n    \n##### consumer fetch\nfetch-size-avg: 每次请求获取的平均字节数\nbytes-consumed-rate: 每秒消耗的平均字节数\nfetch-latency-avg: 请求所用的平均时间\nfetch-rate: 每秒提取请求数\nrecords-lag-max: 分区中记录的最大滞后数量\n    \n##### topic-level fetch\nfetch-size-avg: topic请求的平均字节数\nbytes-consumed-rate: topic每秒平均消耗的字节数\n\n#### streams\n##### Thread\n[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）\n[commit|poll|process|punctuate]-rate: 平均每秒请求数\ntask-created-rate: 每秒新建任务数\ntask-closed-rate: 每秒关闭任务数\nskipped-records-rate: 每秒跳过记录数\n    \n##### Task\ncommit-latency-avg: 平均执行时间（ms）\ncommit-rate: 每秒提交的平均次数\n\n##### Processor Node\nforward-rate: 每秒从源节点向下游转发的平均速率\n\n##### State Store \n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）\n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度\n\n#### others\nGC、CPU、IO等\n\n### Monitoring实现\n#### 方式一：\n1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出\n2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列\n3.storm消费数据进行分析计算\n\n```\n需多依赖\n<dependency>\n    <groupId>io.dropwizard.metrics</groupId>\n    <artifactId>metrics-servlets</artifactId>\n    <version>3.1.0</version>\n</dependency>\n```\n\n#### 方式二：\n1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果\n2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka\n3.storm消费对应kafka数据，再进行分析计算\n\nPom依赖：\n\n```\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n\t\t\t</exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>com.sun.jdmk</groupId>\n\t\t\t\t<artifactId>jmxtools</artifactId>\n\t\t\t</exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>javax.jms</groupId>\n\t\t\t\t<artifactId>jms</artifactId>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t       <groupId>io.dropwizard.metrics</groupId>\n\t       <artifactId>metrics-core</artifactId>\n\t       <version>3.1.0</version>\n\t</dependency>\n```\n\n### Kafka监控工具\n#### KafkaOffsetMonitor\n> 是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全\n> 可以对consumer消费情况进行监控，并能列出每个consumer的offset数据\n> 可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）\n> 可以查看每个consumser group列表信息\n> 可以查看topic的历史消费信息\n> [源码地址](https://github.com/quantifind/KafkaOffsetMonitor)\n    \n#### kafka-web-console\n> 也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。\n> 可以查看brokers kafka集群信息\n> 可以查看每个topic的Partition，logsize，分区leader等信息\n> 可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息\n> 可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表\n> 控制台还提供了RAML中描述的JSON API\n> [源码地址](https://github.com/claudemamo/kafka-web-console)\n\n#### kafka-manger\n> 是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况\n> 可以选择你要运行的副本\n> 可以基于当前分区状况重新分配生成分区\n> 可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)\n> 可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除\n> 可以为已存在的topic增加分区，更新配置\n> 可以支持多个topic批量重分区，选择partition broker位置等\n> 可以启用JMX轮询代理，以及broker、metrics主题等级\n> 可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者\n> [源码地址](https://github.com/yahoo/kafka-manager)\n\n## QA\n**欢迎大家共同讨论、分享**\n\n\n\n","slug":"kafka_metrics","published":1,"date":"2017-07-09T16:36:03.000Z","updated":"2017-07-09T16:36:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwf2o1550001h9s74zuxai76","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.</p>\n</blockquote>\n<h2 id=\"Kafka-metrics\"><a href=\"#Kafka-metrics\" class=\"headerlink\" title=\"Kafka metrics\"></a>Kafka metrics</h2><p>Kafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。<br>Yammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。<br>Yammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。<br>因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。</p>\n<h3 id=\"metrics收集\"><a href=\"#metrics收集\" class=\"headerlink\" title=\"metrics收集\"></a>metrics收集</h3><h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final MetricRegistry metrics = new MetricRegistry();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Gauges\"><a href=\"#Gauges\" class=\"headerlink\" title=\"Gauges\"></a>Gauges</h4><p>gauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueueManager &#123;</span><br><span class=\"line\">    private final Queue queue;</span><br><span class=\"line\">    public QueueManager(MetricRegistry metrics, String name) &#123;</span><br><span class=\"line\">        this.queue = new Queue();</span><br><span class=\"line\">        // name(QueueManager.class, name, &quot;size&quot;) 中间按.分隔</span><br><span class=\"line\">        metrics.register(MetricRegistry.name(QueueManager.class, name, &quot;size&quot;),</span><br><span class=\"line\">                         new Gauge&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                             @Override</span><br><span class=\"line\">                             public Integer getValue() &#123;</span><br><span class=\"line\">                                 return queue.size();</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h4><p>counter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Counter pendingJobs = metrics.counter(name(QueueManager.class, &quot;pending-jobs&quot;));</span><br><span class=\"line\">public void addJob(Job job) &#123;</span><br><span class=\"line\">    // 自增</span><br><span class=\"line\">    pendingJobs.inc();</span><br><span class=\"line\">    queue.offer(job);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Job takeJob() &#123;</span><br><span class=\"line\">    pendingJobs.dec();</span><br><span class=\"line\">    return queue.take();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MetricRegistry.name(QueueManager.class, &quot;jobs&quot;, &quot;size&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Histograms\"><a href=\"#Histograms\" class=\"headerlink\" title=\"Histograms\"></a>Histograms</h4><p>histogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, &quot;response-sizes&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    // 增加上报的值</span><br><span class=\"line\">    responseSizes.update(response.getContent().length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h4><p>Timer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Timer responses = metrics.timer(name(RequestHandler.class, &quot;responses&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public String handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    final Timer.Context context = responses.time();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        // 具体执行逻辑</span><br><span class=\"line\">        return &quot;OK&quot;;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Health-Checks\"><a href=\"#Health-Checks\" class=\"headerlink\" title=\"Health Checks\"></a>Health Checks</h4><p>主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final HealthCheckRegistry healthChecks = new HealthCheckRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">public class DatabaseHealthCheck extends HealthCheck &#123;</span><br><span class=\"line\">    private final Database database;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DatabaseHealthCheck(Database database) &#123;</span><br><span class=\"line\">        this.database = database;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public HealthCheck.Result check() throws Exception &#123;</span><br><span class=\"line\">        if (database.isConnected()) &#123;</span><br><span class=\"line\">            return HealthCheck.Result.healthy();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return HealthCheck.Result.unhealthy(&quot;Cannot connect to &quot; + database.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">healthChecks.register(&quot;postgres&quot;, new DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure>\n<h4 id=\"Metrics-Annotation\"><a href=\"#Metrics-Annotation\" class=\"headerlink\" title=\"Metrics Annotation\"></a>Metrics Annotation</h4><p>注解方式，简单的实现统计某个方法、某个值的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* 统计调用的次数和时间</span><br><span class=\"line\">*/</span><br><span class=\"line\">@Timed</span><br><span class=\"line\">public void call() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">/**</span><br><span class=\"line\">* 统计登陆的次数</span><br><span class=\"line\">*/</span><br><span class=\"line\">@Counted</span><br><span class=\"line\">public void userLogin()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//other</span><br><span class=\"line\">@CachedGauge @Gauge @ExceptionMetered @Metered @Metric</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">### metrics上报</span><br><span class=\"line\">#### ConsoleReporter</span><br><span class=\"line\">对于简单指标的计算，可以使用定期向控制台报告：</span><br></pre></td></tr></table></figure>\n<p>final ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)<br>                                    .convertRatesTo(TimeUnit.SECONDS)<br>                                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();<br>metrics.register(“jvm.mem”, new MemoryUsageGaugeSet());<br>metrics.register(“jvm.gc”, new GarbageCollectorMetricSet());</p>\n<p>reporter.start(5, TimeUnit.MINUTES);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### JmxReporter</span><br><span class=\"line\">使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：</span><br></pre></td></tr></table></figure></p>\n<p>final JmxReporter reporter = JmxReporter.forRegistry(registry).build();<br>reporter.start();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### CsvReporter</span><br><span class=\"line\">对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：</span><br></pre></td></tr></table></figure></p>\n<p>final CsvReporter reporter = CsvReporter.forRegistry(registry)<br>                                        .formatFor(Locale.US)<br>                                        .convertRatesTo(TimeUnit.SECONDS)<br>                                        .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                        .build(new File(“~/projects/data/“));<br>reporter.start(1, TimeUnit.SECONDS);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### Slf4jReporter</span><br><span class=\"line\">可以将上报数据记录slf4j日志：</span><br></pre></td></tr></table></figure></p>\n<p>final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)<br>                                            .outputTo(LoggerFactory.getLogger(“com.example.metrics”))<br>                                            .convertRatesTo(TimeUnit.SECONDS)<br>                                            .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                            .build();<br>reporter.start(1, TimeUnit.MINUTES);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### HTTP Reporter</span><br><span class=\"line\">需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：</span><br></pre></td></tr></table></figure></p>\n<p>public class MyMetricsServletListener extends MetricsServlet.ContextListener {</p>\n<pre><code>public static final MetricRegistry metrics = new MetricRegistry();\n\n@Override\nprotected MetricRegistry getMetricRegistry() {\n\n    metrics.register(&quot;jvm.mem&quot;, new MemoryUsageGaugeSet());\n    metrics.register(&quot;jvm.gc&quot;, new GarbageCollectorMetricSet());\n    System.out.println(&quot;&gt;&gt;.Listener success...&quot;);\n    return metrics;\n}\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>public class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {</p>\n<pre><code>public static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n@Override\nprotected HealthCheckRegistry getHealthCheckRegistry() {\n\n    healthCheck.register(&quot;postgres&quot;, new TFHealthCheck(false));\n    return healthCheck;\n}\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<pre><code>&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyMetricsServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n\n&lt;servlet&gt;\n    &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;com.codahale.metrics.servlets.AdminServlet&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n   &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n   &lt;url-pattern&gt;/metrics/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[源码地址](https://github.com/dropwizard/metrics)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Kafka性能指标</span><br><span class=\"line\">#### kafka.server</span><br><span class=\"line\">BrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量</span><br><span class=\"line\">BrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数</span><br><span class=\"line\">BrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数</span><br><span class=\"line\">ReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|&lt;|all replicas|</span><br><span class=\"line\">ReplicaManager,name=PartitionCount: 分区数</span><br><span class=\"line\">ReplicaManager,name=LeaderCount: Leader副本数</span><br><span class=\"line\">ReplicaManager,name=IsrShrinksPerSec: ISR回退</span><br><span class=\"line\">ReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0</span><br><span class=\"line\">ReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度</span><br><span class=\"line\">FetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度</span><br><span class=\"line\">DelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小</span><br><span class=\"line\">DelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小</span><br><span class=\"line\">KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间</span><br><span class=\"line\"></span><br><span class=\"line\">#### kafka.network</span><br><span class=\"line\">kafka.network:type=RequestMetrics,name=$1,request=&#123;Produce|FetchConsumer|FetchFollower&#125;</span><br><span class=\"line\">RequestsPerSec: 每秒请求量</span><br><span class=\"line\">TotalTimeMs: 请求总时间</span><br><span class=\"line\">RequestQueueTimeMs: 请求队列等待时间</span><br><span class=\"line\">LocalTimeMs: 请求leader处理时间</span><br><span class=\"line\">RemoteTimeMs: 请求follower等待时间</span><br><span class=\"line\">ResponseQueueTimeMs: 请求队列等待响应时间</span><br><span class=\"line\">ResponseSendTimeMs: 请求响应发送时间</span><br><span class=\"line\">kafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间</span><br><span class=\"line\">    </span><br><span class=\"line\">#### kafka.controller</span><br><span class=\"line\">KafkaController,name=ActiveControllerCount: 活跃broker数量</span><br><span class=\"line\">ControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率</span><br><span class=\"line\">ControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率</span><br><span class=\"line\"></span><br><span class=\"line\">#### common</span><br><span class=\"line\">connection-close-rate: 每秒连接关闭率</span><br><span class=\"line\">connection-creation-rate: 每秒新建连接率</span><br><span class=\"line\">network-io-rate: 平均每秒IO次数（读取或写入）</span><br><span class=\"line\">outgoing-byte-rat: 平均每秒向服务器发送的字节数</span><br><span class=\"line\">request-rate: 平均每秒发送的请求数</span><br><span class=\"line\">incoming-byte-rate: 每秒读取字节数</span><br><span class=\"line\">response-rate: 每秒收到的回复</span><br><span class=\"line\">select-rate: IO切换次数</span><br><span class=\"line\">io-wait-ratio: IO线程等待时间</span><br><span class=\"line\">connection-count: 当前活跃连接数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### broker</span><br><span class=\"line\">outgoing-byte-rate: 平均每秒发送字节数</span><br><span class=\"line\">request-rate: 平均每秒请求数</span><br><span class=\"line\">request-size-avg: 所有请求的平均大小</span><br><span class=\"line\">request-latency-avg: 平均请求时间(ms)</span><br><span class=\"line\">response-rate: 每秒收到的响应数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### producer</span><br><span class=\"line\">waiting-threads: 缓存区排队的用户阻塞线程数</span><br><span class=\"line\">buffer-available-bytes: 可用内存字节数</span><br><span class=\"line\">batch-size-avg: 每个分区每次请求发送的平均字节数</span><br><span class=\"line\">compression-rate-avg: 批量记录平均压缩率</span><br><span class=\"line\">record-queue-time-avg: 批量记录耗费的平均时间（ms）</span><br><span class=\"line\">request-latency-avg: 平均请求时间（ms）</span><br><span class=\"line\">record-send-rate: 每秒发送的平均次数</span><br><span class=\"line\">record-retry-rate: 每秒重试发送次数</span><br><span class=\"line\">record-error-rate: 每秒错误数量次数</span><br><span class=\"line\">requests-in-flight: 目前等待响应的请求数量</span><br><span class=\"line\">metadata-age: 当前生产者数据使用周期（s）</span><br><span class=\"line\">    </span><br><span class=\"line\">#### consumer</span><br><span class=\"line\">##### Consumer Group</span><br><span class=\"line\">commit-latency-avg: 提交请求所用的平均时间</span><br><span class=\"line\">commit-rate: 每秒提交调用次数</span><br><span class=\"line\">assigned-partitions: 当前分配给该消费者的分区数（可选）</span><br><span class=\"line\">heartbeat-rate: 平均每秒心跳数</span><br><span class=\"line\">join-time-avg: 群组重新加入的平均时间</span><br><span class=\"line\">join-rate: 每秒连接组的数量</span><br><span class=\"line\">sync-time-avg: 群组同步所需的平均时间</span><br><span class=\"line\">sync-rate: 每秒同步的组数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### consumer fetch</span><br><span class=\"line\">fetch-size-avg: 每次请求获取的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: 每秒消耗的平均字节数</span><br><span class=\"line\">fetch-latency-avg: 请求所用的平均时间</span><br><span class=\"line\">fetch-rate: 每秒提取请求数</span><br><span class=\"line\">records-lag-max: 分区中记录的最大滞后数量</span><br><span class=\"line\">    </span><br><span class=\"line\">##### topic-level fetch</span><br><span class=\"line\">fetch-size-avg: topic请求的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: topic每秒平均消耗的字节数</span><br><span class=\"line\"></span><br><span class=\"line\">#### streams</span><br><span class=\"line\">##### Thread</span><br><span class=\"line\">[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">[commit|poll|process|punctuate]-rate: 平均每秒请求数</span><br><span class=\"line\">task-created-rate: 每秒新建任务数</span><br><span class=\"line\">task-closed-rate: 每秒关闭任务数</span><br><span class=\"line\">skipped-records-rate: 每秒跳过记录数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### Task</span><br><span class=\"line\">commit-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">commit-rate: 每秒提交的平均次数</span><br><span class=\"line\"></span><br><span class=\"line\">##### Processor Node</span><br><span class=\"line\">forward-rate: 每秒从源节点向下游转发的平均速率</span><br><span class=\"line\"></span><br><span class=\"line\">##### State Store </span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）</span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度</span><br><span class=\"line\"></span><br><span class=\"line\">#### others</span><br><span class=\"line\">GC、CPU、IO等</span><br><span class=\"line\"></span><br><span class=\"line\">### Monitoring实现</span><br><span class=\"line\">#### 方式一：</span><br><span class=\"line\">1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出</span><br><span class=\"line\">2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列</span><br><span class=\"line\">3.storm消费数据进行分析计算</span><br></pre></td></tr></table></figure>\n<p>需多依赖</p>\n<p><dependency><br>    <groupid>io.dropwizard.metrics</groupid><br>    <artifactid>metrics-servlets</artifactid><br>    <version>3.1.0</version><br></dependency><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 方式二：</span><br><span class=\"line\">1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果</span><br><span class=\"line\">2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka</span><br><span class=\"line\">3.storm消费对应kafka数据，再进行分析计算</span><br><span class=\"line\"></span><br><span class=\"line\">Pom依赖：</span><br></pre></td></tr></table></figure></p>\n<p><dependency><br>    <groupid>org.apache.kafka</groupid><br>    <artifactid>kafka_2.11</artifactid><br>    <version>0.10.2.1</version><br>    <exclusions><br>        <exclusion><br>            <groupid>org.apache.zookeeper</groupid><br>            <artifactid>zookeeper</artifactid><br>            </exclusion><br>    </exclusions><br></dependency></p>\n<p><dependency><br>    <groupid>org.apache.zookeeper</groupid><br>    <artifactid>zookeeper</artifactid><br>    <version>3.4.10</version><br>    <exclusions><br>        <exclusion><br>            <groupid>com.sun.jmx</groupid><br>            <artifactid>jmxri</artifactid><br>        </exclusion><br>            <exclusion><br>                <groupid>com.sun.jdmk</groupid><br>                <artifactid>jmxtools</artifactid><br>            </exclusion><br>            <exclusion><br>                <groupid>javax.jms</groupid><br>                <artifactid>jms</artifactid><br>            </exclusion><br>        </exclusions><br>    </dependency><br>    <dependency><br>           <groupid>io.dropwizard.metrics</groupid><br>           <artifactid>metrics-core</artifactid><br>           <version>3.1.0</version><br>    </dependency><br>```</p>\n<h3 id=\"Kafka监控工具\"><a href=\"#Kafka监控工具\" class=\"headerlink\" title=\"Kafka监控工具\"></a>Kafka监控工具</h3><h4 id=\"KafkaOffsetMonitor\"><a href=\"#KafkaOffsetMonitor\" class=\"headerlink\" title=\"KafkaOffsetMonitor\"></a>KafkaOffsetMonitor</h4><blockquote>\n<p>是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全<br>可以对consumer消费情况进行监控，并能列出每个consumer的offset数据<br>可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）<br>可以查看每个consumser group列表信息<br>可以查看topic的历史消费信息<br><a href=\"https://github.com/quantifind/KafkaOffsetMonitor\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-web-console\"><a href=\"#kafka-web-console\" class=\"headerlink\" title=\"kafka-web-console\"></a>kafka-web-console</h4><blockquote>\n<p>也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。<br>可以查看brokers kafka集群信息<br>可以查看每个topic的Partition，logsize，分区leader等信息<br>可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息<br>可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表<br>控制台还提供了RAML中描述的JSON API<br><a href=\"https://github.com/claudemamo/kafka-web-console\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-manger\"><a href=\"#kafka-manger\" class=\"headerlink\" title=\"kafka-manger\"></a>kafka-manger</h4><blockquote>\n<p>是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况<br>可以选择你要运行的副本<br>可以基于当前分区状况重新分配生成分区<br>可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)<br>可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除<br>可以为已存在的topic增加分区，更新配置<br>可以支持多个topic批量重分区，选择partition broker位置等<br>可以启用JMX轮询代理，以及broker、metrics主题等级<br>可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者<br><a href=\"https://github.com/yahoo/kafka-manager\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h2><p><strong>欢迎大家共同讨论、分享</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.</p>\n</blockquote>\n<h2 id=\"Kafka-metrics\"><a href=\"#Kafka-metrics\" class=\"headerlink\" title=\"Kafka metrics\"></a>Kafka metrics</h2><p>Kafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。<br>Yammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。<br>Yammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。<br>因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。</p>\n<h3 id=\"metrics收集\"><a href=\"#metrics收集\" class=\"headerlink\" title=\"metrics收集\"></a>metrics收集</h3><h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final MetricRegistry metrics = new MetricRegistry();</span><br></pre></td></tr></table></figure>\n<h4 id=\"Gauges\"><a href=\"#Gauges\" class=\"headerlink\" title=\"Gauges\"></a>Gauges</h4><p>gauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueueManager &#123;</span><br><span class=\"line\">    private final Queue queue;</span><br><span class=\"line\">    public QueueManager(MetricRegistry metrics, String name) &#123;</span><br><span class=\"line\">        this.queue = new Queue();</span><br><span class=\"line\">        // name(QueueManager.class, name, &quot;size&quot;) 中间按.分隔</span><br><span class=\"line\">        metrics.register(MetricRegistry.name(QueueManager.class, name, &quot;size&quot;),</span><br><span class=\"line\">                         new Gauge&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                             @Override</span><br><span class=\"line\">                             public Integer getValue() &#123;</span><br><span class=\"line\">                                 return queue.size();</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h4><p>counter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Counter pendingJobs = metrics.counter(name(QueueManager.class, &quot;pending-jobs&quot;));</span><br><span class=\"line\">public void addJob(Job job) &#123;</span><br><span class=\"line\">    // 自增</span><br><span class=\"line\">    pendingJobs.inc();</span><br><span class=\"line\">    queue.offer(job);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Job takeJob() &#123;</span><br><span class=\"line\">    pendingJobs.dec();</span><br><span class=\"line\">    return queue.take();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MetricRegistry.name(QueueManager.class, &quot;jobs&quot;, &quot;size&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Histograms\"><a href=\"#Histograms\" class=\"headerlink\" title=\"Histograms\"></a>Histograms</h4><p>histogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, &quot;response-sizes&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    // 增加上报的值</span><br><span class=\"line\">    responseSizes.update(response.getContent().length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h4><p>Timer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Timer responses = metrics.timer(name(RequestHandler.class, &quot;responses&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public String handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    final Timer.Context context = responses.time();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        // 具体执行逻辑</span><br><span class=\"line\">        return &quot;OK&quot;;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Health-Checks\"><a href=\"#Health-Checks\" class=\"headerlink\" title=\"Health Checks\"></a>Health Checks</h4><p>主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final HealthCheckRegistry healthChecks = new HealthCheckRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">public class DatabaseHealthCheck extends HealthCheck &#123;</span><br><span class=\"line\">    private final Database database;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DatabaseHealthCheck(Database database) &#123;</span><br><span class=\"line\">        this.database = database;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public HealthCheck.Result check() throws Exception &#123;</span><br><span class=\"line\">        if (database.isConnected()) &#123;</span><br><span class=\"line\">            return HealthCheck.Result.healthy();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return HealthCheck.Result.unhealthy(&quot;Cannot connect to &quot; + database.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">healthChecks.register(&quot;postgres&quot;, new DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure>\n<h4 id=\"Metrics-Annotation\"><a href=\"#Metrics-Annotation\" class=\"headerlink\" title=\"Metrics Annotation\"></a>Metrics Annotation</h4><p>注解方式，简单的实现统计某个方法、某个值的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* 统计调用的次数和时间</span><br><span class=\"line\">*/</span><br><span class=\"line\">@Timed</span><br><span class=\"line\">public void call() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">/**</span><br><span class=\"line\">* 统计登陆的次数</span><br><span class=\"line\">*/</span><br><span class=\"line\">@Counted</span><br><span class=\"line\">public void userLogin()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//other</span><br><span class=\"line\">@CachedGauge @Gauge @ExceptionMetered @Metered @Metric</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">### metrics上报</span><br><span class=\"line\">#### ConsoleReporter</span><br><span class=\"line\">对于简单指标的计算，可以使用定期向控制台报告：</span><br></pre></td></tr></table></figure>\n<p>final ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)<br>                                    .convertRatesTo(TimeUnit.SECONDS)<br>                                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();<br>metrics.register(“jvm.mem”, new MemoryUsageGaugeSet());<br>metrics.register(“jvm.gc”, new GarbageCollectorMetricSet());</p>\n<p>reporter.start(5, TimeUnit.MINUTES);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### JmxReporter</span><br><span class=\"line\">使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：</span><br></pre></td></tr></table></figure></p>\n<p>final JmxReporter reporter = JmxReporter.forRegistry(registry).build();<br>reporter.start();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### CsvReporter</span><br><span class=\"line\">对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：</span><br></pre></td></tr></table></figure></p>\n<p>final CsvReporter reporter = CsvReporter.forRegistry(registry)<br>                                        .formatFor(Locale.US)<br>                                        .convertRatesTo(TimeUnit.SECONDS)<br>                                        .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                        .build(new File(“~/projects/data/“));<br>reporter.start(1, TimeUnit.SECONDS);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### Slf4jReporter</span><br><span class=\"line\">可以将上报数据记录slf4j日志：</span><br></pre></td></tr></table></figure></p>\n<p>final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)<br>                                            .outputTo(LoggerFactory.getLogger(“com.example.metrics”))<br>                                            .convertRatesTo(TimeUnit.SECONDS)<br>                                            .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                            .build();<br>reporter.start(1, TimeUnit.MINUTES);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### HTTP Reporter</span><br><span class=\"line\">需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：</span><br></pre></td></tr></table></figure></p>\n<p>public class MyMetricsServletListener extends MetricsServlet.ContextListener {</p>\n<pre><code>public static final MetricRegistry metrics = new MetricRegistry();\n\n@Override\nprotected MetricRegistry getMetricRegistry() {\n\n    metrics.register(&quot;jvm.mem&quot;, new MemoryUsageGaugeSet());\n    metrics.register(&quot;jvm.gc&quot;, new GarbageCollectorMetricSet());\n    System.out.println(&quot;&gt;&gt;.Listener success...&quot;);\n    return metrics;\n}\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>public class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {</p>\n<pre><code>public static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n@Override\nprotected HealthCheckRegistry getHealthCheckRegistry() {\n\n    healthCheck.register(&quot;postgres&quot;, new TFHealthCheck(false));\n    return healthCheck;\n}\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<pre><code>&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyMetricsServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n\n&lt;servlet&gt;\n    &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;com.codahale.metrics.servlets.AdminServlet&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n   &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n   &lt;url-pattern&gt;/metrics/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[源码地址](https://github.com/dropwizard/metrics)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Kafka性能指标</span><br><span class=\"line\">#### kafka.server</span><br><span class=\"line\">BrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量</span><br><span class=\"line\">BrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数</span><br><span class=\"line\">BrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数</span><br><span class=\"line\">ReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|&lt;|all replicas|</span><br><span class=\"line\">ReplicaManager,name=PartitionCount: 分区数</span><br><span class=\"line\">ReplicaManager,name=LeaderCount: Leader副本数</span><br><span class=\"line\">ReplicaManager,name=IsrShrinksPerSec: ISR回退</span><br><span class=\"line\">ReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0</span><br><span class=\"line\">ReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度</span><br><span class=\"line\">FetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度</span><br><span class=\"line\">DelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小</span><br><span class=\"line\">DelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小</span><br><span class=\"line\">KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间</span><br><span class=\"line\"></span><br><span class=\"line\">#### kafka.network</span><br><span class=\"line\">kafka.network:type=RequestMetrics,name=$1,request=&#123;Produce|FetchConsumer|FetchFollower&#125;</span><br><span class=\"line\">RequestsPerSec: 每秒请求量</span><br><span class=\"line\">TotalTimeMs: 请求总时间</span><br><span class=\"line\">RequestQueueTimeMs: 请求队列等待时间</span><br><span class=\"line\">LocalTimeMs: 请求leader处理时间</span><br><span class=\"line\">RemoteTimeMs: 请求follower等待时间</span><br><span class=\"line\">ResponseQueueTimeMs: 请求队列等待响应时间</span><br><span class=\"line\">ResponseSendTimeMs: 请求响应发送时间</span><br><span class=\"line\">kafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间</span><br><span class=\"line\">    </span><br><span class=\"line\">#### kafka.controller</span><br><span class=\"line\">KafkaController,name=ActiveControllerCount: 活跃broker数量</span><br><span class=\"line\">ControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率</span><br><span class=\"line\">ControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率</span><br><span class=\"line\"></span><br><span class=\"line\">#### common</span><br><span class=\"line\">connection-close-rate: 每秒连接关闭率</span><br><span class=\"line\">connection-creation-rate: 每秒新建连接率</span><br><span class=\"line\">network-io-rate: 平均每秒IO次数（读取或写入）</span><br><span class=\"line\">outgoing-byte-rat: 平均每秒向服务器发送的字节数</span><br><span class=\"line\">request-rate: 平均每秒发送的请求数</span><br><span class=\"line\">incoming-byte-rate: 每秒读取字节数</span><br><span class=\"line\">response-rate: 每秒收到的回复</span><br><span class=\"line\">select-rate: IO切换次数</span><br><span class=\"line\">io-wait-ratio: IO线程等待时间</span><br><span class=\"line\">connection-count: 当前活跃连接数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### broker</span><br><span class=\"line\">outgoing-byte-rate: 平均每秒发送字节数</span><br><span class=\"line\">request-rate: 平均每秒请求数</span><br><span class=\"line\">request-size-avg: 所有请求的平均大小</span><br><span class=\"line\">request-latency-avg: 平均请求时间(ms)</span><br><span class=\"line\">response-rate: 每秒收到的响应数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### producer</span><br><span class=\"line\">waiting-threads: 缓存区排队的用户阻塞线程数</span><br><span class=\"line\">buffer-available-bytes: 可用内存字节数</span><br><span class=\"line\">batch-size-avg: 每个分区每次请求发送的平均字节数</span><br><span class=\"line\">compression-rate-avg: 批量记录平均压缩率</span><br><span class=\"line\">record-queue-time-avg: 批量记录耗费的平均时间（ms）</span><br><span class=\"line\">request-latency-avg: 平均请求时间（ms）</span><br><span class=\"line\">record-send-rate: 每秒发送的平均次数</span><br><span class=\"line\">record-retry-rate: 每秒重试发送次数</span><br><span class=\"line\">record-error-rate: 每秒错误数量次数</span><br><span class=\"line\">requests-in-flight: 目前等待响应的请求数量</span><br><span class=\"line\">metadata-age: 当前生产者数据使用周期（s）</span><br><span class=\"line\">    </span><br><span class=\"line\">#### consumer</span><br><span class=\"line\">##### Consumer Group</span><br><span class=\"line\">commit-latency-avg: 提交请求所用的平均时间</span><br><span class=\"line\">commit-rate: 每秒提交调用次数</span><br><span class=\"line\">assigned-partitions: 当前分配给该消费者的分区数（可选）</span><br><span class=\"line\">heartbeat-rate: 平均每秒心跳数</span><br><span class=\"line\">join-time-avg: 群组重新加入的平均时间</span><br><span class=\"line\">join-rate: 每秒连接组的数量</span><br><span class=\"line\">sync-time-avg: 群组同步所需的平均时间</span><br><span class=\"line\">sync-rate: 每秒同步的组数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### consumer fetch</span><br><span class=\"line\">fetch-size-avg: 每次请求获取的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: 每秒消耗的平均字节数</span><br><span class=\"line\">fetch-latency-avg: 请求所用的平均时间</span><br><span class=\"line\">fetch-rate: 每秒提取请求数</span><br><span class=\"line\">records-lag-max: 分区中记录的最大滞后数量</span><br><span class=\"line\">    </span><br><span class=\"line\">##### topic-level fetch</span><br><span class=\"line\">fetch-size-avg: topic请求的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: topic每秒平均消耗的字节数</span><br><span class=\"line\"></span><br><span class=\"line\">#### streams</span><br><span class=\"line\">##### Thread</span><br><span class=\"line\">[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">[commit|poll|process|punctuate]-rate: 平均每秒请求数</span><br><span class=\"line\">task-created-rate: 每秒新建任务数</span><br><span class=\"line\">task-closed-rate: 每秒关闭任务数</span><br><span class=\"line\">skipped-records-rate: 每秒跳过记录数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### Task</span><br><span class=\"line\">commit-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">commit-rate: 每秒提交的平均次数</span><br><span class=\"line\"></span><br><span class=\"line\">##### Processor Node</span><br><span class=\"line\">forward-rate: 每秒从源节点向下游转发的平均速率</span><br><span class=\"line\"></span><br><span class=\"line\">##### State Store </span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）</span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度</span><br><span class=\"line\"></span><br><span class=\"line\">#### others</span><br><span class=\"line\">GC、CPU、IO等</span><br><span class=\"line\"></span><br><span class=\"line\">### Monitoring实现</span><br><span class=\"line\">#### 方式一：</span><br><span class=\"line\">1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出</span><br><span class=\"line\">2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列</span><br><span class=\"line\">3.storm消费数据进行分析计算</span><br></pre></td></tr></table></figure>\n<p>需多依赖</p>\n<p><dependency><br>    <groupid>io.dropwizard.metrics</groupid><br>    <artifactid>metrics-servlets</artifactid><br>    <version>3.1.0</version><br></dependency><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 方式二：</span><br><span class=\"line\">1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果</span><br><span class=\"line\">2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka</span><br><span class=\"line\">3.storm消费对应kafka数据，再进行分析计算</span><br><span class=\"line\"></span><br><span class=\"line\">Pom依赖：</span><br></pre></td></tr></table></figure></p>\n<p><dependency><br>    <groupid>org.apache.kafka</groupid><br>    <artifactid>kafka_2.11</artifactid><br>    <version>0.10.2.1</version><br>    <exclusions><br>        <exclusion><br>            <groupid>org.apache.zookeeper</groupid><br>            <artifactid>zookeeper</artifactid><br>            </exclusion><br>    </exclusions><br></dependency></p>\n<p><dependency><br>    <groupid>org.apache.zookeeper</groupid><br>    <artifactid>zookeeper</artifactid><br>    <version>3.4.10</version><br>    <exclusions><br>        <exclusion><br>            <groupid>com.sun.jmx</groupid><br>            <artifactid>jmxri</artifactid><br>        </exclusion><br>            <exclusion><br>                <groupid>com.sun.jdmk</groupid><br>                <artifactid>jmxtools</artifactid><br>            </exclusion><br>            <exclusion><br>                <groupid>javax.jms</groupid><br>                <artifactid>jms</artifactid><br>            </exclusion><br>        </exclusions><br>    </dependency><br>    <dependency><br>           <groupid>io.dropwizard.metrics</groupid><br>           <artifactid>metrics-core</artifactid><br>           <version>3.1.0</version><br>    </dependency><br>```</p>\n<h3 id=\"Kafka监控工具\"><a href=\"#Kafka监控工具\" class=\"headerlink\" title=\"Kafka监控工具\"></a>Kafka监控工具</h3><h4 id=\"KafkaOffsetMonitor\"><a href=\"#KafkaOffsetMonitor\" class=\"headerlink\" title=\"KafkaOffsetMonitor\"></a>KafkaOffsetMonitor</h4><blockquote>\n<p>是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全<br>可以对consumer消费情况进行监控，并能列出每个consumer的offset数据<br>可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）<br>可以查看每个consumser group列表信息<br>可以查看topic的历史消费信息<br><a href=\"https://github.com/quantifind/KafkaOffsetMonitor\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-web-console\"><a href=\"#kafka-web-console\" class=\"headerlink\" title=\"kafka-web-console\"></a>kafka-web-console</h4><blockquote>\n<p>也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。<br>可以查看brokers kafka集群信息<br>可以查看每个topic的Partition，logsize，分区leader等信息<br>可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息<br>可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表<br>控制台还提供了RAML中描述的JSON API<br><a href=\"https://github.com/claudemamo/kafka-web-console\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-manger\"><a href=\"#kafka-manger\" class=\"headerlink\" title=\"kafka-manger\"></a>kafka-manger</h4><blockquote>\n<p>是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况<br>可以选择你要运行的副本<br>可以基于当前分区状况重新分配生成分区<br>可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)<br>可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除<br>可以为已存在的topic增加分区，更新配置<br>可以支持多个topic批量重分区，选择partition broker位置等<br>可以启用JMX轮询代理，以及broker、metrics主题等级<br>可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者<br><a href=\"https://github.com/yahoo/kafka-manager\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h2><p><strong>欢迎大家共同讨论、分享</strong></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjwf2o1550001h9s74zuxai76","category_id":"cjwf2o15f0002h9s7iria22g3","_id":"cjwf2o15k0005h9s79t5eq5kn"}],"PostTag":[{"post_id":"cjwf2o1550001h9s74zuxai76","tag_id":"cjwf2o15h0003h9s7wx6l4pyp","_id":"cjwf2o15j0004h9s7e4hodc4p"}],"Tag":[{"name":"大数据 kafka","_id":"cjwf2o15h0003h9s7wx6l4pyp"}]}}