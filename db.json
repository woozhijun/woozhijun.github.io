{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"c2b485dad4a4fd9b237372c1c3140bf39dae5439","modified":1559488330555},{"_id":"source/README.md","hash":"17e22ff1f8de976ffa5d1f07c74802976efd3a4d","modified":1559488330555},{"_id":"source/_posts/kafka_metrics.md","hash":"8aef1a6f5a4db3a274a15c7e42e17f8854ed44c8","modified":1559488330555},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1574070089309},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1574070089309},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1574070089129},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1574070089129},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1574070089159},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1574070089130},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1574070089183},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1574070089183},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1574070089183},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1607333218885},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1607333218911},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1574070089195},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1607333218892},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1574070089130},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1607333218883},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1574070089134},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1607333218883},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1574070089158},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1607333218880},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1574070089159},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1607333218884},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1574070089159},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1607333218884},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1607333218885},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1574070089159},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1607333218886},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1607333218887},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1574070089199},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1574070089200},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1607333218887},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1574070089200},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1607333218887},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1607333218892},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1607333218888},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1607333218892},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1607333218892},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1607333218892},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1607333218893},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1607333218893},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1607333218893},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1607333218894},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1607333218894},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1607333218894},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1607333218895},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1607333218895},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1607333218895},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1607333218896},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1607333218896},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1607333218896},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1607333218896},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1607333218897},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1607333218897},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1607333218897},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1607333218897},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1607333218898},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1607333218909},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1607333218909},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1607333218910},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1607333218910},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1607333218910},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1574070089275},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1607333218881},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1607333218910},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1607333218881},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1607333218882},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1607333218882},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1607333218888},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1574070089204},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1607333218888},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1607333218888},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1607333218889},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1607333218889},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1607333218890},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1607333218890},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1574070089208},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1607333218891},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1607333218891},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1607333218891},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1607333218891},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"c4ec5822d644ddcedf2401837e6f6e6d3b63fbcd","modified":1607333218898},{"_id":"themes/next/layout/_macro/post.swig","hash":"71e4dc5a56cbc403d9785526f7719d824f4c8911","modified":1607333218899},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1607333218899},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1607333218899},{"_id":"themes/next/layout/_partials/footer.swig","hash":"af2d688f688923080aaf8f20be33cfda629797ea","modified":1607333218900},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1607333218902},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1574070089227},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1574070089228},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1574070089229},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1607333218905},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1574070089232},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1574070089233},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1574070089236},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1607333218907},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1574070089252},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1607333218911},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1574070089273},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1607333218913},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1574070089274},{"_id":"themes/next/scripts/filters/post.js","hash":"d86849559ae54a4098aef4e2ab9dc8f99a1d186c","modified":1607333218914},{"_id":"themes/next/scripts/helpers/engine.js","hash":"22d77bd511fc7c1bbd12339d65004ed5bfb0713c","modified":1607333218914},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1607333218914},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1607333218914},{"_id":"themes/next/scripts/tags/button.js","hash":"946dd7beede408d1f090d5e9774d74763828b97c","modified":1607333218915},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1607333218915},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"0f133f27b61e8351cfd0959ba8a1b8551a9a8cc6","modified":1607333218915},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1607333218915},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"fad54f0e9e225a70390209f63d9b3cc566a5ebcb","modified":1574070538491},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1574070089277},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1574070089277},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1574070089277},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1607333218915},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1574070089277},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1574070089277},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1607333218907},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1607333218928},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1574070089318},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1574070089318},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1574070089318},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1574070089319},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1574070089319},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1574070089319},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1574070089320},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1574070089320},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1574070089320},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1574070089320},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1574070089321},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1574070089321},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1574070089321},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1574070089321},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1574070089321},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1607333218929},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1607333218929},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1607333218929},{"_id":"themes/next/source/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1607333218929},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1607333218930},{"_id":"themes/next/source/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1607333218930},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1607333218900},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1607333218900},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1607333218901},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1607333218901},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"12aeb9ee0d1d49d347f82a91e6bab568e1b59037","modified":1607333218901},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"958e097790551c9520426a1233add03515034f35","modified":1607333218901},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1607333218902},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1574070089225},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1607333218902},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1607333218903},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1574070089226},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1574070089226},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1607333218903},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1607333218903},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1607333218904},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1607333218904},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"ec20ff43845723e0ac2a245047c7a7e5aead6e88","modified":1607333218904},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1607333218904},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1574070089232},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1574070089232},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1574070089232},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1574070089232},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1574070089233},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1607333218905},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1574070089234},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1574070089234},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1607333218905},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1574070089248},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1607333218905},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1607333218906},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1607333218906},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1607333218906},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1607333218906},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1607333218907},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1574070089256},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1574070089258},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1607333218907},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1607333218908},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1574070089262},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1574070089263},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1574070089263},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1574070089264},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1607333218908},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1607333218908},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1607333218908},{"_id":"themes/next/layout/_third-party/statistics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1574070089264},{"_id":"themes/next/layout/_third-party/statistics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1574070089265},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1607333218909},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1607333218909},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1607333218911},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1574070089268},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1607333218912},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1607333218912},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1574070089271},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1574070089271},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1607333218912},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1607333218912},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1574070089272},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1607333218913},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1607333218913},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1574070089309},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1574070089309},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1574070089310},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1607333218927},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1607333218927},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1607333218928},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"799fdf4f258a51d45d1e2b02fb59b337e46b5b3c","modified":1607333218928},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dae390efcb5da9c021ad7f25fe2d39ff36938cc6","modified":1607333218928},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1607333218930},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1607333218930},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1574070089324},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1574070089324},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1574070089324},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1574070089324},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1574070089324},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1574070089328},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1574070089329},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1607333218916},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1607333218916},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1607333218916},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1574070089297},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1607333218919},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1607333218921},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1607333218921},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"220da37051ed5dac9cf7bd126451f6aba4f94d21","modified":1607333218923},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1607333218923},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1607333218923},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1574070089307},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1574070089307},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1574070089307},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1607333218923},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1574070089309},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1607333218925},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1607333218925},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1607333218925},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1607333218925},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1607333218926},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1574070089311},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1607333218926},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1574070089311},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"5e644b1303ab6dcd1b65ee0fd6b91309b04ce64d","modified":1607333218926},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1607333218926},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1574070089312},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1574070089312},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1607333218926},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1607333218927},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ccb71d732b12acd02ac26ed6bbda4861d027857d","modified":1607333218927},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e4f958677a75de87ee1caf7e22ba46a0602f22dd","modified":1607333218927},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"82025c3ad7af12e532e2e81be98deb0a74ff23ac","modified":1607333218927},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1574070089314},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1574070089324},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1574070089325},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1574070089325},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1574070089287},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1574070089289},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1574070089290},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c1daeb60c23945f745703ac2c3f4bf99d0ea3d95","modified":1607333218916},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1574070089290},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"89f76380091f1be49936c69bac02e984dae5ff87","modified":1607333218917},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1607333218917},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1607333218917},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1607333218917},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1607333218918},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"66211794e4ed47e779ca81150cef588e0b4f2fc5","modified":1607333218918},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"796eb941ba0ca03fd5ca6d15a1f6a56afd9aa174","modified":1607333218918},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1607333218918},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1574070089296},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1574070089296},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1574070089296},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1607333218919},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1574070089297},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1607333218919},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1574070089298},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1607333218919},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1607333218919},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1607333218920},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1574070089299},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1607333218920},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1607333218920},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1574070089300},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"555762730f1f31451113e8fdc84ec438ea738d90","modified":1607333218920},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1607333218920},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1607333218921},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1574070089302},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1607333218921},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1607333218921},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1607333218922},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1574070089303},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1607333218922},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1607333218922},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1574070089304},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1607333218922},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1607333218922},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1607333218923},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1574070089306},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1607333218923},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1574070089306},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1574070089308},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1607333218924},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1607333218924},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"9b3cce30c58e57b59e45d3f668a71a4129d3a8e4","modified":1607333218924},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1607333218924},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1607333218924},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1574070089309},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1574070089327},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1574070089328},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1574070089323},{"_id":"themes/next/_config.yml","hash":"b60b177f9cb53bf055d537409e03c3c4daafa50a","modified":1607333218886},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1574070089198},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1574070089326},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1607333218884},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1607333218892},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1607333218902},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1607333218913},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1607333218914},{"_id":"themes/next/source/css/_colors.styl","hash":"19c836f367977fb712b9868f3281ff5d757a8d5c","modified":1607333218916},{"_id":"themes/next/source/css/_mixins.styl","hash":"b79ff3debd5709397b122292fc7e551ae9d40782","modified":1607333218925},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"12cd9adb0c33adc484201f9e8a4e64ccf3011bae","modified":1607333218903},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1607333218917}],"Category":[{"name":"kafka","_id":"ckieakkfd0002q4s6ct2f045c"}],"Data":[],"Page":[{"_content":"# woozhijun.github.io\n","source":"README.md","raw":"# woozhijun.github.io\n","date":"2019-06-02T15:12:10.555Z","updated":"2019-06-02T15:12:10.555Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"ckieakkf10000q4s6gihy7gi8","content":"<h1 id=\"woozhijun-github-io\"><a href=\"#woozhijun-github-io\" class=\"headerlink\" title=\"woozhijun.github.io\"></a>woozhijun.github.io</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"woozhijun-github-io\"><a href=\"#woozhijun-github-io\" class=\"headerlink\" title=\"woozhijun.github.io\"></a>woozhijun.github.io</h1>"}],"Post":[{"title":"洞悉 Kafka metrics","_content":"\n## 摘要\n> 本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.\n\n## Kafka metrics\nKafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。\nYammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。\nYammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。\n因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。\n\n### metrics收集\n#### 注册\n\n```\nfinal MetricRegistry metrics = new MetricRegistry();\n```\n\n#### Gauges\ngauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：\n\n```\npublic class QueueManager {\n    private final Queue queue;\n    public QueueManager(MetricRegistry metrics, String name) {\n        this.queue = new Queue();\n        // name(QueueManager.class, name, \"size\") 中间按.分隔\n        metrics.register(MetricRegistry.name(QueueManager.class, name, \"size\"),\n                         new Gauge<Integer>() {\n                             @Override\n                             public Integer getValue() {\n                                 return queue.size();\n                             }\n                         });\n    }\n}\n```\n\n#### Counters\ncounter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：\n\n```\nprivate final Counter pendingJobs = metrics.counter(name(QueueManager.class, \"pending-jobs\"));\npublic void addJob(Job job) {\n    // 自增\n    pendingJobs.inc();\n    queue.offer(job);\n}\npublic Job takeJob() {\n    pendingJobs.dec();\n    return queue.take();\n}\n\nMetricRegistry.name(QueueManager.class, \"jobs\", \"size\")\n```\n\n#### Histograms\nhistogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值\n\n```\nprivate final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, \"response-sizes\"));\n\npublic void handleRequest(Request request, Response response) {\n    // 增加上报的值\n    responseSizes.update(response.getContent().length);\n}\n```\n\n#### Timers\nTimer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：\n\n```\nprivate final Timer responses = metrics.timer(name(RequestHandler.class, \"responses\"));\n\npublic String handleRequest(Request request, Response response) {\n    final Timer.Context context = responses.time();\n    try {\n        // 具体执行逻辑\n        return \"OK\";\n    } finally {\n        context.stop();\n    }\n}\n```\n\n#### Health Checks\n主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：\n\n```\nfinal HealthCheckRegistry healthChecks = new HealthCheckRegistry();\n\npublic class DatabaseHealthCheck extends HealthCheck {\n    private final Database database;\n\n    public DatabaseHealthCheck(Database database) {\n        this.database = database;\n    }\n\n    @Override\n    public HealthCheck.Result check() throws Exception {\n        if (database.isConnected()) {\n            return HealthCheck.Result.healthy();\n        } else {\n            return HealthCheck.Result.unhealthy(\"Cannot connect to \" + database.getUrl());\n        }\n    }\n}\n\nhealthChecks.register(\"postgres\", new DatabaseHealthCheck(database));\n```\n\n#### Metrics Annotation\n注解方式，简单的实现统计某个方法、某个值的数据：\n\n```\n/**\n* 统计调用的次数和时间\n*/\n@Timed\npublic void call() {\n}\n    \n/**\n* 统计登陆的次数\n*/\n@Counted\npublic void userLogin(){\n}\n\n//other\n@CachedGauge @Gauge @ExceptionMetered @Metered @Metric\n``` \n\n### metrics上报\n#### ConsoleReporter\n对于简单指标的计算，可以使用定期向控制台报告：\n\n```\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)\n\t\t\t\t                    .convertRatesTo(TimeUnit.SECONDS)\n\t\t\t\t                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();\nmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\nmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n                                                \nreporter.start(5, TimeUnit.MINUTES);\n```\n\n#### JmxReporter\n使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：\n\n```\nfinal JmxReporter reporter = JmxReporter.forRegistry(registry).build();\nreporter.start();\n```\n\n#### CsvReporter\n对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：\n\n```\nfinal CsvReporter reporter = CsvReporter.forRegistry(registry)\n                                        .formatFor(Locale.US)\n                                        .convertRatesTo(TimeUnit.SECONDS)\n                                        .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                        .build(new File(\"~/projects/data/\"));\nreporter.start(1, TimeUnit.SECONDS);\n```\n\n#### Slf4jReporter\n可以将上报数据记录slf4j日志：\n\n```\nfinal Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)\n                                            .outputTo(LoggerFactory.getLogger(\"com.example.metrics\"))\n                                            .convertRatesTo(TimeUnit.SECONDS)\n                                            .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                            .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n\n#### HTTP Reporter\n需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：\n\n```\npublic class MyMetricsServletListener extends MetricsServlet.ContextListener {\n\t\n\tpublic static final MetricRegistry metrics = new MetricRegistry();\n\n\t@Override\n\tprotected MetricRegistry getMetricRegistry() {\n\t\t\n\t\tmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\n\t\tmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n\t\tSystem.out.println(\">>.Listener success...\");\n\t\treturn metrics;\n\t}\n}\n```\n\n```\npublic class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {\n\n\tpublic static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n\t@Override\n\tprotected HealthCheckRegistry getHealthCheckRegistry() {\n\t\t\n\t\thealthCheck.register(\"postgres\", new TFHealthCheck(false));\n\t\treturn healthCheck;\n\t}\n}\n```\n\n```\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyMetricsServletListener</listener-class>\n\t</listener>\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener</listener-class>\n\t</listener>\n\t\n\t<servlet>\n        <servlet-name>metrics</servlet-name>\n        <servlet-class>com.codahale.metrics.servlets.AdminServlet</servlet-class>\n\t</servlet>\n\t<servlet-mapping>\n\t   <servlet-name>metrics</servlet-name>\n\t   <url-pattern>/metrics/*</url-pattern>\n\t</servlet-mapping>\n```\n\n[源码地址](https://github.com/dropwizard/metrics)\n\n\n### Kafka性能指标\n#### kafka.server\nBrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量\nBrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数\nBrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数\nReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|<|all replicas|\nReplicaManager,name=PartitionCount: 分区数\nReplicaManager,name=LeaderCount: Leader副本数\nReplicaManager,name=IsrShrinksPerSec: ISR回退\nReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0\nReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度\nFetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小\nKafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间\n\n#### kafka.network\nkafka.network:type=RequestMetrics,name=$1,request={Produce|FetchConsumer|FetchFollower}\nRequestsPerSec: 每秒请求量\nTotalTimeMs: 请求总时间\nRequestQueueTimeMs: 请求队列等待时间\nLocalTimeMs: 请求leader处理时间\nRemoteTimeMs: 请求follower等待时间\nResponseQueueTimeMs: 请求队列等待响应时间\nResponseSendTimeMs: 请求响应发送时间\nkafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间\n    \n#### kafka.controller\nKafkaController,name=ActiveControllerCount: 活跃broker数量\nControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率\nControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率\n\n#### common\nconnection-close-rate: 每秒连接关闭率\nconnection-creation-rate: 每秒新建连接率\nnetwork-io-rate: 平均每秒IO次数（读取或写入）\noutgoing-byte-rat: 平均每秒向服务器发送的字节数\nrequest-rate: 平均每秒发送的请求数\nincoming-byte-rate: 每秒读取字节数\nresponse-rate: 每秒收到的回复\nselect-rate: IO切换次数\nio-wait-ratio: IO线程等待时间\nconnection-count: 当前活跃连接数\n    \n#### broker\noutgoing-byte-rate: 平均每秒发送字节数\nrequest-rate: 平均每秒请求数\nrequest-size-avg: 所有请求的平均大小\nrequest-latency-avg: 平均请求时间(ms)\nresponse-rate: 每秒收到的响应数\n    \n#### producer\nwaiting-threads: 缓存区排队的用户阻塞线程数\nbuffer-available-bytes: 可用内存字节数\nbatch-size-avg: 每个分区每次请求发送的平均字节数\ncompression-rate-avg: 批量记录平均压缩率\nrecord-queue-time-avg: 批量记录耗费的平均时间（ms）\nrequest-latency-avg: 平均请求时间（ms）\nrecord-send-rate: 每秒发送的平均次数\nrecord-retry-rate: 每秒重试发送次数\nrecord-error-rate: 每秒错误数量次数\nrequests-in-flight: 目前等待响应的请求数量\nmetadata-age: 当前生产者数据使用周期（s）\n    \n#### consumer\n##### Consumer Group\ncommit-latency-avg: 提交请求所用的平均时间\ncommit-rate: 每秒提交调用次数\nassigned-partitions: 当前分配给该消费者的分区数（可选）\nheartbeat-rate: 平均每秒心跳数\njoin-time-avg: 群组重新加入的平均时间\njoin-rate: 每秒连接组的数量\nsync-time-avg: 群组同步所需的平均时间\nsync-rate: 每秒同步的组数\n    \n##### consumer fetch\nfetch-size-avg: 每次请求获取的平均字节数\nbytes-consumed-rate: 每秒消耗的平均字节数\nfetch-latency-avg: 请求所用的平均时间\nfetch-rate: 每秒提取请求数\nrecords-lag-max: 分区中记录的最大滞后数量\n    \n##### topic-level fetch\nfetch-size-avg: topic请求的平均字节数\nbytes-consumed-rate: topic每秒平均消耗的字节数\n\n#### streams\n##### Thread\n[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）\n[commit|poll|process|punctuate]-rate: 平均每秒请求数\ntask-created-rate: 每秒新建任务数\ntask-closed-rate: 每秒关闭任务数\nskipped-records-rate: 每秒跳过记录数\n    \n##### Task\ncommit-latency-avg: 平均执行时间（ms）\ncommit-rate: 每秒提交的平均次数\n\n##### Processor Node\nforward-rate: 每秒从源节点向下游转发的平均速率\n\n##### State Store \n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）\n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度\n\n#### others\nGC、CPU、IO等\n\n### Monitoring实现\n#### 方式一：\n1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出\n2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列\n3.storm消费数据进行分析计算\n\n```\n需多依赖\n<dependency>\n    <groupId>io.dropwizard.metrics</groupId>\n    <artifactId>metrics-servlets</artifactId>\n    <version>3.1.0</version>\n</dependency>\n```\n\n#### 方式二：\n1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果\n2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka\n3.storm消费对应kafka数据，再进行分析计算\n\nPom依赖：\n\n```\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n\t\t\t</exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>com.sun.jdmk</groupId>\n\t\t\t\t<artifactId>jmxtools</artifactId>\n\t\t\t</exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>javax.jms</groupId>\n\t\t\t\t<artifactId>jms</artifactId>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t       <groupId>io.dropwizard.metrics</groupId>\n\t       <artifactId>metrics-core</artifactId>\n\t       <version>3.1.0</version>\n\t</dependency>\n```\n\n### Kafka监控工具\n#### KafkaOffsetMonitor\n> 是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全\n> 可以对consumer消费情况进行监控，并能列出每个consumer的offset数据\n> 可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）\n> 可以查看每个consumser group列表信息\n> 可以查看topic的历史消费信息\n> [源码地址](https://github.com/quantifind/KafkaOffsetMonitor)\n    \n#### kafka-web-console\n> 也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。\n> 可以查看brokers kafka集群信息\n> 可以查看每个topic的Partition，logsize，分区leader等信息\n> 可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息\n> 可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表\n> 控制台还提供了RAML中描述的JSON API\n> [源码地址](https://github.com/claudemamo/kafka-web-console)\n\n#### kafka-manger\n> 是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况\n> 可以选择你要运行的副本\n> 可以基于当前分区状况重新分配生成分区\n> 可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)\n> 可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除\n> 可以为已存在的topic增加分区，更新配置\n> 可以支持多个topic批量重分区，选择partition broker位置等\n> 可以启用JMX轮询代理，以及broker、metrics主题等级\n> 可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者\n> [源码地址](https://github.com/yahoo/kafka-manager)\n\n## QA\n**欢迎大家共同讨论、分享**\n\n\n\n","source":"_posts/kafka_metrics.md","raw":"---\ntitle: 洞悉 Kafka metrics\ntags: 大数据 kafka\ncategory: kafka\n---\n\n## 摘要\n> 本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.\n\n## Kafka metrics\nKafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。\nYammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。\nYammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。\n因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。\n\n### metrics收集\n#### 注册\n\n```\nfinal MetricRegistry metrics = new MetricRegistry();\n```\n\n#### Gauges\ngauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：\n\n```\npublic class QueueManager {\n    private final Queue queue;\n    public QueueManager(MetricRegistry metrics, String name) {\n        this.queue = new Queue();\n        // name(QueueManager.class, name, \"size\") 中间按.分隔\n        metrics.register(MetricRegistry.name(QueueManager.class, name, \"size\"),\n                         new Gauge<Integer>() {\n                             @Override\n                             public Integer getValue() {\n                                 return queue.size();\n                             }\n                         });\n    }\n}\n```\n\n#### Counters\ncounter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：\n\n```\nprivate final Counter pendingJobs = metrics.counter(name(QueueManager.class, \"pending-jobs\"));\npublic void addJob(Job job) {\n    // 自增\n    pendingJobs.inc();\n    queue.offer(job);\n}\npublic Job takeJob() {\n    pendingJobs.dec();\n    return queue.take();\n}\n\nMetricRegistry.name(QueueManager.class, \"jobs\", \"size\")\n```\n\n#### Histograms\nhistogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值\n\n```\nprivate final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, \"response-sizes\"));\n\npublic void handleRequest(Request request, Response response) {\n    // 增加上报的值\n    responseSizes.update(response.getContent().length);\n}\n```\n\n#### Timers\nTimer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：\n\n```\nprivate final Timer responses = metrics.timer(name(RequestHandler.class, \"responses\"));\n\npublic String handleRequest(Request request, Response response) {\n    final Timer.Context context = responses.time();\n    try {\n        // 具体执行逻辑\n        return \"OK\";\n    } finally {\n        context.stop();\n    }\n}\n```\n\n#### Health Checks\n主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：\n\n```\nfinal HealthCheckRegistry healthChecks = new HealthCheckRegistry();\n\npublic class DatabaseHealthCheck extends HealthCheck {\n    private final Database database;\n\n    public DatabaseHealthCheck(Database database) {\n        this.database = database;\n    }\n\n    @Override\n    public HealthCheck.Result check() throws Exception {\n        if (database.isConnected()) {\n            return HealthCheck.Result.healthy();\n        } else {\n            return HealthCheck.Result.unhealthy(\"Cannot connect to \" + database.getUrl());\n        }\n    }\n}\n\nhealthChecks.register(\"postgres\", new DatabaseHealthCheck(database));\n```\n\n#### Metrics Annotation\n注解方式，简单的实现统计某个方法、某个值的数据：\n\n```\n/**\n* 统计调用的次数和时间\n*/\n@Timed\npublic void call() {\n}\n    \n/**\n* 统计登陆的次数\n*/\n@Counted\npublic void userLogin(){\n}\n\n//other\n@CachedGauge @Gauge @ExceptionMetered @Metered @Metric\n``` \n\n### metrics上报\n#### ConsoleReporter\n对于简单指标的计算，可以使用定期向控制台报告：\n\n```\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)\n\t\t\t\t                    .convertRatesTo(TimeUnit.SECONDS)\n\t\t\t\t                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();\nmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\nmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n                                                \nreporter.start(5, TimeUnit.MINUTES);\n```\n\n#### JmxReporter\n使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：\n\n```\nfinal JmxReporter reporter = JmxReporter.forRegistry(registry).build();\nreporter.start();\n```\n\n#### CsvReporter\n对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：\n\n```\nfinal CsvReporter reporter = CsvReporter.forRegistry(registry)\n                                        .formatFor(Locale.US)\n                                        .convertRatesTo(TimeUnit.SECONDS)\n                                        .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                        .build(new File(\"~/projects/data/\"));\nreporter.start(1, TimeUnit.SECONDS);\n```\n\n#### Slf4jReporter\n可以将上报数据记录slf4j日志：\n\n```\nfinal Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)\n                                            .outputTo(LoggerFactory.getLogger(\"com.example.metrics\"))\n                                            .convertRatesTo(TimeUnit.SECONDS)\n                                            .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                            .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n\n#### HTTP Reporter\n需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：\n\n```\npublic class MyMetricsServletListener extends MetricsServlet.ContextListener {\n\t\n\tpublic static final MetricRegistry metrics = new MetricRegistry();\n\n\t@Override\n\tprotected MetricRegistry getMetricRegistry() {\n\t\t\n\t\tmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\n\t\tmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n\t\tSystem.out.println(\">>.Listener success...\");\n\t\treturn metrics;\n\t}\n}\n```\n\n```\npublic class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {\n\n\tpublic static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n\t@Override\n\tprotected HealthCheckRegistry getHealthCheckRegistry() {\n\t\t\n\t\thealthCheck.register(\"postgres\", new TFHealthCheck(false));\n\t\treturn healthCheck;\n\t}\n}\n```\n\n```\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyMetricsServletListener</listener-class>\n\t</listener>\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener</listener-class>\n\t</listener>\n\t\n\t<servlet>\n        <servlet-name>metrics</servlet-name>\n        <servlet-class>com.codahale.metrics.servlets.AdminServlet</servlet-class>\n\t</servlet>\n\t<servlet-mapping>\n\t   <servlet-name>metrics</servlet-name>\n\t   <url-pattern>/metrics/*</url-pattern>\n\t</servlet-mapping>\n```\n\n[源码地址](https://github.com/dropwizard/metrics)\n\n\n### Kafka性能指标\n#### kafka.server\nBrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量\nBrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数\nBrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数\nReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|<|all replicas|\nReplicaManager,name=PartitionCount: 分区数\nReplicaManager,name=LeaderCount: Leader副本数\nReplicaManager,name=IsrShrinksPerSec: ISR回退\nReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0\nReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度\nFetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小\nKafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间\n\n#### kafka.network\nkafka.network:type=RequestMetrics,name=$1,request={Produce|FetchConsumer|FetchFollower}\nRequestsPerSec: 每秒请求量\nTotalTimeMs: 请求总时间\nRequestQueueTimeMs: 请求队列等待时间\nLocalTimeMs: 请求leader处理时间\nRemoteTimeMs: 请求follower等待时间\nResponseQueueTimeMs: 请求队列等待响应时间\nResponseSendTimeMs: 请求响应发送时间\nkafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间\n    \n#### kafka.controller\nKafkaController,name=ActiveControllerCount: 活跃broker数量\nControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率\nControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率\n\n#### common\nconnection-close-rate: 每秒连接关闭率\nconnection-creation-rate: 每秒新建连接率\nnetwork-io-rate: 平均每秒IO次数（读取或写入）\noutgoing-byte-rat: 平均每秒向服务器发送的字节数\nrequest-rate: 平均每秒发送的请求数\nincoming-byte-rate: 每秒读取字节数\nresponse-rate: 每秒收到的回复\nselect-rate: IO切换次数\nio-wait-ratio: IO线程等待时间\nconnection-count: 当前活跃连接数\n    \n#### broker\noutgoing-byte-rate: 平均每秒发送字节数\nrequest-rate: 平均每秒请求数\nrequest-size-avg: 所有请求的平均大小\nrequest-latency-avg: 平均请求时间(ms)\nresponse-rate: 每秒收到的响应数\n    \n#### producer\nwaiting-threads: 缓存区排队的用户阻塞线程数\nbuffer-available-bytes: 可用内存字节数\nbatch-size-avg: 每个分区每次请求发送的平均字节数\ncompression-rate-avg: 批量记录平均压缩率\nrecord-queue-time-avg: 批量记录耗费的平均时间（ms）\nrequest-latency-avg: 平均请求时间（ms）\nrecord-send-rate: 每秒发送的平均次数\nrecord-retry-rate: 每秒重试发送次数\nrecord-error-rate: 每秒错误数量次数\nrequests-in-flight: 目前等待响应的请求数量\nmetadata-age: 当前生产者数据使用周期（s）\n    \n#### consumer\n##### Consumer Group\ncommit-latency-avg: 提交请求所用的平均时间\ncommit-rate: 每秒提交调用次数\nassigned-partitions: 当前分配给该消费者的分区数（可选）\nheartbeat-rate: 平均每秒心跳数\njoin-time-avg: 群组重新加入的平均时间\njoin-rate: 每秒连接组的数量\nsync-time-avg: 群组同步所需的平均时间\nsync-rate: 每秒同步的组数\n    \n##### consumer fetch\nfetch-size-avg: 每次请求获取的平均字节数\nbytes-consumed-rate: 每秒消耗的平均字节数\nfetch-latency-avg: 请求所用的平均时间\nfetch-rate: 每秒提取请求数\nrecords-lag-max: 分区中记录的最大滞后数量\n    \n##### topic-level fetch\nfetch-size-avg: topic请求的平均字节数\nbytes-consumed-rate: topic每秒平均消耗的字节数\n\n#### streams\n##### Thread\n[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）\n[commit|poll|process|punctuate]-rate: 平均每秒请求数\ntask-created-rate: 每秒新建任务数\ntask-closed-rate: 每秒关闭任务数\nskipped-records-rate: 每秒跳过记录数\n    \n##### Task\ncommit-latency-avg: 平均执行时间（ms）\ncommit-rate: 每秒提交的平均次数\n\n##### Processor Node\nforward-rate: 每秒从源节点向下游转发的平均速率\n\n##### State Store \n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）\n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度\n\n#### others\nGC、CPU、IO等\n\n### Monitoring实现\n#### 方式一：\n1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出\n2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列\n3.storm消费数据进行分析计算\n\n```\n需多依赖\n<dependency>\n    <groupId>io.dropwizard.metrics</groupId>\n    <artifactId>metrics-servlets</artifactId>\n    <version>3.1.0</version>\n</dependency>\n```\n\n#### 方式二：\n1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果\n2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka\n3.storm消费对应kafka数据，再进行分析计算\n\nPom依赖：\n\n```\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n\t\t\t</exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>com.sun.jdmk</groupId>\n\t\t\t\t<artifactId>jmxtools</artifactId>\n\t\t\t</exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>javax.jms</groupId>\n\t\t\t\t<artifactId>jms</artifactId>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t       <groupId>io.dropwizard.metrics</groupId>\n\t       <artifactId>metrics-core</artifactId>\n\t       <version>3.1.0</version>\n\t</dependency>\n```\n\n### Kafka监控工具\n#### KafkaOffsetMonitor\n> 是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全\n> 可以对consumer消费情况进行监控，并能列出每个consumer的offset数据\n> 可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）\n> 可以查看每个consumser group列表信息\n> 可以查看topic的历史消费信息\n> [源码地址](https://github.com/quantifind/KafkaOffsetMonitor)\n    \n#### kafka-web-console\n> 也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。\n> 可以查看brokers kafka集群信息\n> 可以查看每个topic的Partition，logsize，分区leader等信息\n> 可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息\n> 可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表\n> 控制台还提供了RAML中描述的JSON API\n> [源码地址](https://github.com/claudemamo/kafka-web-console)\n\n#### kafka-manger\n> 是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况\n> 可以选择你要运行的副本\n> 可以基于当前分区状况重新分配生成分区\n> 可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)\n> 可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除\n> 可以为已存在的topic增加分区，更新配置\n> 可以支持多个topic批量重分区，选择partition broker位置等\n> 可以启用JMX轮询代理，以及broker、metrics主题等级\n> 可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者\n> [源码地址](https://github.com/yahoo/kafka-manager)\n\n## QA\n**欢迎大家共同讨论、分享**\n\n\n\n","slug":"kafka_metrics","published":1,"date":"2019-06-02T15:12:10.555Z","updated":"2019-06-02T15:12:10.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckieakkf80001q4s6hj6tewdj","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.</p>\n</blockquote>\n<h2 id=\"Kafka-metrics\"><a href=\"#Kafka-metrics\" class=\"headerlink\" title=\"Kafka metrics\"></a>Kafka metrics</h2><p>Kafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。<br>Yammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。<br>Yammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。<br>因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。</p>\n<h3 id=\"metrics收集\"><a href=\"#metrics收集\" class=\"headerlink\" title=\"metrics收集\"></a>metrics收集</h3><h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final MetricRegistry metrics &#x3D; new MetricRegistry();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Gauges\"><a href=\"#Gauges\" class=\"headerlink\" title=\"Gauges\"></a>Gauges</h4><p>gauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueueManager &#123;</span><br><span class=\"line\">    private final Queue queue;</span><br><span class=\"line\">    public QueueManager(MetricRegistry metrics, String name) &#123;</span><br><span class=\"line\">        this.queue &#x3D; new Queue();</span><br><span class=\"line\">        &#x2F;&#x2F; name(QueueManager.class, name, &quot;size&quot;) 中间按.分隔</span><br><span class=\"line\">        metrics.register(MetricRegistry.name(QueueManager.class, name, &quot;size&quot;),</span><br><span class=\"line\">                         new Gauge&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                             @Override</span><br><span class=\"line\">                             public Integer getValue() &#123;</span><br><span class=\"line\">                                 return queue.size();</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h4><p>counter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Counter pendingJobs &#x3D; metrics.counter(name(QueueManager.class, &quot;pending-jobs&quot;));</span><br><span class=\"line\">public void addJob(Job job) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 自增</span><br><span class=\"line\">    pendingJobs.inc();</span><br><span class=\"line\">    queue.offer(job);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Job takeJob() &#123;</span><br><span class=\"line\">    pendingJobs.dec();</span><br><span class=\"line\">    return queue.take();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MetricRegistry.name(QueueManager.class, &quot;jobs&quot;, &quot;size&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Histograms\"><a href=\"#Histograms\" class=\"headerlink\" title=\"Histograms\"></a>Histograms</h4><p>histogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Histogram responseSizes &#x3D; metrics.histogram(name(RequestHandler.class, &quot;response-sizes&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 增加上报的值</span><br><span class=\"line\">    responseSizes.update(response.getContent().length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h4><p>Timer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Timer responses &#x3D; metrics.timer(name(RequestHandler.class, &quot;responses&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public String handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    final Timer.Context context &#x3D; responses.time();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 具体执行逻辑</span><br><span class=\"line\">        return &quot;OK&quot;;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Health-Checks\"><a href=\"#Health-Checks\" class=\"headerlink\" title=\"Health Checks\"></a>Health Checks</h4><p>主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final HealthCheckRegistry healthChecks &#x3D; new HealthCheckRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">public class DatabaseHealthCheck extends HealthCheck &#123;</span><br><span class=\"line\">    private final Database database;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DatabaseHealthCheck(Database database) &#123;</span><br><span class=\"line\">        this.database &#x3D; database;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public HealthCheck.Result check() throws Exception &#123;</span><br><span class=\"line\">        if (database.isConnected()) &#123;</span><br><span class=\"line\">            return HealthCheck.Result.healthy();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return HealthCheck.Result.unhealthy(&quot;Cannot connect to &quot; + database.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">healthChecks.register(&quot;postgres&quot;, new DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Metrics-Annotation\"><a href=\"#Metrics-Annotation\" class=\"headerlink\" title=\"Metrics Annotation\"></a>Metrics Annotation</h4><p>注解方式，简单的实现统计某个方法、某个值的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">* 统计调用的次数和时间</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@Timed</span><br><span class=\"line\">public void call() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\">* 统计登陆的次数</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@Counted</span><br><span class=\"line\">public void userLogin()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;other</span><br><span class=\"line\">@CachedGauge @Gauge @ExceptionMetered @Metered @Metric</span><br><span class=\"line\">&#96;&#96;&#96; </span><br><span class=\"line\"></span><br><span class=\"line\">### metrics上报</span><br><span class=\"line\">#### ConsoleReporter</span><br><span class=\"line\">对于简单指标的计算，可以使用定期向控制台报告：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)<br>                                    .convertRatesTo(TimeUnit.SECONDS)<br>                                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();<br>metrics.register(“jvm.mem”, new MemoryUsageGaugeSet());<br>metrics.register(“jvm.gc”, new GarbageCollectorMetricSet());</p>\n<p>reporter.start(5, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### JmxReporter</span><br><span class=\"line\">使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final JmxReporter reporter = JmxReporter.forRegistry(registry).build();<br>reporter.start();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### CsvReporter</span><br><span class=\"line\">对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final CsvReporter reporter = CsvReporter.forRegistry(registry)<br>                                        .formatFor(Locale.US)<br>                                        .convertRatesTo(TimeUnit.SECONDS)<br>                                        .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                        .build(new File(“~/projects/data/“));<br>reporter.start(1, TimeUnit.SECONDS);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### Slf4jReporter</span><br><span class=\"line\">可以将上报数据记录slf4j日志：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)<br>                                            .outputTo(LoggerFactory.getLogger(“com.example.metrics”))<br>                                            .convertRatesTo(TimeUnit.SECONDS)<br>                                            .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                            .build();<br>reporter.start(1, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### HTTP Reporter</span><br><span class=\"line\">需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>public class MyMetricsServletListener extends MetricsServlet.ContextListener {</p>\n<pre><code>public static final MetricRegistry metrics = new MetricRegistry();\n\n@Override\nprotected MetricRegistry getMetricRegistry() &#123;\n\n    metrics.register(&quot;jvm.mem&quot;, new MemoryUsageGaugeSet());\n    metrics.register(&quot;jvm.gc&quot;, new GarbageCollectorMetricSet());\n    System.out.println(&quot;&gt;&gt;.Listener success...&quot;);\n    return metrics;\n&#125;</code></pre>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>public class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {</p>\n<pre><code>public static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n@Override\nprotected HealthCheckRegistry getHealthCheckRegistry() &#123;\n\n    healthCheck.register(&quot;postgres&quot;, new TFHealthCheck(false));\n    return healthCheck;\n&#125;</code></pre>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyMetricsServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n\n&lt;servlet&gt;\n    &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;com.codahale.metrics.servlets.AdminServlet&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n   &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n   &lt;url-pattern&gt;/metrics/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[源码地址](https:&#x2F;&#x2F;github.com&#x2F;dropwizard&#x2F;metrics)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Kafka性能指标</span><br><span class=\"line\">#### kafka.server</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;MessagesInPerSec: 每秒消息量</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;BytesInPerSec: 每秒输入字节数</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;BytesOutPerSec: 每秒输出字节数</span><br><span class=\"line\">ReplicaManager,name&#x3D;UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|&lt;|all replicas|</span><br><span class=\"line\">ReplicaManager,name&#x3D;PartitionCount: 分区数</span><br><span class=\"line\">ReplicaManager,name&#x3D;LeaderCount: Leader副本数</span><br><span class=\"line\">ReplicaManager,name&#x3D;IsrShrinksPerSec: ISR回退</span><br><span class=\"line\">ReplicaManager,name&#x3D;IsrExpandsPerSec: ISR超前 value is 0</span><br><span class=\"line\">ReplicaFetcherManager,name&#x3D;MaxLag,clientId&#x3D;Replica: 滞后follower和leader的最大消息长度</span><br><span class=\"line\">FetcherLagMetrics,name&#x3D;ConsumerLag,clientId&#x3D;([-.\\w]+),topic&#x3D;([-.\\w]+),partition&#x3D;([0-9]+): 滞后follower的消息长度</span><br><span class=\"line\">DelayedOperationPurgatory,name&#x3D;PurgatorySize,delayedOperation&#x3D;Produce: producer等待请求大小</span><br><span class=\"line\">DelayedOperationPurgatory,name&#x3D;PurgatorySize,delayedOperation&#x3D;Fetch: 获取等待请求大小</span><br><span class=\"line\">KafkaRequestHandlerPool,name&#x3D;RequestHandlerAvgIdlePercent: 平均处理线程空闲时间</span><br><span class=\"line\"></span><br><span class=\"line\">#### kafka.network</span><br><span class=\"line\">kafka.network:type&#x3D;RequestMetrics,name&#x3D;$1,request&#x3D;&#123;Produce|FetchConsumer|FetchFollower&#125;</span><br><span class=\"line\">RequestsPerSec: 每秒请求量</span><br><span class=\"line\">TotalTimeMs: 请求总时间</span><br><span class=\"line\">RequestQueueTimeMs: 请求队列等待时间</span><br><span class=\"line\">LocalTimeMs: 请求leader处理时间</span><br><span class=\"line\">RemoteTimeMs: 请求follower等待时间</span><br><span class=\"line\">ResponseQueueTimeMs: 请求队列等待响应时间</span><br><span class=\"line\">ResponseSendTimeMs: 请求响应发送时间</span><br><span class=\"line\">kafka.network:type&#x3D;SocketServer,name&#x3D;NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间</span><br><span class=\"line\">    </span><br><span class=\"line\">#### kafka.controller</span><br><span class=\"line\">KafkaController,name&#x3D;ActiveControllerCount: 活跃broker数量</span><br><span class=\"line\">ControllerStats,name&#x3D;LeaderElectionRateAndTimeMs: leader选举率</span><br><span class=\"line\">ControllerStats,name&#x3D;UncleanLeaderElectionsPerSec: Unclean leader选举率</span><br><span class=\"line\"></span><br><span class=\"line\">#### common</span><br><span class=\"line\">connection-close-rate: 每秒连接关闭率</span><br><span class=\"line\">connection-creation-rate: 每秒新建连接率</span><br><span class=\"line\">network-io-rate: 平均每秒IO次数（读取或写入）</span><br><span class=\"line\">outgoing-byte-rat: 平均每秒向服务器发送的字节数</span><br><span class=\"line\">request-rate: 平均每秒发送的请求数</span><br><span class=\"line\">incoming-byte-rate: 每秒读取字节数</span><br><span class=\"line\">response-rate: 每秒收到的回复</span><br><span class=\"line\">select-rate: IO切换次数</span><br><span class=\"line\">io-wait-ratio: IO线程等待时间</span><br><span class=\"line\">connection-count: 当前活跃连接数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### broker</span><br><span class=\"line\">outgoing-byte-rate: 平均每秒发送字节数</span><br><span class=\"line\">request-rate: 平均每秒请求数</span><br><span class=\"line\">request-size-avg: 所有请求的平均大小</span><br><span class=\"line\">request-latency-avg: 平均请求时间(ms)</span><br><span class=\"line\">response-rate: 每秒收到的响应数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### producer</span><br><span class=\"line\">waiting-threads: 缓存区排队的用户阻塞线程数</span><br><span class=\"line\">buffer-available-bytes: 可用内存字节数</span><br><span class=\"line\">batch-size-avg: 每个分区每次请求发送的平均字节数</span><br><span class=\"line\">compression-rate-avg: 批量记录平均压缩率</span><br><span class=\"line\">record-queue-time-avg: 批量记录耗费的平均时间（ms）</span><br><span class=\"line\">request-latency-avg: 平均请求时间（ms）</span><br><span class=\"line\">record-send-rate: 每秒发送的平均次数</span><br><span class=\"line\">record-retry-rate: 每秒重试发送次数</span><br><span class=\"line\">record-error-rate: 每秒错误数量次数</span><br><span class=\"line\">requests-in-flight: 目前等待响应的请求数量</span><br><span class=\"line\">metadata-age: 当前生产者数据使用周期（s）</span><br><span class=\"line\">    </span><br><span class=\"line\">#### consumer</span><br><span class=\"line\">##### Consumer Group</span><br><span class=\"line\">commit-latency-avg: 提交请求所用的平均时间</span><br><span class=\"line\">commit-rate: 每秒提交调用次数</span><br><span class=\"line\">assigned-partitions: 当前分配给该消费者的分区数（可选）</span><br><span class=\"line\">heartbeat-rate: 平均每秒心跳数</span><br><span class=\"line\">join-time-avg: 群组重新加入的平均时间</span><br><span class=\"line\">join-rate: 每秒连接组的数量</span><br><span class=\"line\">sync-time-avg: 群组同步所需的平均时间</span><br><span class=\"line\">sync-rate: 每秒同步的组数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### consumer fetch</span><br><span class=\"line\">fetch-size-avg: 每次请求获取的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: 每秒消耗的平均字节数</span><br><span class=\"line\">fetch-latency-avg: 请求所用的平均时间</span><br><span class=\"line\">fetch-rate: 每秒提取请求数</span><br><span class=\"line\">records-lag-max: 分区中记录的最大滞后数量</span><br><span class=\"line\">    </span><br><span class=\"line\">##### topic-level fetch</span><br><span class=\"line\">fetch-size-avg: topic请求的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: topic每秒平均消耗的字节数</span><br><span class=\"line\"></span><br><span class=\"line\">#### streams</span><br><span class=\"line\">##### Thread</span><br><span class=\"line\">[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">[commit|poll|process|punctuate]-rate: 平均每秒请求数</span><br><span class=\"line\">task-created-rate: 每秒新建任务数</span><br><span class=\"line\">task-closed-rate: 每秒关闭任务数</span><br><span class=\"line\">skipped-records-rate: 每秒跳过记录数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### Task</span><br><span class=\"line\">commit-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">commit-rate: 每秒提交的平均次数</span><br><span class=\"line\"></span><br><span class=\"line\">##### Processor Node</span><br><span class=\"line\">forward-rate: 每秒从源节点向下游转发的平均速率</span><br><span class=\"line\"></span><br><span class=\"line\">##### State Store </span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）</span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度</span><br><span class=\"line\"></span><br><span class=\"line\">#### others</span><br><span class=\"line\">GC、CPU、IO等</span><br><span class=\"line\"></span><br><span class=\"line\">### Monitoring实现</span><br><span class=\"line\">#### 方式一：</span><br><span class=\"line\">1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出</span><br><span class=\"line\">2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列</span><br><span class=\"line\">3.storm消费数据进行分析计算</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>需多依赖<br><dependency><br>    <groupId>io.dropwizard.metrics</groupId><br>    <artifactId>metrics-servlets</artifactId><br>    <version>3.1.0</version><br></dependency></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 方式二：</span><br><span class=\"line\">1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果</span><br><span class=\"line\">2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka</span><br><span class=\"line\">3.storm消费对应kafka数据，再进行分析计算</span><br><span class=\"line\"></span><br><span class=\"line\">Pom依赖：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n            </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n            <exclusion>\n                <groupId>com.sun.jdmk</groupId>\n                <artifactId>jmxtools</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>javax.jms</groupId>\n                <artifactId>jms</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n    <dependency>\n           <groupId>io.dropwizard.metrics</groupId>\n           <artifactId>metrics-core</artifactId>\n           <version>3.1.0</version>\n    </dependency>\n```\n\n<h3 id=\"Kafka监控工具\"><a href=\"#Kafka监控工具\" class=\"headerlink\" title=\"Kafka监控工具\"></a>Kafka监控工具</h3><h4 id=\"KafkaOffsetMonitor\"><a href=\"#KafkaOffsetMonitor\" class=\"headerlink\" title=\"KafkaOffsetMonitor\"></a>KafkaOffsetMonitor</h4><blockquote>\n<p>是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全<br>可以对consumer消费情况进行监控，并能列出每个consumer的offset数据<br>可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）<br>可以查看每个consumser group列表信息<br>可以查看topic的历史消费信息<br><a href=\"https://github.com/quantifind/KafkaOffsetMonitor\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-web-console\"><a href=\"#kafka-web-console\" class=\"headerlink\" title=\"kafka-web-console\"></a>kafka-web-console</h4><blockquote>\n<p>也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。<br>可以查看brokers kafka集群信息<br>可以查看每个topic的Partition，logsize，分区leader等信息<br>可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息<br>可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表<br>控制台还提供了RAML中描述的JSON API<br><a href=\"https://github.com/claudemamo/kafka-web-console\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-manger\"><a href=\"#kafka-manger\" class=\"headerlink\" title=\"kafka-manger\"></a>kafka-manger</h4><blockquote>\n<p>是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况<br>可以选择你要运行的副本<br>可以基于当前分区状况重新分配生成分区<br>可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)<br>可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除<br>可以为已存在的topic增加分区，更新配置<br>可以支持多个topic批量重分区，选择partition broker位置等<br>可以启用JMX轮询代理，以及broker、metrics主题等级<br>可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者<br><a href=\"https://github.com/yahoo/kafka-manager\">源码地址</a></p>\n</blockquote>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h2><p><strong>欢迎大家共同讨论、分享</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.</p>\n</blockquote>\n<h2 id=\"Kafka-metrics\"><a href=\"#Kafka-metrics\" class=\"headerlink\" title=\"Kafka metrics\"></a>Kafka metrics</h2><p>Kafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。<br>Yammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。<br>Yammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。<br>因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。</p>\n<h3 id=\"metrics收集\"><a href=\"#metrics收集\" class=\"headerlink\" title=\"metrics收集\"></a>metrics收集</h3><h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final MetricRegistry metrics &#x3D; new MetricRegistry();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Gauges\"><a href=\"#Gauges\" class=\"headerlink\" title=\"Gauges\"></a>Gauges</h4><p>gauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueueManager &#123;</span><br><span class=\"line\">    private final Queue queue;</span><br><span class=\"line\">    public QueueManager(MetricRegistry metrics, String name) &#123;</span><br><span class=\"line\">        this.queue &#x3D; new Queue();</span><br><span class=\"line\">        &#x2F;&#x2F; name(QueueManager.class, name, &quot;size&quot;) 中间按.分隔</span><br><span class=\"line\">        metrics.register(MetricRegistry.name(QueueManager.class, name, &quot;size&quot;),</span><br><span class=\"line\">                         new Gauge&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                             @Override</span><br><span class=\"line\">                             public Integer getValue() &#123;</span><br><span class=\"line\">                                 return queue.size();</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h4><p>counter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Counter pendingJobs &#x3D; metrics.counter(name(QueueManager.class, &quot;pending-jobs&quot;));</span><br><span class=\"line\">public void addJob(Job job) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 自增</span><br><span class=\"line\">    pendingJobs.inc();</span><br><span class=\"line\">    queue.offer(job);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Job takeJob() &#123;</span><br><span class=\"line\">    pendingJobs.dec();</span><br><span class=\"line\">    return queue.take();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MetricRegistry.name(QueueManager.class, &quot;jobs&quot;, &quot;size&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Histograms\"><a href=\"#Histograms\" class=\"headerlink\" title=\"Histograms\"></a>Histograms</h4><p>histogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Histogram responseSizes &#x3D; metrics.histogram(name(RequestHandler.class, &quot;response-sizes&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 增加上报的值</span><br><span class=\"line\">    responseSizes.update(response.getContent().length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h4><p>Timer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Timer responses &#x3D; metrics.timer(name(RequestHandler.class, &quot;responses&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public String handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    final Timer.Context context &#x3D; responses.time();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 具体执行逻辑</span><br><span class=\"line\">        return &quot;OK&quot;;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Health-Checks\"><a href=\"#Health-Checks\" class=\"headerlink\" title=\"Health Checks\"></a>Health Checks</h4><p>主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final HealthCheckRegistry healthChecks &#x3D; new HealthCheckRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">public class DatabaseHealthCheck extends HealthCheck &#123;</span><br><span class=\"line\">    private final Database database;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DatabaseHealthCheck(Database database) &#123;</span><br><span class=\"line\">        this.database &#x3D; database;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public HealthCheck.Result check() throws Exception &#123;</span><br><span class=\"line\">        if (database.isConnected()) &#123;</span><br><span class=\"line\">            return HealthCheck.Result.healthy();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return HealthCheck.Result.unhealthy(&quot;Cannot connect to &quot; + database.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">healthChecks.register(&quot;postgres&quot;, new DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Metrics-Annotation\"><a href=\"#Metrics-Annotation\" class=\"headerlink\" title=\"Metrics Annotation\"></a>Metrics Annotation</h4><p>注解方式，简单的实现统计某个方法、某个值的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">* 统计调用的次数和时间</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@Timed</span><br><span class=\"line\">public void call() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\">* 统计登陆的次数</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">@Counted</span><br><span class=\"line\">public void userLogin()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;other</span><br><span class=\"line\">@CachedGauge @Gauge @ExceptionMetered @Metered @Metric</span><br><span class=\"line\">&#96;&#96;&#96; </span><br><span class=\"line\"></span><br><span class=\"line\">### metrics上报</span><br><span class=\"line\">#### ConsoleReporter</span><br><span class=\"line\">对于简单指标的计算，可以使用定期向控制台报告：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)<br>                                    .convertRatesTo(TimeUnit.SECONDS)<br>                                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();<br>metrics.register(“jvm.mem”, new MemoryUsageGaugeSet());<br>metrics.register(“jvm.gc”, new GarbageCollectorMetricSet());</p>\n<p>reporter.start(5, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### JmxReporter</span><br><span class=\"line\">使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final JmxReporter reporter = JmxReporter.forRegistry(registry).build();<br>reporter.start();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### CsvReporter</span><br><span class=\"line\">对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final CsvReporter reporter = CsvReporter.forRegistry(registry)<br>                                        .formatFor(Locale.US)<br>                                        .convertRatesTo(TimeUnit.SECONDS)<br>                                        .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                        .build(new File(“~/projects/data/“));<br>reporter.start(1, TimeUnit.SECONDS);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### Slf4jReporter</span><br><span class=\"line\">可以将上报数据记录slf4j日志：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)<br>                                            .outputTo(LoggerFactory.getLogger(“com.example.metrics”))<br>                                            .convertRatesTo(TimeUnit.SECONDS)<br>                                            .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                            .build();<br>reporter.start(1, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### HTTP Reporter</span><br><span class=\"line\">需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>public class MyMetricsServletListener extends MetricsServlet.ContextListener {</p>\n<pre><code>public static final MetricRegistry metrics = new MetricRegistry();\n\n@Override\nprotected MetricRegistry getMetricRegistry() &#123;\n\n    metrics.register(&quot;jvm.mem&quot;, new MemoryUsageGaugeSet());\n    metrics.register(&quot;jvm.gc&quot;, new GarbageCollectorMetricSet());\n    System.out.println(&quot;&gt;&gt;.Listener success...&quot;);\n    return metrics;\n&#125;</code></pre>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>public class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {</p>\n<pre><code>public static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n@Override\nprotected HealthCheckRegistry getHealthCheckRegistry() &#123;\n\n    healthCheck.register(&quot;postgres&quot;, new TFHealthCheck(false));\n    return healthCheck;\n&#125;</code></pre>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyMetricsServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n\n&lt;servlet&gt;\n    &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;com.codahale.metrics.servlets.AdminServlet&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n   &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n   &lt;url-pattern&gt;/metrics/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[源码地址](https:&#x2F;&#x2F;github.com&#x2F;dropwizard&#x2F;metrics)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Kafka性能指标</span><br><span class=\"line\">#### kafka.server</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;MessagesInPerSec: 每秒消息量</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;BytesInPerSec: 每秒输入字节数</span><br><span class=\"line\">BrokerTopicMetrics,name&#x3D;BytesOutPerSec: 每秒输出字节数</span><br><span class=\"line\">ReplicaManager,name&#x3D;UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|&lt;|all replicas|</span><br><span class=\"line\">ReplicaManager,name&#x3D;PartitionCount: 分区数</span><br><span class=\"line\">ReplicaManager,name&#x3D;LeaderCount: Leader副本数</span><br><span class=\"line\">ReplicaManager,name&#x3D;IsrShrinksPerSec: ISR回退</span><br><span class=\"line\">ReplicaManager,name&#x3D;IsrExpandsPerSec: ISR超前 value is 0</span><br><span class=\"line\">ReplicaFetcherManager,name&#x3D;MaxLag,clientId&#x3D;Replica: 滞后follower和leader的最大消息长度</span><br><span class=\"line\">FetcherLagMetrics,name&#x3D;ConsumerLag,clientId&#x3D;([-.\\w]+),topic&#x3D;([-.\\w]+),partition&#x3D;([0-9]+): 滞后follower的消息长度</span><br><span class=\"line\">DelayedOperationPurgatory,name&#x3D;PurgatorySize,delayedOperation&#x3D;Produce: producer等待请求大小</span><br><span class=\"line\">DelayedOperationPurgatory,name&#x3D;PurgatorySize,delayedOperation&#x3D;Fetch: 获取等待请求大小</span><br><span class=\"line\">KafkaRequestHandlerPool,name&#x3D;RequestHandlerAvgIdlePercent: 平均处理线程空闲时间</span><br><span class=\"line\"></span><br><span class=\"line\">#### kafka.network</span><br><span class=\"line\">kafka.network:type&#x3D;RequestMetrics,name&#x3D;$1,request&#x3D;&#123;Produce|FetchConsumer|FetchFollower&#125;</span><br><span class=\"line\">RequestsPerSec: 每秒请求量</span><br><span class=\"line\">TotalTimeMs: 请求总时间</span><br><span class=\"line\">RequestQueueTimeMs: 请求队列等待时间</span><br><span class=\"line\">LocalTimeMs: 请求leader处理时间</span><br><span class=\"line\">RemoteTimeMs: 请求follower等待时间</span><br><span class=\"line\">ResponseQueueTimeMs: 请求队列等待响应时间</span><br><span class=\"line\">ResponseSendTimeMs: 请求响应发送时间</span><br><span class=\"line\">kafka.network:type&#x3D;SocketServer,name&#x3D;NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间</span><br><span class=\"line\">    </span><br><span class=\"line\">#### kafka.controller</span><br><span class=\"line\">KafkaController,name&#x3D;ActiveControllerCount: 活跃broker数量</span><br><span class=\"line\">ControllerStats,name&#x3D;LeaderElectionRateAndTimeMs: leader选举率</span><br><span class=\"line\">ControllerStats,name&#x3D;UncleanLeaderElectionsPerSec: Unclean leader选举率</span><br><span class=\"line\"></span><br><span class=\"line\">#### common</span><br><span class=\"line\">connection-close-rate: 每秒连接关闭率</span><br><span class=\"line\">connection-creation-rate: 每秒新建连接率</span><br><span class=\"line\">network-io-rate: 平均每秒IO次数（读取或写入）</span><br><span class=\"line\">outgoing-byte-rat: 平均每秒向服务器发送的字节数</span><br><span class=\"line\">request-rate: 平均每秒发送的请求数</span><br><span class=\"line\">incoming-byte-rate: 每秒读取字节数</span><br><span class=\"line\">response-rate: 每秒收到的回复</span><br><span class=\"line\">select-rate: IO切换次数</span><br><span class=\"line\">io-wait-ratio: IO线程等待时间</span><br><span class=\"line\">connection-count: 当前活跃连接数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### broker</span><br><span class=\"line\">outgoing-byte-rate: 平均每秒发送字节数</span><br><span class=\"line\">request-rate: 平均每秒请求数</span><br><span class=\"line\">request-size-avg: 所有请求的平均大小</span><br><span class=\"line\">request-latency-avg: 平均请求时间(ms)</span><br><span class=\"line\">response-rate: 每秒收到的响应数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### producer</span><br><span class=\"line\">waiting-threads: 缓存区排队的用户阻塞线程数</span><br><span class=\"line\">buffer-available-bytes: 可用内存字节数</span><br><span class=\"line\">batch-size-avg: 每个分区每次请求发送的平均字节数</span><br><span class=\"line\">compression-rate-avg: 批量记录平均压缩率</span><br><span class=\"line\">record-queue-time-avg: 批量记录耗费的平均时间（ms）</span><br><span class=\"line\">request-latency-avg: 平均请求时间（ms）</span><br><span class=\"line\">record-send-rate: 每秒发送的平均次数</span><br><span class=\"line\">record-retry-rate: 每秒重试发送次数</span><br><span class=\"line\">record-error-rate: 每秒错误数量次数</span><br><span class=\"line\">requests-in-flight: 目前等待响应的请求数量</span><br><span class=\"line\">metadata-age: 当前生产者数据使用周期（s）</span><br><span class=\"line\">    </span><br><span class=\"line\">#### consumer</span><br><span class=\"line\">##### Consumer Group</span><br><span class=\"line\">commit-latency-avg: 提交请求所用的平均时间</span><br><span class=\"line\">commit-rate: 每秒提交调用次数</span><br><span class=\"line\">assigned-partitions: 当前分配给该消费者的分区数（可选）</span><br><span class=\"line\">heartbeat-rate: 平均每秒心跳数</span><br><span class=\"line\">join-time-avg: 群组重新加入的平均时间</span><br><span class=\"line\">join-rate: 每秒连接组的数量</span><br><span class=\"line\">sync-time-avg: 群组同步所需的平均时间</span><br><span class=\"line\">sync-rate: 每秒同步的组数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### consumer fetch</span><br><span class=\"line\">fetch-size-avg: 每次请求获取的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: 每秒消耗的平均字节数</span><br><span class=\"line\">fetch-latency-avg: 请求所用的平均时间</span><br><span class=\"line\">fetch-rate: 每秒提取请求数</span><br><span class=\"line\">records-lag-max: 分区中记录的最大滞后数量</span><br><span class=\"line\">    </span><br><span class=\"line\">##### topic-level fetch</span><br><span class=\"line\">fetch-size-avg: topic请求的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: topic每秒平均消耗的字节数</span><br><span class=\"line\"></span><br><span class=\"line\">#### streams</span><br><span class=\"line\">##### Thread</span><br><span class=\"line\">[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">[commit|poll|process|punctuate]-rate: 平均每秒请求数</span><br><span class=\"line\">task-created-rate: 每秒新建任务数</span><br><span class=\"line\">task-closed-rate: 每秒关闭任务数</span><br><span class=\"line\">skipped-records-rate: 每秒跳过记录数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### Task</span><br><span class=\"line\">commit-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">commit-rate: 每秒提交的平均次数</span><br><span class=\"line\"></span><br><span class=\"line\">##### Processor Node</span><br><span class=\"line\">forward-rate: 每秒从源节点向下游转发的平均速率</span><br><span class=\"line\"></span><br><span class=\"line\">##### State Store </span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）</span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度</span><br><span class=\"line\"></span><br><span class=\"line\">#### others</span><br><span class=\"line\">GC、CPU、IO等</span><br><span class=\"line\"></span><br><span class=\"line\">### Monitoring实现</span><br><span class=\"line\">#### 方式一：</span><br><span class=\"line\">1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出</span><br><span class=\"line\">2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列</span><br><span class=\"line\">3.storm消费数据进行分析计算</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>需多依赖<br><dependency><br>    <groupId>io.dropwizard.metrics</groupId><br>    <artifactId>metrics-servlets</artifactId><br>    <version>3.1.0</version><br></dependency></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 方式二：</span><br><span class=\"line\">1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果</span><br><span class=\"line\">2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka</span><br><span class=\"line\">3.storm消费对应kafka数据，再进行分析计算</span><br><span class=\"line\"></span><br><span class=\"line\">Pom依赖：</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n            </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n            <exclusion>\n                <groupId>com.sun.jdmk</groupId>\n                <artifactId>jmxtools</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>javax.jms</groupId>\n                <artifactId>jms</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n    <dependency>\n           <groupId>io.dropwizard.metrics</groupId>\n           <artifactId>metrics-core</artifactId>\n           <version>3.1.0</version>\n    </dependency>\n```\n\n<h3 id=\"Kafka监控工具\"><a href=\"#Kafka监控工具\" class=\"headerlink\" title=\"Kafka监控工具\"></a>Kafka监控工具</h3><h4 id=\"KafkaOffsetMonitor\"><a href=\"#KafkaOffsetMonitor\" class=\"headerlink\" title=\"KafkaOffsetMonitor\"></a>KafkaOffsetMonitor</h4><blockquote>\n<p>是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全<br>可以对consumer消费情况进行监控，并能列出每个consumer的offset数据<br>可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）<br>可以查看每个consumser group列表信息<br>可以查看topic的历史消费信息<br><a href=\"https://github.com/quantifind/KafkaOffsetMonitor\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-web-console\"><a href=\"#kafka-web-console\" class=\"headerlink\" title=\"kafka-web-console\"></a>kafka-web-console</h4><blockquote>\n<p>也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。<br>可以查看brokers kafka集群信息<br>可以查看每个topic的Partition，logsize，分区leader等信息<br>可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息<br>可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表<br>控制台还提供了RAML中描述的JSON API<br><a href=\"https://github.com/claudemamo/kafka-web-console\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-manger\"><a href=\"#kafka-manger\" class=\"headerlink\" title=\"kafka-manger\"></a>kafka-manger</h4><blockquote>\n<p>是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况<br>可以选择你要运行的副本<br>可以基于当前分区状况重新分配生成分区<br>可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)<br>可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除<br>可以为已存在的topic增加分区，更新配置<br>可以支持多个topic批量重分区，选择partition broker位置等<br>可以启用JMX轮询代理，以及broker、metrics主题等级<br>可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者<br><a href=\"https://github.com/yahoo/kafka-manager\">源码地址</a></p>\n</blockquote>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h2><p><strong>欢迎大家共同讨论、分享</strong></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckieakkf80001q4s6hj6tewdj","category_id":"ckieakkfd0002q4s6ct2f045c","_id":"ckieakkfg0005q4s60kscf5z0"}],"PostTag":[{"post_id":"ckieakkf80001q4s6hj6tewdj","tag_id":"ckieakkfe0003q4s6bc2a6ti5","_id":"ckieakkff0004q4s6fl6od5m8"}],"Tag":[{"name":"大数据 kafka","_id":"ckieakkfe0003q4s6bc2a6ti5"}]}}