{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"c2b485dad4a4fd9b237372c1c3140bf39dae5439","modified":1559488330555},{"_id":"source/README.md","hash":"17e22ff1f8de976ffa5d1f07c74802976efd3a4d","modified":1559488330555},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1574060643392},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1574060643397},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1574060643397},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1574060643397},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1574060643397},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1574060643392},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1574060643398},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1574060643403},{"_id":"themes/next/README.md","hash":"a0430372844df9caea6e9bf96492775ed42a4578","modified":1574060643397},{"_id":"themes/next/package.json","hash":"b7fd0a53c7cb4c40c6f236065bfed34e6188e786","modified":1574060643425},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1574060643391},{"_id":"themes/next/_config.yml","hash":"2340cd10350c0b9be1c1f0113ba8046c637123c8","modified":1574063916649},{"_id":"source/_posts/kafka_metrics.md","hash":"8aef1a6f5a4db3a274a15c7e42e17f8854ed44c8","modified":1559488330555},{"_id":"themes/next/.git/FETCH_HEAD","hash":"081f88a7b2a3924ce4bff68f93a4f2eaf52d6707","modified":1574063920001},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1574063916669},{"_id":"themes/next/.git/ORIG_HEAD","hash":"f165fce3ebf74e05ec3ac27ad4799d17e89f2ab3","modified":1574063920014},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1574060643385},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1574060638309},{"_id":"themes/next/.git/packed-refs","hash":"48246a57c12cfe4f18c036257641437198102b34","modified":1574060643381},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1574060643392},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"2a4ff75ccb91d9001032c08e22489096b850bf4f","modified":1574060643394},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1574060643394},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1574060643395},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1574060643395},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1574060643395},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1574060643395},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1574063916649},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1574060643395},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1574060643396},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1574060643396},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1574060643399},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1574060643399},{"_id":"themes/next/docs/DATA-FILES.md","hash":"d0d46cb265f0efceffce82214cd36d8b82ddce13","modified":1574060643399},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1574060643399},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1574060643399},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1574060643399},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1574063916650},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"199e9ef3cb5928af0fe801d03d2d1aeea704cea4","modified":1574060643400},{"_id":"themes/next/languages/de.yml","hash":"1b129c08abea18a0533b973d8d81bb8cdf4757f1","modified":1574063916651},{"_id":"themes/next/languages/default.yml","hash":"ed4c633c9bbf792edeb0923afe7071ef881f571d","modified":1574063916651},{"_id":"themes/next/languages/en.yml","hash":"ed4c633c9bbf792edeb0923afe7071ef881f571d","modified":1574063916651},{"_id":"themes/next/languages/es.yml","hash":"5d58eabdace2dda0ac2a1ec134dd53307ba558f6","modified":1574063916652},{"_id":"themes/next/languages/fa.yml","hash":"5096f3926d8ee8de774b2f4635cc6dfe15e5027b","modified":1574063916652},{"_id":"themes/next/languages/fr.yml","hash":"c62b46c6958650773475e161f0c22a7416923ea9","modified":1574063916653},{"_id":"themes/next/languages/hu.yml","hash":"030788cbed906d686f84b874853278379564f8c3","modified":1574063916653},{"_id":"themes/next/languages/id.yml","hash":"76c16e3333c0cfb67f7a6edb35b3cca0ae691c47","modified":1574063916654},{"_id":"themes/next/languages/it.yml","hash":"b9916c4726a9e866fa6cc8c3b30e57e9f453be4b","modified":1574063916654},{"_id":"themes/next/languages/ko.yml","hash":"432ef2f303734504ec35d2fb06094c2df6edae9c","modified":1574063916655},{"_id":"themes/next/languages/ja.yml","hash":"9dfc048c0b9b890ee566ce1f8e815f159bf08a48","modified":1574063916654},{"_id":"themes/next/languages/nl.yml","hash":"e3ab0efc2af598e235e3a9e7c34ef270e191253f","modified":1574063916655},{"_id":"themes/next/languages/pt-BR.yml","hash":"ccbc616e498334ae70fbd5f874b8b956acfcf288","modified":1574063916655},{"_id":"themes/next/languages/pt.yml","hash":"6d13eb616547006cd151b78256b878b2832b7130","modified":1574063916655},{"_id":"themes/next/languages/ru.yml","hash":"45bfcee9ab4dc7c0ae64218f806d8f65399e2c24","modified":1574063916656},{"_id":"themes/next/languages/tr.yml","hash":"d7af0671d965e49dd6de1e4c3afd50e89843ca4a","modified":1574063916656},{"_id":"themes/next/languages/uk.yml","hash":"398467fd2904e03b0f4c256888fb480ee3f88f13","modified":1574063916656},{"_id":"themes/next/languages/vi.yml","hash":"ff3c6d906bc22e65b6862c5ed017038f99f64112","modified":1574063916657},{"_id":"themes/next/languages/zh-CN.yml","hash":"f7b5981e911ec37b6ed5b16910a680f0e49de062","modified":1574063916657},{"_id":"themes/next/languages/zh-HK.yml","hash":"10451f308b62cfffed09329feedc78651bd2a16f","modified":1574063916657},{"_id":"themes/next/languages/zh-TW.yml","hash":"4420d2457b1153f37799dc20f1ee72cf1bade70e","modified":1574063916658},{"_id":"themes/next/layout/_layout.swig","hash":"512bdf6787b5d9fb1d40b126b0fa8e6f1018d1cd","modified":1574060643407},{"_id":"themes/next/layout/archive.swig","hash":"59155648f6306888077d1f1d635f63177b36148d","modified":1574060643423},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1574060643424},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1574060643424},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1574060643424},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1574060643424},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1574060643425},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1574060643434},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"838201a0284e90843cd8e762e290c9bd7f10e993","modified":1574063916648},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1574060643398},{"_id":"themes/next/.git/index","hash":"e0543ec65a01e4f6d93042dd453cfadf45435595","modified":1574063920064},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1574060638310},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1574060638311},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1574060638312},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1574060638310},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1574060638312},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1574060638312},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1574060638310},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1574060638311},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1574060638311},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1574060638309},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1574060638312},{"_id":"themes/next/.git/logs/HEAD","hash":"91a211850660bb9582b934685bb8475dabee8abc","modified":1574063916669},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"a0601577b77b8ad89742dc99f98edebf9cc45c10","modified":1574060643393},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6d79701dd0bb3757722650d9df30eeaacd83344e","modified":1574060643394},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"bf8b10715f5529cc6997501d821307895710ba58","modified":1574060643394},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"35a9e1469962a9a163abd0b83677a412516272ef","modified":1574060643394},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"2665f6a9d72090f9452a8811544ff2596e8899be","modified":1574060643400},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1574060643400},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1574060643400},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1574060643401},{"_id":"themes/next/docs/ru/README.md","hash":"7302b2e5318c0c13e6484aa6487be29599ebc2b2","modified":1574060643400},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"ebacdc94f6f9724a7c6ef7c3cdde41ff7c37931a","modified":1574060643401},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"3b4dbf0d2ca12ab442b7e0e227769ce100b8a444","modified":1574060643401},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"264d131b8865bae069f8e4d78a33a0f59d28e36b","modified":1574060643402},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1574060643402},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"2d60a18340c9260cd4dc81fe8acc7983d6b2d011","modified":1574063916651},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"3ef324cee2761da762eaa5d8d9b9f9601dc264bc","modified":1574063916650},{"_id":"themes/next/docs/zh-CN/README.md","hash":"1766bd2e528ec148d3c5dd55e6be55449fcda94e","modified":1574060643402},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"8109a531d3a7f5a306e36d4304c11f0c7c180c87","modified":1574060643402},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1574060643407},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1574063916658},{"_id":"themes/next/layout/_macro/post.swig","hash":"73659d188030dbc0e0efb939118dc08b46dd430d","modified":1574063916658},{"_id":"themes/next/layout/_partials/comments.swig","hash":"3a72e3d72980fa0944008b36b284b044d0e84b2a","modified":1574063916659},{"_id":"themes/next/layout/_partials/footer.swig","hash":"434a4979c376c1ff27380c778d0261fea8d0a0a4","modified":1574063916659},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"b9d3f6534efb9e637ac46318fa07c2e5607bf830","modified":1574060643411},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1574060643414},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1574060643418},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1574060643420},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1574060643419},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1574063916661},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1574060643415},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1574060643415},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1574060643415},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1574060643416},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1574060643417},{"_id":"themes/next/scripts/events/index.js","hash":"ac2945693791e62a3046248f2a511afadcaebc16","modified":1574060643425},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1574060643430},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1574063916661},{"_id":"themes/next/scripts/filters/locals.js","hash":"2601d05d44ad2b59370477cb8f61dd95898a1a9c","modified":1574063916662},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1574060643432},{"_id":"themes/next/scripts/filters/post.js","hash":"3c1e483c2c4a1c5a2f9a99b81ce0fda5fd21926b","modified":1574060643432},{"_id":"themes/next/scripts/helpers/engine.js","hash":"b357cbc5d5b39b1bb5221149e7d358135a7ba56d","modified":1574060643433},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1574060643434},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"e60e6c0aaa979d42b01685ba2a03a76fa6e059e2","modified":1574060643434},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1574060643435},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1574060643435},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1574060643435},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8f86694a57d30685c4ced381f1ed09e8114dbb6e","modified":1574063916662},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1574060643436},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1574060643436},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1574060643436},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1574060643436},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1574060643436},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1574060643437},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1574060638310},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1574060643454},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1574060643457},{"_id":"themes/next/source/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1574060643457},{"_id":"themes/next/source/js/local-search.js","hash":"fda0f761ae20577f22c1528dde7ae059368fe9a8","modified":1574060643457},{"_id":"themes/next/source/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1574063916665},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1574063916666},{"_id":"themes/next/source/js/utils.js","hash":"1ce0d090ac5e3054f16c0f8512486816139f6176","modified":1574063916666},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1574060643454},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1574060643455},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1574060643455},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1574060643455},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1574060643455},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1574060643455},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1574060643456},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1574060643456},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1574060643456},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1574060643456},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1574060643456},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1574060643456},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1574060643456},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1574060643456},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1574060643455},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1574060643458},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1574060643449},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1574060643449},{"_id":"themes/next/.git/refs/heads/master","hash":"f165fce3ebf74e05ec3ac27ad4799d17e89f2ab3","modified":1574060643384},{"_id":"themes/next/.git/refs/heads/tag-v7.5.0","hash":"09eaf03f732345d4bed118f4d384ffa26d8fb457","modified":1574063894475},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"f5d2c5a3421ae52888be62e2c837459d1175cc93","modified":1574060643408},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"26ede4df10013e2876c06738daee2dfaadfb3acc","modified":1574063916659},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1574060643409},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1574060643409},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"ff33b5797f5e4b5cbcb3c222c17bc636c6b88df6","modified":1574060643409},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d488664bc16608b5f829f959c2058b4381be244a","modified":1574060643410},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1574060643410},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1574060643411},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"becfa683c3e5409e20cdb7b1dc8a6db331bddefe","modified":1574060643411},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1574060643411},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1574060643412},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1574063916660},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1574060643413},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1574060643413},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1574060643413},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"d4f94b643ac87d4d858cd8a6f70e030613f98b48","modified":1574063916660},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1574060643417},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"194201cce870c1af6f5123a62cb766cd24e46217","modified":1574060643417},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1574060643417},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1574060643417},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1574060643419},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1574060643420},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1574060643420},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1574060643418},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"fe3cdd70224bd0c8171513a5dfed7b85deb7f23d","modified":1574060643418},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"9719cb5858896aef86c2e0bec0ace259936680c4","modified":1574060643418},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"8063f65cdaae80840fcf427b875ae606f678dfa5","modified":1574060643419},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1574060643419},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"a9c8e7987b63b9ef66e47b966aea05ac77ff920a","modified":1574060643419},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1574060643418},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1574060643418},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1574060643420},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1574060643421},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1574060643421},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1574060643421},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1574060643422},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"67e63c25d509f02a6057ee9724f1b6efd647f72f","modified":1574060643422},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1574060643422},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"7f2941d119abca6627561fb010dad96fa48d2092","modified":1574060643422},{"_id":"themes/next/layout/_third-party/statistics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1574060643422},{"_id":"themes/next/layout/_third-party/statistics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1574060643423},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1574060643423},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1574060643423},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"246ff123cbaa507f23514c0c51c6cc006685898e","modified":1574060643415},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1574060643416},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1574060643416},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1574060643416},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1574060643416},{"_id":"themes/next/scripts/events/lib/config.js","hash":"246e55d48f2f3ef510c11594c7c08ddb93ac0928","modified":1574060643425},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1574060643426},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d84b7606df9d52d3296bd98482ede39fad55d8c3","modified":1574063916661},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1fc2a94b94108175848ba9541d05898c071386d0","modified":1574060643426},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1574060643427},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1574060643427},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"d2ce60980fc148bfb877981aabd07bf45d2cdcda","modified":1574060643427},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"c081166868e6428a07c51c5674b86b7a4cc9c2a8","modified":1574060643428},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1574060643428},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1574060643429},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"5201cd09a5e263282ccbf205f07d46f4c6d3f700","modified":1574060643430},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1574060643454},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1574060643454},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1574060643454},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1574060643454},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e76e0e411c9892004e73e1bb7b3c1cca2191eedc","modified":1574060643454},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1574060643449},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1574060643449},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1574060643449},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1574060643457},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"dccbb1be3938050e13277251ab5d88c736edf396","modified":1574060643458},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1574060643458},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1574060643459},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1574060643459},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1574060643459},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1574060643459},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1574060643463},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"fbec9f77139e1f300509c38446416b4b26350cfa","modified":1574060643410},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1574060643462},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"62f2871f0df55969399c5b47591cbbf536b56a10","modified":1574060643384},{"_id":"themes/next/.git/logs/refs/heads/tag-v7.5.0","hash":"562e547b43b563446a136b6297a50bb61b5dc442","modified":1574063894475},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1574060643383},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1574060643437},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1574060643438},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1574060643438},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1574060643441},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1574060643441},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"08c2679a31f195940fe1e6c76e64799fb21cda99","modified":1574060643450},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1574063916665},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1574060643450},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1574060643451},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1574060643451},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1574060643452},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1574060643452},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"c0ed534696ed86560c95ab2a3541b2b42a41ed39","modified":1574060643453},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c59226767164285d6708d8762f937f93bab264ca","modified":1574060643453},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1574060643453},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1574060643453},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1574060643451},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1574060643451},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"316ee13fc26d327c8862c2455211144c180cf9c1","modified":1574060643451},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1574060643452},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1574060643452},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1574060643452},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"29d865f18f904b23a182d2f3c1e077e663d5874b","modified":1574063916663},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1574060643445},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1574060643445},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1574060643446},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1574060643446},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1574060643446},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1574063916664},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1574060643449},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1574060643443},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1574060643443},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1574060643460},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1574060643451},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1574060643459},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1574060643460},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1574060643462},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1574060643462},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"62f2871f0df55969399c5b47591cbbf536b56a10","modified":1574060643383},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1574060643438},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1574060643438},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1574060643439},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1574060643439},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1574060643439},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1574060643439},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1574060643439},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1574060643440},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"602a3c3d2785965b23412b5c219dfe74b5fb0844","modified":1574060643440},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"d557a0de91a428330b43cdae9f1ec7167d24e2e4","modified":1574060643440},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1574063916662},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2e2a09dddd2a394a635bcefb6207b6cddcb784c7","modified":1574060643440},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1574063916662},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1574060643440},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1574060643440},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1574060643441},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1574060643441},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1574060643441},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1574060643441},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1574060643442},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1574063916663},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1574060643446},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1574063916664},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"ae13712e313aacfce989d97ed6cba0606c776fb3","modified":1574063916664},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1574060643446},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1574060643447},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"42a12c718b5832cd535a4631759376910c549d94","modified":1574063916664},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1574060643447},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"068b304be305fbfd0220276d56b93cefd968f0b6","modified":1574060643448},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1574060643448},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"0746320211c11e48e43c3446ac9767e5ffb60fd3","modified":1574063916665},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1574060643448},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"5528a755b180312d008054653633d857aeeb6780","modified":1574060643442},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1574060643442},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1574060643442},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1574060643443},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1574060643443},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1574060643443},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1574060643443},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b5ba1b3d5535ccf1e5df6f4cd8ee0147d7278be9","modified":1574060643443},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1574060643444},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1574060643444},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1574060643444},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"cc4beedb56c37246d9e0f74e4b2cc34231dabc65","modified":1574060643444},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1574060643444},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1574060643444},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1574060643444},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1574060643445},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"eaa62b5de4ddb18378c1a4049a172d4fa4b655d8","modified":1574060643445},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1574060643445},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1574063916663},{"_id":"themes/next/.git/objects/pack/pack-255f3f65984942e4618e37f0559499e7d5082913.idx","hash":"5aa4c46f1bd7008328a4a6e825395dad67bf2378","modified":1574060643372},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1574060643461},{"_id":"themes/next/.git/objects/pack/pack-255f3f65984942e4618e37f0559499e7d5082913.pack","hash":"0bd7c8d9b5f20b3d9c16baf6fed670e722ed5138","modified":1574060643369}],"Category":[{"name":"kafka","_id":"ck347mp4600023us67dbccefd"}],"Data":[],"Page":[{"_content":"# woozhijun.github.io\n","source":"README.md","raw":"# woozhijun.github.io\n","date":"2019-06-02T15:12:10.555Z","updated":"2019-06-02T15:12:10.555Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"ck347mp1l00003us67umw0v5z","content":"<h1 id=\"woozhijun-github-io\"><a href=\"#woozhijun-github-io\" class=\"headerlink\" title=\"woozhijun.github.io\"></a>woozhijun.github.io</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"woozhijun-github-io\"><a href=\"#woozhijun-github-io\" class=\"headerlink\" title=\"woozhijun.github.io\"></a>woozhijun.github.io</h1>"}],"Post":[{"title":"洞悉 Kafka metrics","_content":"\n## 摘要\n> 本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.\n\n## Kafka metrics\nKafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。\nYammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。\nYammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。\n因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。\n\n### metrics收集\n#### 注册\n\n```\nfinal MetricRegistry metrics = new MetricRegistry();\n```\n\n#### Gauges\ngauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：\n\n```\npublic class QueueManager {\n    private final Queue queue;\n    public QueueManager(MetricRegistry metrics, String name) {\n        this.queue = new Queue();\n        // name(QueueManager.class, name, \"size\") 中间按.分隔\n        metrics.register(MetricRegistry.name(QueueManager.class, name, \"size\"),\n                         new Gauge<Integer>() {\n                             @Override\n                             public Integer getValue() {\n                                 return queue.size();\n                             }\n                         });\n    }\n}\n```\n\n#### Counters\ncounter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：\n\n```\nprivate final Counter pendingJobs = metrics.counter(name(QueueManager.class, \"pending-jobs\"));\npublic void addJob(Job job) {\n    // 自增\n    pendingJobs.inc();\n    queue.offer(job);\n}\npublic Job takeJob() {\n    pendingJobs.dec();\n    return queue.take();\n}\n\nMetricRegistry.name(QueueManager.class, \"jobs\", \"size\")\n```\n\n#### Histograms\nhistogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值\n\n```\nprivate final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, \"response-sizes\"));\n\npublic void handleRequest(Request request, Response response) {\n    // 增加上报的值\n    responseSizes.update(response.getContent().length);\n}\n```\n\n#### Timers\nTimer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：\n\n```\nprivate final Timer responses = metrics.timer(name(RequestHandler.class, \"responses\"));\n\npublic String handleRequest(Request request, Response response) {\n    final Timer.Context context = responses.time();\n    try {\n        // 具体执行逻辑\n        return \"OK\";\n    } finally {\n        context.stop();\n    }\n}\n```\n\n#### Health Checks\n主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：\n\n```\nfinal HealthCheckRegistry healthChecks = new HealthCheckRegistry();\n\npublic class DatabaseHealthCheck extends HealthCheck {\n    private final Database database;\n\n    public DatabaseHealthCheck(Database database) {\n        this.database = database;\n    }\n\n    @Override\n    public HealthCheck.Result check() throws Exception {\n        if (database.isConnected()) {\n            return HealthCheck.Result.healthy();\n        } else {\n            return HealthCheck.Result.unhealthy(\"Cannot connect to \" + database.getUrl());\n        }\n    }\n}\n\nhealthChecks.register(\"postgres\", new DatabaseHealthCheck(database));\n```\n\n#### Metrics Annotation\n注解方式，简单的实现统计某个方法、某个值的数据：\n\n```\n/**\n* 统计调用的次数和时间\n*/\n@Timed\npublic void call() {\n}\n    \n/**\n* 统计登陆的次数\n*/\n@Counted\npublic void userLogin(){\n}\n\n//other\n@CachedGauge @Gauge @ExceptionMetered @Metered @Metric\n``` \n\n### metrics上报\n#### ConsoleReporter\n对于简单指标的计算，可以使用定期向控制台报告：\n\n```\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)\n\t\t\t\t                    .convertRatesTo(TimeUnit.SECONDS)\n\t\t\t\t                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();\nmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\nmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n                                                \nreporter.start(5, TimeUnit.MINUTES);\n```\n\n#### JmxReporter\n使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：\n\n```\nfinal JmxReporter reporter = JmxReporter.forRegistry(registry).build();\nreporter.start();\n```\n\n#### CsvReporter\n对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：\n\n```\nfinal CsvReporter reporter = CsvReporter.forRegistry(registry)\n                                        .formatFor(Locale.US)\n                                        .convertRatesTo(TimeUnit.SECONDS)\n                                        .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                        .build(new File(\"~/projects/data/\"));\nreporter.start(1, TimeUnit.SECONDS);\n```\n\n#### Slf4jReporter\n可以将上报数据记录slf4j日志：\n\n```\nfinal Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)\n                                            .outputTo(LoggerFactory.getLogger(\"com.example.metrics\"))\n                                            .convertRatesTo(TimeUnit.SECONDS)\n                                            .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                            .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n\n#### HTTP Reporter\n需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：\n\n```\npublic class MyMetricsServletListener extends MetricsServlet.ContextListener {\n\t\n\tpublic static final MetricRegistry metrics = new MetricRegistry();\n\n\t@Override\n\tprotected MetricRegistry getMetricRegistry() {\n\t\t\n\t\tmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\n\t\tmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n\t\tSystem.out.println(\">>.Listener success...\");\n\t\treturn metrics;\n\t}\n}\n```\n\n```\npublic class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {\n\n\tpublic static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n\t@Override\n\tprotected HealthCheckRegistry getHealthCheckRegistry() {\n\t\t\n\t\thealthCheck.register(\"postgres\", new TFHealthCheck(false));\n\t\treturn healthCheck;\n\t}\n}\n```\n\n```\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyMetricsServletListener</listener-class>\n\t</listener>\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener</listener-class>\n\t</listener>\n\t\n\t<servlet>\n        <servlet-name>metrics</servlet-name>\n        <servlet-class>com.codahale.metrics.servlets.AdminServlet</servlet-class>\n\t</servlet>\n\t<servlet-mapping>\n\t   <servlet-name>metrics</servlet-name>\n\t   <url-pattern>/metrics/*</url-pattern>\n\t</servlet-mapping>\n```\n\n[源码地址](https://github.com/dropwizard/metrics)\n\n\n### Kafka性能指标\n#### kafka.server\nBrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量\nBrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数\nBrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数\nReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|<|all replicas|\nReplicaManager,name=PartitionCount: 分区数\nReplicaManager,name=LeaderCount: Leader副本数\nReplicaManager,name=IsrShrinksPerSec: ISR回退\nReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0\nReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度\nFetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小\nKafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间\n\n#### kafka.network\nkafka.network:type=RequestMetrics,name=$1,request={Produce|FetchConsumer|FetchFollower}\nRequestsPerSec: 每秒请求量\nTotalTimeMs: 请求总时间\nRequestQueueTimeMs: 请求队列等待时间\nLocalTimeMs: 请求leader处理时间\nRemoteTimeMs: 请求follower等待时间\nResponseQueueTimeMs: 请求队列等待响应时间\nResponseSendTimeMs: 请求响应发送时间\nkafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间\n    \n#### kafka.controller\nKafkaController,name=ActiveControllerCount: 活跃broker数量\nControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率\nControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率\n\n#### common\nconnection-close-rate: 每秒连接关闭率\nconnection-creation-rate: 每秒新建连接率\nnetwork-io-rate: 平均每秒IO次数（读取或写入）\noutgoing-byte-rat: 平均每秒向服务器发送的字节数\nrequest-rate: 平均每秒发送的请求数\nincoming-byte-rate: 每秒读取字节数\nresponse-rate: 每秒收到的回复\nselect-rate: IO切换次数\nio-wait-ratio: IO线程等待时间\nconnection-count: 当前活跃连接数\n    \n#### broker\noutgoing-byte-rate: 平均每秒发送字节数\nrequest-rate: 平均每秒请求数\nrequest-size-avg: 所有请求的平均大小\nrequest-latency-avg: 平均请求时间(ms)\nresponse-rate: 每秒收到的响应数\n    \n#### producer\nwaiting-threads: 缓存区排队的用户阻塞线程数\nbuffer-available-bytes: 可用内存字节数\nbatch-size-avg: 每个分区每次请求发送的平均字节数\ncompression-rate-avg: 批量记录平均压缩率\nrecord-queue-time-avg: 批量记录耗费的平均时间（ms）\nrequest-latency-avg: 平均请求时间（ms）\nrecord-send-rate: 每秒发送的平均次数\nrecord-retry-rate: 每秒重试发送次数\nrecord-error-rate: 每秒错误数量次数\nrequests-in-flight: 目前等待响应的请求数量\nmetadata-age: 当前生产者数据使用周期（s）\n    \n#### consumer\n##### Consumer Group\ncommit-latency-avg: 提交请求所用的平均时间\ncommit-rate: 每秒提交调用次数\nassigned-partitions: 当前分配给该消费者的分区数（可选）\nheartbeat-rate: 平均每秒心跳数\njoin-time-avg: 群组重新加入的平均时间\njoin-rate: 每秒连接组的数量\nsync-time-avg: 群组同步所需的平均时间\nsync-rate: 每秒同步的组数\n    \n##### consumer fetch\nfetch-size-avg: 每次请求获取的平均字节数\nbytes-consumed-rate: 每秒消耗的平均字节数\nfetch-latency-avg: 请求所用的平均时间\nfetch-rate: 每秒提取请求数\nrecords-lag-max: 分区中记录的最大滞后数量\n    \n##### topic-level fetch\nfetch-size-avg: topic请求的平均字节数\nbytes-consumed-rate: topic每秒平均消耗的字节数\n\n#### streams\n##### Thread\n[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）\n[commit|poll|process|punctuate]-rate: 平均每秒请求数\ntask-created-rate: 每秒新建任务数\ntask-closed-rate: 每秒关闭任务数\nskipped-records-rate: 每秒跳过记录数\n    \n##### Task\ncommit-latency-avg: 平均执行时间（ms）\ncommit-rate: 每秒提交的平均次数\n\n##### Processor Node\nforward-rate: 每秒从源节点向下游转发的平均速率\n\n##### State Store \n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）\n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度\n\n#### others\nGC、CPU、IO等\n\n### Monitoring实现\n#### 方式一：\n1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出\n2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列\n3.storm消费数据进行分析计算\n\n```\n需多依赖\n<dependency>\n    <groupId>io.dropwizard.metrics</groupId>\n    <artifactId>metrics-servlets</artifactId>\n    <version>3.1.0</version>\n</dependency>\n```\n\n#### 方式二：\n1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果\n2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka\n3.storm消费对应kafka数据，再进行分析计算\n\nPom依赖：\n\n```\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n\t\t\t</exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>com.sun.jdmk</groupId>\n\t\t\t\t<artifactId>jmxtools</artifactId>\n\t\t\t</exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>javax.jms</groupId>\n\t\t\t\t<artifactId>jms</artifactId>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t       <groupId>io.dropwizard.metrics</groupId>\n\t       <artifactId>metrics-core</artifactId>\n\t       <version>3.1.0</version>\n\t</dependency>\n```\n\n### Kafka监控工具\n#### KafkaOffsetMonitor\n> 是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全\n> 可以对consumer消费情况进行监控，并能列出每个consumer的offset数据\n> 可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）\n> 可以查看每个consumser group列表信息\n> 可以查看topic的历史消费信息\n> [源码地址](https://github.com/quantifind/KafkaOffsetMonitor)\n    \n#### kafka-web-console\n> 也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。\n> 可以查看brokers kafka集群信息\n> 可以查看每个topic的Partition，logsize，分区leader等信息\n> 可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息\n> 可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表\n> 控制台还提供了RAML中描述的JSON API\n> [源码地址](https://github.com/claudemamo/kafka-web-console)\n\n#### kafka-manger\n> 是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况\n> 可以选择你要运行的副本\n> 可以基于当前分区状况重新分配生成分区\n> 可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)\n> 可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除\n> 可以为已存在的topic增加分区，更新配置\n> 可以支持多个topic批量重分区，选择partition broker位置等\n> 可以启用JMX轮询代理，以及broker、metrics主题等级\n> 可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者\n> [源码地址](https://github.com/yahoo/kafka-manager)\n\n## QA\n**欢迎大家共同讨论、分享**\n\n\n\n","source":"_posts/kafka_metrics.md","raw":"---\ntitle: 洞悉 Kafka metrics\ntags: 大数据 kafka\ncategory: kafka\n---\n\n## 摘要\n> 本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.\n\n## Kafka metrics\nKafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。\nYammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。\nYammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。\n因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。\n\n### metrics收集\n#### 注册\n\n```\nfinal MetricRegistry metrics = new MetricRegistry();\n```\n\n#### Gauges\ngauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：\n\n```\npublic class QueueManager {\n    private final Queue queue;\n    public QueueManager(MetricRegistry metrics, String name) {\n        this.queue = new Queue();\n        // name(QueueManager.class, name, \"size\") 中间按.分隔\n        metrics.register(MetricRegistry.name(QueueManager.class, name, \"size\"),\n                         new Gauge<Integer>() {\n                             @Override\n                             public Integer getValue() {\n                                 return queue.size();\n                             }\n                         });\n    }\n}\n```\n\n#### Counters\ncounter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：\n\n```\nprivate final Counter pendingJobs = metrics.counter(name(QueueManager.class, \"pending-jobs\"));\npublic void addJob(Job job) {\n    // 自增\n    pendingJobs.inc();\n    queue.offer(job);\n}\npublic Job takeJob() {\n    pendingJobs.dec();\n    return queue.take();\n}\n\nMetricRegistry.name(QueueManager.class, \"jobs\", \"size\")\n```\n\n#### Histograms\nhistogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值\n\n```\nprivate final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, \"response-sizes\"));\n\npublic void handleRequest(Request request, Response response) {\n    // 增加上报的值\n    responseSizes.update(response.getContent().length);\n}\n```\n\n#### Timers\nTimer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：\n\n```\nprivate final Timer responses = metrics.timer(name(RequestHandler.class, \"responses\"));\n\npublic String handleRequest(Request request, Response response) {\n    final Timer.Context context = responses.time();\n    try {\n        // 具体执行逻辑\n        return \"OK\";\n    } finally {\n        context.stop();\n    }\n}\n```\n\n#### Health Checks\n主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：\n\n```\nfinal HealthCheckRegistry healthChecks = new HealthCheckRegistry();\n\npublic class DatabaseHealthCheck extends HealthCheck {\n    private final Database database;\n\n    public DatabaseHealthCheck(Database database) {\n        this.database = database;\n    }\n\n    @Override\n    public HealthCheck.Result check() throws Exception {\n        if (database.isConnected()) {\n            return HealthCheck.Result.healthy();\n        } else {\n            return HealthCheck.Result.unhealthy(\"Cannot connect to \" + database.getUrl());\n        }\n    }\n}\n\nhealthChecks.register(\"postgres\", new DatabaseHealthCheck(database));\n```\n\n#### Metrics Annotation\n注解方式，简单的实现统计某个方法、某个值的数据：\n\n```\n/**\n* 统计调用的次数和时间\n*/\n@Timed\npublic void call() {\n}\n    \n/**\n* 统计登陆的次数\n*/\n@Counted\npublic void userLogin(){\n}\n\n//other\n@CachedGauge @Gauge @ExceptionMetered @Metered @Metric\n``` \n\n### metrics上报\n#### ConsoleReporter\n对于简单指标的计算，可以使用定期向控制台报告：\n\n```\nfinal ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)\n\t\t\t\t                    .convertRatesTo(TimeUnit.SECONDS)\n\t\t\t\t                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();\nmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\nmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n                                                \nreporter.start(5, TimeUnit.MINUTES);\n```\n\n#### JmxReporter\n使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：\n\n```\nfinal JmxReporter reporter = JmxReporter.forRegistry(registry).build();\nreporter.start();\n```\n\n#### CsvReporter\n对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：\n\n```\nfinal CsvReporter reporter = CsvReporter.forRegistry(registry)\n                                        .formatFor(Locale.US)\n                                        .convertRatesTo(TimeUnit.SECONDS)\n                                        .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                        .build(new File(\"~/projects/data/\"));\nreporter.start(1, TimeUnit.SECONDS);\n```\n\n#### Slf4jReporter\n可以将上报数据记录slf4j日志：\n\n```\nfinal Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)\n                                            .outputTo(LoggerFactory.getLogger(\"com.example.metrics\"))\n                                            .convertRatesTo(TimeUnit.SECONDS)\n                                            .convertDurationsTo(TimeUnit.MILLISECONDS)\n                                            .build();\nreporter.start(1, TimeUnit.MINUTES);\n```\n\n#### HTTP Reporter\n需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：\n\n```\npublic class MyMetricsServletListener extends MetricsServlet.ContextListener {\n\t\n\tpublic static final MetricRegistry metrics = new MetricRegistry();\n\n\t@Override\n\tprotected MetricRegistry getMetricRegistry() {\n\t\t\n\t\tmetrics.register(\"jvm.mem\", new MemoryUsageGaugeSet());\n\t\tmetrics.register(\"jvm.gc\", new GarbageCollectorMetricSet());\n\t\tSystem.out.println(\">>.Listener success...\");\n\t\treturn metrics;\n\t}\n}\n```\n\n```\npublic class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {\n\n\tpublic static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n\t@Override\n\tprotected HealthCheckRegistry getHealthCheckRegistry() {\n\t\t\n\t\thealthCheck.register(\"postgres\", new TFHealthCheck(false));\n\t\treturn healthCheck;\n\t}\n}\n```\n\n```\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyMetricsServletListener</listener-class>\n\t</listener>\n\t<listener>\n        <listener-class>com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener</listener-class>\n\t</listener>\n\t\n\t<servlet>\n        <servlet-name>metrics</servlet-name>\n        <servlet-class>com.codahale.metrics.servlets.AdminServlet</servlet-class>\n\t</servlet>\n\t<servlet-mapping>\n\t   <servlet-name>metrics</servlet-name>\n\t   <url-pattern>/metrics/*</url-pattern>\n\t</servlet-mapping>\n```\n\n[源码地址](https://github.com/dropwizard/metrics)\n\n\n### Kafka性能指标\n#### kafka.server\nBrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量\nBrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数\nBrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数\nReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|<|all replicas|\nReplicaManager,name=PartitionCount: 分区数\nReplicaManager,name=LeaderCount: Leader副本数\nReplicaManager,name=IsrShrinksPerSec: ISR回退\nReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0\nReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度\nFetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小\nDelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小\nKafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间\n\n#### kafka.network\nkafka.network:type=RequestMetrics,name=$1,request={Produce|FetchConsumer|FetchFollower}\nRequestsPerSec: 每秒请求量\nTotalTimeMs: 请求总时间\nRequestQueueTimeMs: 请求队列等待时间\nLocalTimeMs: 请求leader处理时间\nRemoteTimeMs: 请求follower等待时间\nResponseQueueTimeMs: 请求队列等待响应时间\nResponseSendTimeMs: 请求响应发送时间\nkafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间\n    \n#### kafka.controller\nKafkaController,name=ActiveControllerCount: 活跃broker数量\nControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率\nControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率\n\n#### common\nconnection-close-rate: 每秒连接关闭率\nconnection-creation-rate: 每秒新建连接率\nnetwork-io-rate: 平均每秒IO次数（读取或写入）\noutgoing-byte-rat: 平均每秒向服务器发送的字节数\nrequest-rate: 平均每秒发送的请求数\nincoming-byte-rate: 每秒读取字节数\nresponse-rate: 每秒收到的回复\nselect-rate: IO切换次数\nio-wait-ratio: IO线程等待时间\nconnection-count: 当前活跃连接数\n    \n#### broker\noutgoing-byte-rate: 平均每秒发送字节数\nrequest-rate: 平均每秒请求数\nrequest-size-avg: 所有请求的平均大小\nrequest-latency-avg: 平均请求时间(ms)\nresponse-rate: 每秒收到的响应数\n    \n#### producer\nwaiting-threads: 缓存区排队的用户阻塞线程数\nbuffer-available-bytes: 可用内存字节数\nbatch-size-avg: 每个分区每次请求发送的平均字节数\ncompression-rate-avg: 批量记录平均压缩率\nrecord-queue-time-avg: 批量记录耗费的平均时间（ms）\nrequest-latency-avg: 平均请求时间（ms）\nrecord-send-rate: 每秒发送的平均次数\nrecord-retry-rate: 每秒重试发送次数\nrecord-error-rate: 每秒错误数量次数\nrequests-in-flight: 目前等待响应的请求数量\nmetadata-age: 当前生产者数据使用周期（s）\n    \n#### consumer\n##### Consumer Group\ncommit-latency-avg: 提交请求所用的平均时间\ncommit-rate: 每秒提交调用次数\nassigned-partitions: 当前分配给该消费者的分区数（可选）\nheartbeat-rate: 平均每秒心跳数\njoin-time-avg: 群组重新加入的平均时间\njoin-rate: 每秒连接组的数量\nsync-time-avg: 群组同步所需的平均时间\nsync-rate: 每秒同步的组数\n    \n##### consumer fetch\nfetch-size-avg: 每次请求获取的平均字节数\nbytes-consumed-rate: 每秒消耗的平均字节数\nfetch-latency-avg: 请求所用的平均时间\nfetch-rate: 每秒提取请求数\nrecords-lag-max: 分区中记录的最大滞后数量\n    \n##### topic-level fetch\nfetch-size-avg: topic请求的平均字节数\nbytes-consumed-rate: topic每秒平均消耗的字节数\n\n#### streams\n##### Thread\n[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）\n[commit|poll|process|punctuate]-rate: 平均每秒请求数\ntask-created-rate: 每秒新建任务数\ntask-closed-rate: 每秒关闭任务数\nskipped-records-rate: 每秒跳过记录数\n    \n##### Task\ncommit-latency-avg: 平均执行时间（ms）\ncommit-rate: 每秒提交的平均次数\n\n##### Processor Node\nforward-rate: 每秒从源节点向下游转发的平均速率\n\n##### State Store \n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）\n[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度\n\n#### others\nGC、CPU、IO等\n\n### Monitoring实现\n#### 方式一：\n1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出\n2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列\n3.storm消费数据进行分析计算\n\n```\n需多依赖\n<dependency>\n    <groupId>io.dropwizard.metrics</groupId>\n    <artifactId>metrics-servlets</artifactId>\n    <version>3.1.0</version>\n</dependency>\n```\n\n#### 方式二：\n1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果\n2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka\n3.storm消费对应kafka数据，再进行分析计算\n\nPom依赖：\n\n```\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n\t\t\t</exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>com.sun.jdmk</groupId>\n\t\t\t\t<artifactId>jmxtools</artifactId>\n\t\t\t</exclusion>\n\t\t\t<exclusion>\n\t\t\t\t<groupId>javax.jms</groupId>\n\t\t\t\t<artifactId>jms</artifactId>\n\t\t\t</exclusion>\n\t\t</exclusions>\n\t</dependency>\n\t<dependency>\n\t       <groupId>io.dropwizard.metrics</groupId>\n\t       <artifactId>metrics-core</artifactId>\n\t       <version>3.1.0</version>\n\t</dependency>\n```\n\n### Kafka监控工具\n#### KafkaOffsetMonitor\n> 是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全\n> 可以对consumer消费情况进行监控，并能列出每个consumer的offset数据\n> 可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）\n> 可以查看每个consumser group列表信息\n> 可以查看topic的历史消费信息\n> [源码地址](https://github.com/quantifind/KafkaOffsetMonitor)\n    \n#### kafka-web-console\n> 也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。\n> 可以查看brokers kafka集群信息\n> 可以查看每个topic的Partition，logsize，分区leader等信息\n> 可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息\n> 可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表\n> 控制台还提供了RAML中描述的JSON API\n> [源码地址](https://github.com/claudemamo/kafka-web-console)\n\n#### kafka-manger\n> 是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况\n> 可以选择你要运行的副本\n> 可以基于当前分区状况重新分配生成分区\n> 可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)\n> 可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除\n> 可以为已存在的topic增加分区，更新配置\n> 可以支持多个topic批量重分区，选择partition broker位置等\n> 可以启用JMX轮询代理，以及broker、metrics主题等级\n> 可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者\n> [源码地址](https://github.com/yahoo/kafka-manager)\n\n## QA\n**欢迎大家共同讨论、分享**\n\n\n\n","slug":"kafka_metrics","published":1,"date":"2019-06-02T15:12:10.555Z","updated":"2019-06-02T15:12:10.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck347mp3p00013us6ggcygfhv","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.</p>\n</blockquote>\n<h2 id=\"Kafka-metrics\"><a href=\"#Kafka-metrics\" class=\"headerlink\" title=\"Kafka metrics\"></a>Kafka metrics</h2><p>Kafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。<br>Yammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。<br>Yammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。<br>因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。</p>\n<h3 id=\"metrics收集\"><a href=\"#metrics收集\" class=\"headerlink\" title=\"metrics收集\"></a>metrics收集</h3><h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final MetricRegistry metrics = new MetricRegistry();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Gauges\"><a href=\"#Gauges\" class=\"headerlink\" title=\"Gauges\"></a>Gauges</h4><p>gauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueueManager &#123;</span><br><span class=\"line\">    private final Queue queue;</span><br><span class=\"line\">    public QueueManager(MetricRegistry metrics, String name) &#123;</span><br><span class=\"line\">        this.queue = new Queue();</span><br><span class=\"line\">        // name(QueueManager.class, name, &quot;size&quot;) 中间按.分隔</span><br><span class=\"line\">        metrics.register(MetricRegistry.name(QueueManager.class, name, &quot;size&quot;),</span><br><span class=\"line\">                         new Gauge&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                             @Override</span><br><span class=\"line\">                             public Integer getValue() &#123;</span><br><span class=\"line\">                                 return queue.size();</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h4><p>counter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Counter pendingJobs = metrics.counter(name(QueueManager.class, &quot;pending-jobs&quot;));</span><br><span class=\"line\">public void addJob(Job job) &#123;</span><br><span class=\"line\">    // 自增</span><br><span class=\"line\">    pendingJobs.inc();</span><br><span class=\"line\">    queue.offer(job);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Job takeJob() &#123;</span><br><span class=\"line\">    pendingJobs.dec();</span><br><span class=\"line\">    return queue.take();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MetricRegistry.name(QueueManager.class, &quot;jobs&quot;, &quot;size&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Histograms\"><a href=\"#Histograms\" class=\"headerlink\" title=\"Histograms\"></a>Histograms</h4><p>histogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, &quot;response-sizes&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    // 增加上报的值</span><br><span class=\"line\">    responseSizes.update(response.getContent().length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h4><p>Timer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Timer responses = metrics.timer(name(RequestHandler.class, &quot;responses&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public String handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    final Timer.Context context = responses.time();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        // 具体执行逻辑</span><br><span class=\"line\">        return &quot;OK&quot;;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Health-Checks\"><a href=\"#Health-Checks\" class=\"headerlink\" title=\"Health Checks\"></a>Health Checks</h4><p>主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final HealthCheckRegistry healthChecks = new HealthCheckRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">public class DatabaseHealthCheck extends HealthCheck &#123;</span><br><span class=\"line\">    private final Database database;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DatabaseHealthCheck(Database database) &#123;</span><br><span class=\"line\">        this.database = database;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public HealthCheck.Result check() throws Exception &#123;</span><br><span class=\"line\">        if (database.isConnected()) &#123;</span><br><span class=\"line\">            return HealthCheck.Result.healthy();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return HealthCheck.Result.unhealthy(&quot;Cannot connect to &quot; + database.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">healthChecks.register(&quot;postgres&quot;, new DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Metrics-Annotation\"><a href=\"#Metrics-Annotation\" class=\"headerlink\" title=\"Metrics Annotation\"></a>Metrics Annotation</h4><p>注解方式，简单的实现统计某个方法、某个值的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* 统计调用的次数和时间</span><br><span class=\"line\">*/</span><br><span class=\"line\">@Timed</span><br><span class=\"line\">public void call() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">/**</span><br><span class=\"line\">* 统计登陆的次数</span><br><span class=\"line\">*/</span><br><span class=\"line\">@Counted</span><br><span class=\"line\">public void userLogin()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//other</span><br><span class=\"line\">@CachedGauge @Gauge @ExceptionMetered @Metered @Metric</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">### metrics上报</span><br><span class=\"line\">#### ConsoleReporter</span><br><span class=\"line\">对于简单指标的计算，可以使用定期向控制台报告：</span><br></pre></td></tr></table></figure>\n<p>final ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)<br>                                    .convertRatesTo(TimeUnit.SECONDS)<br>                                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();<br>metrics.register(“jvm.mem”, new MemoryUsageGaugeSet());<br>metrics.register(“jvm.gc”, new GarbageCollectorMetricSet());</p>\n<p>reporter.start(5, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### JmxReporter</span><br><span class=\"line\">使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：</span><br></pre></td></tr></table></figure>\n<p>final JmxReporter reporter = JmxReporter.forRegistry(registry).build();<br>reporter.start();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### CsvReporter</span><br><span class=\"line\">对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：</span><br></pre></td></tr></table></figure>\n<p>final CsvReporter reporter = CsvReporter.forRegistry(registry)<br>                                        .formatFor(Locale.US)<br>                                        .convertRatesTo(TimeUnit.SECONDS)<br>                                        .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                        .build(new File(“~/projects/data/“));<br>reporter.start(1, TimeUnit.SECONDS);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### Slf4jReporter</span><br><span class=\"line\">可以将上报数据记录slf4j日志：</span><br></pre></td></tr></table></figure>\n<p>final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)<br>                                            .outputTo(LoggerFactory.getLogger(“com.example.metrics”))<br>                                            .convertRatesTo(TimeUnit.SECONDS)<br>                                            .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                            .build();<br>reporter.start(1, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### HTTP Reporter</span><br><span class=\"line\">需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：</span><br></pre></td></tr></table></figure>\n<p>public class MyMetricsServletListener extends MetricsServlet.ContextListener {</p>\n<pre><code>public static final MetricRegistry metrics = new MetricRegistry();\n\n@Override\nprotected MetricRegistry getMetricRegistry() {\n\n    metrics.register(&quot;jvm.mem&quot;, new MemoryUsageGaugeSet());\n    metrics.register(&quot;jvm.gc&quot;, new GarbageCollectorMetricSet());\n    System.out.println(&quot;&gt;&gt;.Listener success...&quot;);\n    return metrics;\n}</code></pre><p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>public class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {</p>\n<pre><code>public static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n@Override\nprotected HealthCheckRegistry getHealthCheckRegistry() {\n\n    healthCheck.register(&quot;postgres&quot;, new TFHealthCheck(false));\n    return healthCheck;\n}</code></pre><p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyMetricsServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n\n&lt;servlet&gt;\n    &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;com.codahale.metrics.servlets.AdminServlet&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n   &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n   &lt;url-pattern&gt;/metrics/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[源码地址](https://github.com/dropwizard/metrics)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Kafka性能指标</span><br><span class=\"line\">#### kafka.server</span><br><span class=\"line\">BrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量</span><br><span class=\"line\">BrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数</span><br><span class=\"line\">BrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数</span><br><span class=\"line\">ReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|&lt;|all replicas|</span><br><span class=\"line\">ReplicaManager,name=PartitionCount: 分区数</span><br><span class=\"line\">ReplicaManager,name=LeaderCount: Leader副本数</span><br><span class=\"line\">ReplicaManager,name=IsrShrinksPerSec: ISR回退</span><br><span class=\"line\">ReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0</span><br><span class=\"line\">ReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度</span><br><span class=\"line\">FetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度</span><br><span class=\"line\">DelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小</span><br><span class=\"line\">DelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小</span><br><span class=\"line\">KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间</span><br><span class=\"line\"></span><br><span class=\"line\">#### kafka.network</span><br><span class=\"line\">kafka.network:type=RequestMetrics,name=$1,request=&#123;Produce|FetchConsumer|FetchFollower&#125;</span><br><span class=\"line\">RequestsPerSec: 每秒请求量</span><br><span class=\"line\">TotalTimeMs: 请求总时间</span><br><span class=\"line\">RequestQueueTimeMs: 请求队列等待时间</span><br><span class=\"line\">LocalTimeMs: 请求leader处理时间</span><br><span class=\"line\">RemoteTimeMs: 请求follower等待时间</span><br><span class=\"line\">ResponseQueueTimeMs: 请求队列等待响应时间</span><br><span class=\"line\">ResponseSendTimeMs: 请求响应发送时间</span><br><span class=\"line\">kafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间</span><br><span class=\"line\">    </span><br><span class=\"line\">#### kafka.controller</span><br><span class=\"line\">KafkaController,name=ActiveControllerCount: 活跃broker数量</span><br><span class=\"line\">ControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率</span><br><span class=\"line\">ControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率</span><br><span class=\"line\"></span><br><span class=\"line\">#### common</span><br><span class=\"line\">connection-close-rate: 每秒连接关闭率</span><br><span class=\"line\">connection-creation-rate: 每秒新建连接率</span><br><span class=\"line\">network-io-rate: 平均每秒IO次数（读取或写入）</span><br><span class=\"line\">outgoing-byte-rat: 平均每秒向服务器发送的字节数</span><br><span class=\"line\">request-rate: 平均每秒发送的请求数</span><br><span class=\"line\">incoming-byte-rate: 每秒读取字节数</span><br><span class=\"line\">response-rate: 每秒收到的回复</span><br><span class=\"line\">select-rate: IO切换次数</span><br><span class=\"line\">io-wait-ratio: IO线程等待时间</span><br><span class=\"line\">connection-count: 当前活跃连接数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### broker</span><br><span class=\"line\">outgoing-byte-rate: 平均每秒发送字节数</span><br><span class=\"line\">request-rate: 平均每秒请求数</span><br><span class=\"line\">request-size-avg: 所有请求的平均大小</span><br><span class=\"line\">request-latency-avg: 平均请求时间(ms)</span><br><span class=\"line\">response-rate: 每秒收到的响应数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### producer</span><br><span class=\"line\">waiting-threads: 缓存区排队的用户阻塞线程数</span><br><span class=\"line\">buffer-available-bytes: 可用内存字节数</span><br><span class=\"line\">batch-size-avg: 每个分区每次请求发送的平均字节数</span><br><span class=\"line\">compression-rate-avg: 批量记录平均压缩率</span><br><span class=\"line\">record-queue-time-avg: 批量记录耗费的平均时间（ms）</span><br><span class=\"line\">request-latency-avg: 平均请求时间（ms）</span><br><span class=\"line\">record-send-rate: 每秒发送的平均次数</span><br><span class=\"line\">record-retry-rate: 每秒重试发送次数</span><br><span class=\"line\">record-error-rate: 每秒错误数量次数</span><br><span class=\"line\">requests-in-flight: 目前等待响应的请求数量</span><br><span class=\"line\">metadata-age: 当前生产者数据使用周期（s）</span><br><span class=\"line\">    </span><br><span class=\"line\">#### consumer</span><br><span class=\"line\">##### Consumer Group</span><br><span class=\"line\">commit-latency-avg: 提交请求所用的平均时间</span><br><span class=\"line\">commit-rate: 每秒提交调用次数</span><br><span class=\"line\">assigned-partitions: 当前分配给该消费者的分区数（可选）</span><br><span class=\"line\">heartbeat-rate: 平均每秒心跳数</span><br><span class=\"line\">join-time-avg: 群组重新加入的平均时间</span><br><span class=\"line\">join-rate: 每秒连接组的数量</span><br><span class=\"line\">sync-time-avg: 群组同步所需的平均时间</span><br><span class=\"line\">sync-rate: 每秒同步的组数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### consumer fetch</span><br><span class=\"line\">fetch-size-avg: 每次请求获取的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: 每秒消耗的平均字节数</span><br><span class=\"line\">fetch-latency-avg: 请求所用的平均时间</span><br><span class=\"line\">fetch-rate: 每秒提取请求数</span><br><span class=\"line\">records-lag-max: 分区中记录的最大滞后数量</span><br><span class=\"line\">    </span><br><span class=\"line\">##### topic-level fetch</span><br><span class=\"line\">fetch-size-avg: topic请求的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: topic每秒平均消耗的字节数</span><br><span class=\"line\"></span><br><span class=\"line\">#### streams</span><br><span class=\"line\">##### Thread</span><br><span class=\"line\">[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">[commit|poll|process|punctuate]-rate: 平均每秒请求数</span><br><span class=\"line\">task-created-rate: 每秒新建任务数</span><br><span class=\"line\">task-closed-rate: 每秒关闭任务数</span><br><span class=\"line\">skipped-records-rate: 每秒跳过记录数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### Task</span><br><span class=\"line\">commit-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">commit-rate: 每秒提交的平均次数</span><br><span class=\"line\"></span><br><span class=\"line\">##### Processor Node</span><br><span class=\"line\">forward-rate: 每秒从源节点向下游转发的平均速率</span><br><span class=\"line\"></span><br><span class=\"line\">##### State Store </span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）</span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度</span><br><span class=\"line\"></span><br><span class=\"line\">#### others</span><br><span class=\"line\">GC、CPU、IO等</span><br><span class=\"line\"></span><br><span class=\"line\">### Monitoring实现</span><br><span class=\"line\">#### 方式一：</span><br><span class=\"line\">1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出</span><br><span class=\"line\">2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列</span><br><span class=\"line\">3.storm消费数据进行分析计算</span><br></pre></td></tr></table></figure>\n<p>需多依赖<br><dependency><br>    <groupId>io.dropwizard.metrics</groupId><br>    <artifactId>metrics-servlets</artifactId><br>    <version>3.1.0</version><br></dependency></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 方式二：</span><br><span class=\"line\">1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果</span><br><span class=\"line\">2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka</span><br><span class=\"line\">3.storm消费对应kafka数据，再进行分析计算</span><br><span class=\"line\"></span><br><span class=\"line\">Pom依赖：</span><br></pre></td></tr></table></figure>\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n            </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n            <exclusion>\n                <groupId>com.sun.jdmk</groupId>\n                <artifactId>jmxtools</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>javax.jms</groupId>\n                <artifactId>jms</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n    <dependency>\n           <groupId>io.dropwizard.metrics</groupId>\n           <artifactId>metrics-core</artifactId>\n           <version>3.1.0</version>\n    </dependency>\n```\n\n<h3 id=\"Kafka监控工具\"><a href=\"#Kafka监控工具\" class=\"headerlink\" title=\"Kafka监控工具\"></a>Kafka监控工具</h3><h4 id=\"KafkaOffsetMonitor\"><a href=\"#KafkaOffsetMonitor\" class=\"headerlink\" title=\"KafkaOffsetMonitor\"></a>KafkaOffsetMonitor</h4><blockquote>\n<p>是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全<br>可以对consumer消费情况进行监控，并能列出每个consumer的offset数据<br>可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）<br>可以查看每个consumser group列表信息<br>可以查看topic的历史消费信息<br><a href=\"https://github.com/quantifind/KafkaOffsetMonitor\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-web-console\"><a href=\"#kafka-web-console\" class=\"headerlink\" title=\"kafka-web-console\"></a>kafka-web-console</h4><blockquote>\n<p>也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。<br>可以查看brokers kafka集群信息<br>可以查看每个topic的Partition，logsize，分区leader等信息<br>可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息<br>可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表<br>控制台还提供了RAML中描述的JSON API<br><a href=\"https://github.com/claudemamo/kafka-web-console\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-manger\"><a href=\"#kafka-manger\" class=\"headerlink\" title=\"kafka-manger\"></a>kafka-manger</h4><blockquote>\n<p>是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况<br>可以选择你要运行的副本<br>可以基于当前分区状况重新分配生成分区<br>可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)<br>可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除<br>可以为已存在的topic增加分区，更新配置<br>可以支持多个topic批量重分区，选择partition broker位置等<br>可以启用JMX轮询代理，以及broker、metrics主题等级<br>可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者<br><a href=\"https://github.com/yahoo/kafka-manager\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h2><p><strong>欢迎大家共同讨论、分享</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><blockquote>\n<p>本次主要介绍关键的Kafka性能指标，Kafka metrics不同收集方式及数据上报的实现，最后确保达到有效监控Kafka工作状态的目的.</p>\n</blockquote>\n<h2 id=\"Kafka-metrics\"><a href=\"#Kafka-metrics\" class=\"headerlink\" title=\"Kafka metrics\"></a>Kafka metrics</h2><p>Kafka使用Yammer Metrics来上报服务端和客户端的Metric信息，通过配置采集相应数据上报监控系统，展示可视化结果。<br>Yammer Metrics提供6种形式的Metrics收集 —— Gauges，Counters，Histograms，Timers，Health Checks，Metrics Annotation。<br>Yammer Metrics将Metrics收集与上报分离，可以根据需要自由组合。目前支持的Reporter有Console Reporter，JMX Reporter，CSV Reporter，SLF4J Reporter，HTTP Reporter，Ganglia Reporter，Graphite Reporter。<br>因此，Kafka将可以通过以上组合输出我们想要的Metrics数据。</p>\n<h3 id=\"metrics收集\"><a href=\"#metrics收集\" class=\"headerlink\" title=\"metrics收集\"></a>metrics收集</h3><h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final MetricRegistry metrics = new MetricRegistry();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Gauges\"><a href=\"#Gauges\" class=\"headerlink\" title=\"Gauges\"></a>Gauges</h4><p>gauge是一个数值的瞬时测量。比如我们可能需要衡量队列中待处理作业的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class QueueManager &#123;</span><br><span class=\"line\">    private final Queue queue;</span><br><span class=\"line\">    public QueueManager(MetricRegistry metrics, String name) &#123;</span><br><span class=\"line\">        this.queue = new Queue();</span><br><span class=\"line\">        // name(QueueManager.class, name, &quot;size&quot;) 中间按.分隔</span><br><span class=\"line\">        metrics.register(MetricRegistry.name(QueueManager.class, name, &quot;size&quot;),</span><br><span class=\"line\">                         new Gauge&lt;Integer&gt;() &#123;</span><br><span class=\"line\">                             @Override</span><br><span class=\"line\">                             public Integer getValue() &#123;</span><br><span class=\"line\">                                 return queue.size();</span><br><span class=\"line\">                             &#125;</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Counters\"><a href=\"#Counters\" class=\"headerlink\" title=\"Counters\"></a>Counters</h4><p>counter是AtomicLong类型的gauge，你可以增加或减少其值。比如我们可能需要更有效的统计阻塞在队列里job的数量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Counter pendingJobs = metrics.counter(name(QueueManager.class, &quot;pending-jobs&quot;));</span><br><span class=\"line\">public void addJob(Job job) &#123;</span><br><span class=\"line\">    // 自增</span><br><span class=\"line\">    pendingJobs.inc();</span><br><span class=\"line\">    queue.offer(job);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public Job takeJob() &#123;</span><br><span class=\"line\">    pendingJobs.dec();</span><br><span class=\"line\">    return queue.take();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MetricRegistry.name(QueueManager.class, &quot;jobs&quot;, &quot;size&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Histograms\"><a href=\"#Histograms\" class=\"headerlink\" title=\"Histograms\"></a>Histograms</h4><p>histogram统计数据的分布，比如min,max,mean,stddev,median,P75,P90,P95,P98,P99,P99.9等的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Histogram responseSizes = metrics.histogram(name(RequestHandler.class, &quot;response-sizes&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public void handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    // 增加上报的值</span><br><span class=\"line\">    responseSizes.update(response.getContent().length);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h4><p>Timer统计一个特定的代码片段被调用的速率和其持续时间的分布，比如统计response的耗时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Timer responses = metrics.timer(name(RequestHandler.class, &quot;responses&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">public String handleRequest(Request request, Response response) &#123;</span><br><span class=\"line\">    final Timer.Context context = responses.time();</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        // 具体执行逻辑</span><br><span class=\"line\">        return &quot;OK&quot;;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        context.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Health-Checks\"><a href=\"#Health-Checks\" class=\"headerlink\" title=\"Health Checks\"></a>Health Checks</h4><p>主要用户可以自己判断系统的健康状态，比如判断数据库是否连接正常：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final HealthCheckRegistry healthChecks = new HealthCheckRegistry();</span><br><span class=\"line\"></span><br><span class=\"line\">public class DatabaseHealthCheck extends HealthCheck &#123;</span><br><span class=\"line\">    private final Database database;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DatabaseHealthCheck(Database database) &#123;</span><br><span class=\"line\">        this.database = database;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public HealthCheck.Result check() throws Exception &#123;</span><br><span class=\"line\">        if (database.isConnected()) &#123;</span><br><span class=\"line\">            return HealthCheck.Result.healthy();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            return HealthCheck.Result.unhealthy(&quot;Cannot connect to &quot; + database.getUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">healthChecks.register(&quot;postgres&quot;, new DatabaseHealthCheck(database));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Metrics-Annotation\"><a href=\"#Metrics-Annotation\" class=\"headerlink\" title=\"Metrics Annotation\"></a>Metrics Annotation</h4><p>注解方式，简单的实现统计某个方法、某个值的数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* 统计调用的次数和时间</span><br><span class=\"line\">*/</span><br><span class=\"line\">@Timed</span><br><span class=\"line\">public void call() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">/**</span><br><span class=\"line\">* 统计登陆的次数</span><br><span class=\"line\">*/</span><br><span class=\"line\">@Counted</span><br><span class=\"line\">public void userLogin()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//other</span><br><span class=\"line\">@CachedGauge @Gauge @ExceptionMetered @Metered @Metric</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">### metrics上报</span><br><span class=\"line\">#### ConsoleReporter</span><br><span class=\"line\">对于简单指标的计算，可以使用定期向控制台报告：</span><br></pre></td></tr></table></figure>\n<p>final ConsoleReporter reporter = ConsoleReporter.forRegistry(metrics)<br>                                    .convertRatesTo(TimeUnit.SECONDS)<br>                                    .convertDurationsTo(TimeUnit.MILLISECONDS).build();<br>metrics.register(“jvm.mem”, new MemoryUsageGaugeSet());<br>metrics.register(“jvm.gc”, new GarbageCollectorMetricSet());</p>\n<p>reporter.start(5, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### JmxReporter</span><br><span class=\"line\">使用Jmx上报数据，转化为MBean，注：不建议在生产环境中使用，JMX的RPC API是不可靠的，但为了开发和浏览可选可视化工具：</span><br></pre></td></tr></table></figure>\n<p>final JmxReporter reporter = JmxReporter.forRegistry(registry).build();<br>reporter.start();</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### CsvReporter</span><br><span class=\"line\">对于相对复杂的指标，可将同一个metric创建.csv文件，并将定期上报的数据按新行写入：</span><br></pre></td></tr></table></figure>\n<p>final CsvReporter reporter = CsvReporter.forRegistry(registry)<br>                                        .formatFor(Locale.US)<br>                                        .convertRatesTo(TimeUnit.SECONDS)<br>                                        .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                        .build(new File(“~/projects/data/“));<br>reporter.start(1, TimeUnit.SECONDS);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### Slf4jReporter</span><br><span class=\"line\">可以将上报数据记录slf4j日志：</span><br></pre></td></tr></table></figure>\n<p>final Slf4jReporter reporter = Slf4jReporter.forRegistry(registry)<br>                                            .outputTo(LoggerFactory.getLogger(“com.example.metrics”))<br>                                            .convertRatesTo(TimeUnit.SECONDS)<br>                                            .convertDurationsTo(TimeUnit.MILLISECONDS)<br>                                            .build();<br>reporter.start(1, TimeUnit.MINUTES);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### HTTP Reporter</span><br><span class=\"line\">需搭建web服务，新增Listener事件，完成相应metrics指标注册，目前支持HealthCheckServlet，ThreadDumpServlet，MetricsServlet，PingServlet四类，最后启动服务即可请求获取Json格式的监控数据。实现详情如下：</span><br></pre></td></tr></table></figure>\n<p>public class MyMetricsServletListener extends MetricsServlet.ContextListener {</p>\n<pre><code>public static final MetricRegistry metrics = new MetricRegistry();\n\n@Override\nprotected MetricRegistry getMetricRegistry() {\n\n    metrics.register(&quot;jvm.mem&quot;, new MemoryUsageGaugeSet());\n    metrics.register(&quot;jvm.gc&quot;, new GarbageCollectorMetricSet());\n    System.out.println(&quot;&gt;&gt;.Listener success...&quot;);\n    return metrics;\n}</code></pre><p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>public class MyHealthCheckServletListener extends HealthCheckServlet.ContextListener {</p>\n<pre><code>public static final HealthCheckRegistry healthCheck = new HealthCheckRegistry();\n@Override\nprotected HealthCheckRegistry getHealthCheckRegistry() {\n\n    healthCheck.register(&quot;postgres&quot;, new TFHealthCheck(false));\n    return healthCheck;\n}</code></pre><p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyMetricsServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n&lt;listener&gt;\n    &lt;listener-class&gt;com.immomo.hubble.kafka.servlet.MyHealthCheckServletListener&lt;/listener-class&gt;\n&lt;/listener&gt;\n\n&lt;servlet&gt;\n    &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;com.codahale.metrics.servlets.AdminServlet&lt;/servlet-class&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n   &lt;servlet-name&gt;metrics&lt;/servlet-name&gt;\n   &lt;url-pattern&gt;/metrics/*&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[源码地址](https://github.com/dropwizard/metrics)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### Kafka性能指标</span><br><span class=\"line\">#### kafka.server</span><br><span class=\"line\">BrokerTopicMetrics,name=MessagesInPerSec: 每秒消息量</span><br><span class=\"line\">BrokerTopicMetrics,name=BytesInPerSec: 每秒输入字节数</span><br><span class=\"line\">BrokerTopicMetrics,name=BytesOutPerSec: 每秒输出字节数</span><br><span class=\"line\">ReplicaManager,name=UnderReplicatedPartitions: 复制分区的数量，默认0，|ISR|&lt;|all replicas|</span><br><span class=\"line\">ReplicaManager,name=PartitionCount: 分区数</span><br><span class=\"line\">ReplicaManager,name=LeaderCount: Leader副本数</span><br><span class=\"line\">ReplicaManager,name=IsrShrinksPerSec: ISR回退</span><br><span class=\"line\">ReplicaManager,name=IsrExpandsPerSec: ISR超前 value is 0</span><br><span class=\"line\">ReplicaFetcherManager,name=MaxLag,clientId=Replica: 滞后follower和leader的最大消息长度</span><br><span class=\"line\">FetcherLagMetrics,name=ConsumerLag,clientId=([-.\\w]+),topic=([-.\\w]+),partition=([0-9]+): 滞后follower的消息长度</span><br><span class=\"line\">DelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Produce: producer等待请求大小</span><br><span class=\"line\">DelayedOperationPurgatory,name=PurgatorySize,delayedOperation=Fetch: 获取等待请求大小</span><br><span class=\"line\">KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent: 平均处理线程空闲时间</span><br><span class=\"line\"></span><br><span class=\"line\">#### kafka.network</span><br><span class=\"line\">kafka.network:type=RequestMetrics,name=$1,request=&#123;Produce|FetchConsumer|FetchFollower&#125;</span><br><span class=\"line\">RequestsPerSec: 每秒请求量</span><br><span class=\"line\">TotalTimeMs: 请求总时间</span><br><span class=\"line\">RequestQueueTimeMs: 请求队列等待时间</span><br><span class=\"line\">LocalTimeMs: 请求leader处理时间</span><br><span class=\"line\">RemoteTimeMs: 请求follower等待时间</span><br><span class=\"line\">ResponseQueueTimeMs: 请求队列等待响应时间</span><br><span class=\"line\">ResponseSendTimeMs: 请求响应发送时间</span><br><span class=\"line\">kafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent: 平均网络处理空闲时间</span><br><span class=\"line\">    </span><br><span class=\"line\">#### kafka.controller</span><br><span class=\"line\">KafkaController,name=ActiveControllerCount: 活跃broker数量</span><br><span class=\"line\">ControllerStats,name=LeaderElectionRateAndTimeMs: leader选举率</span><br><span class=\"line\">ControllerStats,name=UncleanLeaderElectionsPerSec: Unclean leader选举率</span><br><span class=\"line\"></span><br><span class=\"line\">#### common</span><br><span class=\"line\">connection-close-rate: 每秒连接关闭率</span><br><span class=\"line\">connection-creation-rate: 每秒新建连接率</span><br><span class=\"line\">network-io-rate: 平均每秒IO次数（读取或写入）</span><br><span class=\"line\">outgoing-byte-rat: 平均每秒向服务器发送的字节数</span><br><span class=\"line\">request-rate: 平均每秒发送的请求数</span><br><span class=\"line\">incoming-byte-rate: 每秒读取字节数</span><br><span class=\"line\">response-rate: 每秒收到的回复</span><br><span class=\"line\">select-rate: IO切换次数</span><br><span class=\"line\">io-wait-ratio: IO线程等待时间</span><br><span class=\"line\">connection-count: 当前活跃连接数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### broker</span><br><span class=\"line\">outgoing-byte-rate: 平均每秒发送字节数</span><br><span class=\"line\">request-rate: 平均每秒请求数</span><br><span class=\"line\">request-size-avg: 所有请求的平均大小</span><br><span class=\"line\">request-latency-avg: 平均请求时间(ms)</span><br><span class=\"line\">response-rate: 每秒收到的响应数</span><br><span class=\"line\">    </span><br><span class=\"line\">#### producer</span><br><span class=\"line\">waiting-threads: 缓存区排队的用户阻塞线程数</span><br><span class=\"line\">buffer-available-bytes: 可用内存字节数</span><br><span class=\"line\">batch-size-avg: 每个分区每次请求发送的平均字节数</span><br><span class=\"line\">compression-rate-avg: 批量记录平均压缩率</span><br><span class=\"line\">record-queue-time-avg: 批量记录耗费的平均时间（ms）</span><br><span class=\"line\">request-latency-avg: 平均请求时间（ms）</span><br><span class=\"line\">record-send-rate: 每秒发送的平均次数</span><br><span class=\"line\">record-retry-rate: 每秒重试发送次数</span><br><span class=\"line\">record-error-rate: 每秒错误数量次数</span><br><span class=\"line\">requests-in-flight: 目前等待响应的请求数量</span><br><span class=\"line\">metadata-age: 当前生产者数据使用周期（s）</span><br><span class=\"line\">    </span><br><span class=\"line\">#### consumer</span><br><span class=\"line\">##### Consumer Group</span><br><span class=\"line\">commit-latency-avg: 提交请求所用的平均时间</span><br><span class=\"line\">commit-rate: 每秒提交调用次数</span><br><span class=\"line\">assigned-partitions: 当前分配给该消费者的分区数（可选）</span><br><span class=\"line\">heartbeat-rate: 平均每秒心跳数</span><br><span class=\"line\">join-time-avg: 群组重新加入的平均时间</span><br><span class=\"line\">join-rate: 每秒连接组的数量</span><br><span class=\"line\">sync-time-avg: 群组同步所需的平均时间</span><br><span class=\"line\">sync-rate: 每秒同步的组数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### consumer fetch</span><br><span class=\"line\">fetch-size-avg: 每次请求获取的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: 每秒消耗的平均字节数</span><br><span class=\"line\">fetch-latency-avg: 请求所用的平均时间</span><br><span class=\"line\">fetch-rate: 每秒提取请求数</span><br><span class=\"line\">records-lag-max: 分区中记录的最大滞后数量</span><br><span class=\"line\">    </span><br><span class=\"line\">##### topic-level fetch</span><br><span class=\"line\">fetch-size-avg: topic请求的平均字节数</span><br><span class=\"line\">bytes-consumed-rate: topic每秒平均消耗的字节数</span><br><span class=\"line\"></span><br><span class=\"line\">#### streams</span><br><span class=\"line\">##### Thread</span><br><span class=\"line\">[commit|poll|process|punctuate]-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">[commit|poll|process|punctuate]-rate: 平均每秒请求数</span><br><span class=\"line\">task-created-rate: 每秒新建任务数</span><br><span class=\"line\">task-closed-rate: 每秒关闭任务数</span><br><span class=\"line\">skipped-records-rate: 每秒跳过记录数</span><br><span class=\"line\">    </span><br><span class=\"line\">##### Task</span><br><span class=\"line\">commit-latency-avg: 平均执行时间（ms）</span><br><span class=\"line\">commit-rate: 每秒提交的平均次数</span><br><span class=\"line\"></span><br><span class=\"line\">##### Processor Node</span><br><span class=\"line\">forward-rate: 每秒从源节点向下游转发的平均速率</span><br><span class=\"line\"></span><br><span class=\"line\">##### State Store </span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-latency-avg: 平均执行时间（ns）</span><br><span class=\"line\">[put|put-if-absent|get|delete|put-all|all|range|flush|restore]-rate: 每秒的平均运行速度</span><br><span class=\"line\"></span><br><span class=\"line\">#### others</span><br><span class=\"line\">GC、CPU、IO等</span><br><span class=\"line\"></span><br><span class=\"line\">### Monitoring实现</span><br><span class=\"line\">#### 方式一：</span><br><span class=\"line\">1.提供Web服务支持，执行监听器注册我们需要监控的指标，可按Json格式输出</span><br><span class=\"line\">2.启动后台进程定期通过Http请求抓取指标，并上报数据到redis队列</span><br><span class=\"line\">3.storm消费数据进行分析计算</span><br></pre></td></tr></table></figure>\n<p>需多依赖<br><dependency><br>    <groupId>io.dropwizard.metrics</groupId><br>    <artifactId>metrics-servlets</artifactId><br>    <version>3.1.0</version><br></dependency></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 方式二：</span><br><span class=\"line\">1.重写KafkaReporter继承ScheduledReporter，构造相应指标，格式化、序列化Json，通过metrics收集统计结果</span><br><span class=\"line\">2.创建kafkaProducer将构造的结果数据按不同Topic分类发送给kafka</span><br><span class=\"line\">3.storm消费对应kafka数据，再进行分析计算</span><br><span class=\"line\"></span><br><span class=\"line\">Pom依赖：</span><br></pre></td></tr></table></figure>\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka_2.11</artifactId>\n    <version>0.10.2.1</version>\n    <exclusions>\n        <exclusion>\n            <groupId>org.apache.zookeeper</groupId>\n            <artifactId>zookeeper</artifactId>\n            </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.4.10</version>\n    <exclusions>\n        <exclusion>\n            <groupId>com.sun.jmx</groupId>\n            <artifactId>jmxri</artifactId>\n        </exclusion>\n            <exclusion>\n                <groupId>com.sun.jdmk</groupId>\n                <artifactId>jmxtools</artifactId>\n            </exclusion>\n            <exclusion>\n                <groupId>javax.jms</groupId>\n                <artifactId>jms</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n    <dependency>\n           <groupId>io.dropwizard.metrics</groupId>\n           <artifactId>metrics-core</artifactId>\n           <version>3.1.0</version>\n    </dependency>\n```\n\n<h3 id=\"Kafka监控工具\"><a href=\"#Kafka监控工具\" class=\"headerlink\" title=\"Kafka监控工具\"></a>Kafka监控工具</h3><h4 id=\"KafkaOffsetMonitor\"><a href=\"#KafkaOffsetMonitor\" class=\"headerlink\" title=\"KafkaOffsetMonitor\"></a>KafkaOffsetMonitor</h4><blockquote>\n<p>是由Kafka开源社区提供的一款Web管理界面，配置操作简单，界面简单，但不能自动刷新，但功能覆盖不全<br>可以对consumer消费情况进行监控，并能列出每个consumer的offset数据<br>可以查看每个topic的partition的列表（topic，pid，offset，logsize，lag，owner等）<br>可以查看每个consumser group列表信息<br>可以查看topic的历史消费信息<br><a href=\"https://github.com/quantifind/KafkaOffsetMonitor\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-web-console\"><a href=\"#kafka-web-console\" class=\"headerlink\" title=\"kafka-web-console\"></a>kafka-web-console</h4><blockquote>\n<p>也是kafka开源的web监控程序，Scala编写，编译搭建相对于前者更复杂，默认用的数据库是H2，但可自动刷新。<br>可以查看brokers kafka集群信息<br>可以查看每个topic的Partition，logsize，分区leader等信息<br>可以查看consumer group的partition，offset，lag，owner等信息；topic feed最新发布消息<br>可以查看consumer偏移和滞后情况，历史消息以及consumer/producer消息吞吐量历史的图表<br>控制台还提供了RAML中描述的JSON API<br><a href=\"https://github.com/claudemamo/kafka-web-console\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h4 id=\"kafka-manger\"><a href=\"#kafka-manger\" class=\"headerlink\" title=\"kafka-manger\"></a>kafka-manger</h4><blockquote>\n<p>是由yahoo构建一款基于web的kafka管理器，可以管理多个kafka集群，且容易检测集群（topics,brokers,备份,分区）分布不均的情况<br>可以选择你要运行的副本<br>可以基于当前分区状况重新分配生成分区<br>可以选择topic配置并创建topic(0.8.1.1和0.8.2+的配置不同)<br>可以删除topic(只支持0.8.2+的版本并且要在broker配置中设置delete.topic.enable=true)，Topic list会指明哪些topic被删除<br>可以为已存在的topic增加分区，更新配置<br>可以支持多个topic批量重分区，选择partition broker位置等<br>可以启用JMX轮询代理，以及broker、metrics主题等级<br>可选地筛选出zookeeper中没有ids/owner/＆offset/目录的消费者<br><a href=\"https://github.com/yahoo/kafka-manager\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n</blockquote>\n<h2 id=\"QA\"><a href=\"#QA\" class=\"headerlink\" title=\"QA\"></a>QA</h2><p><strong>欢迎大家共同讨论、分享</strong></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck347mp3p00013us6ggcygfhv","category_id":"ck347mp4600023us67dbccefd","_id":"ck347mp4b00053us6ggse6qdi"}],"PostTag":[{"post_id":"ck347mp3p00013us6ggcygfhv","tag_id":"ck347mp4800033us6fkh0347v","_id":"ck347mp4a00043us68zem5v04"}],"Tag":[{"name":"大数据 kafka","_id":"ck347mp4800033us6fkh0347v"}]}}